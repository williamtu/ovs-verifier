
bpf/datapath_dbg.o_dbg:	file format ELF64-BPF

Disassembly of section tail-32:
ovs_parser:
; {
       0:	r6 = r1
; {
       1:	r7 = 0
; int ebpf_zero = 0;
       2:	*(u64 *)(r10 - 56) = r7
       3:	*(u64 *)(r10 - 64) = r7
       4:	*(u64 *)(r10 - 72) = r7
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	*(u64 *)(r10 - 80) = r7
       6:	*(u64 *)(r10 - 88) = r7
       7:	*(u64 *)(r10 - 96) = r7
       8:	*(u64 *)(r10 - 104) = r7
; if (!headers) {
       9:	*(u64 *)(r10 - 112) = r7
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 120) = r7
      11:	*(u64 *)(r10 - 128) = r7
      12:	*(u64 *)(r10 - 136) = r7
      13:	*(u64 *)(r10 - 144) = r7
      14:	*(u64 *)(r10 - 152) = r7
      15:	*(u64 *)(r10 - 160) = r7
      16:	*(u64 *)(r10 - 168) = r7
      17:	*(u64 *)(r10 - 176) = r7
      18:	*(u64 *)(r10 - 184) = r7
      19:	*(u64 *)(r10 - 192) = r7
      20:	*(u64 *)(r10 - 200) = r7
      21:	*(u64 *)(r10 - 208) = r7
      22:	*(u64 *)(r10 - 216) = r7
; ERR_EXIT();
      23:	*(u64 *)(r10 - 224) = r7
      24:	*(u64 *)(r10 - 232) = r7
      25:	*(u64 *)(r10 - 240) = r7
      26:	*(u64 *)(r10 - 248) = r7
      27:	*(u32 *)(r10 - 252) = r7
      28:	r1 = *(u32 *)(r6 + 80)
; int ebpf_zero = 0;
      29:	r8 = *(u32 *)(r6 + 76)
      30:	r2 = r8
      31:	r2 += 14
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	if r2 > r1 goto 716
      33:	r7 = 0
      34:	*(u32 *)(r10 - 144) = r7
      35:	r1 = 2680
; if (!mds) {
      36:	*(u16 *)(r10 - 16) = r1
; printt("no packet metadata found\n");
      37:	r1 = 2675205388074447967ll
      39:	*(u64 *)(r10 - 24) = r1
      40:	r1 = 7953757671518381344ll
      42:	*(u64 *)(r10 - 32) = r1
      43:	r1 = 4404641817453164581ll
      45:	*(u64 *)(r10 - 40) = r1
      46:	r1 = 2323048645859963504ll
      48:	*(u64 *)(r10 - 48) = r1
      49:	*(u8 *)(r10 - 14) = r7
      50:	r1 = *(u8 *)(r8 + 12)
      51:	r3 = *(u8 *)(r8 + 13)
; ERR_EXIT();
      52:	r3 <<= 8
      53:	r3 |= r1
      54:	r5 = *(u32 *)(r6 + 24)
      55:	r4 = *(u32 *)(r6 + 0)
      56:	r1 = r10
      57:	r1 += -48
      58:	r2 = 35
      59:	call 6
; }
      60:	*(u8 *)(r10 - 8) = r7
      61:	r1 = 748764259439436910ll
; flow_key.headers = *headers;
      63:	*(u64 *)(r10 - 16) = r1
      64:	r1 = 7594873537377233779ll
      66:	*(u64 *)(r10 - 24) = r1
      67:	r1 = 2334031328273851502ll
      69:	*(u64 *)(r10 - 32) = r1
      70:	r1 = 7594873680286672242ll
      72:	*(u64 *)(r10 - 40) = r1
      73:	r1 = 7453010149115063155ll
      75:	*(u64 *)(r10 - 48) = r1
      76:	r4 = *(u32 *)(r6 + 40)
      77:	r3 = *(u32 *)(r6 + 36)
      78:	r1 = r10
      79:	r1 += -48
      80:	r2 = 41
      81:	call 6
      82:	r1 = *(u32 *)(r6 + 48)
      83:	if r1 == 0 goto 16
      84:	*(u8 *)(r10 - 22) = r7
      85:	r1 = 2676
      86:	*(u16 *)(r10 - 24) = r1
      87:	r1 = 7308044090482912364ll
      89:	*(u64 *)(r10 - 32) = r1
      90:	r1 = 7017574103622361185ll
      92:	*(u64 *)(r10 - 40) = r1
      93:	r1 = 2338328219631577204ll
      95:	*(u64 *)(r10 - 48) = r1
      96:	r1 = r10
      97:	r1 += -48
      98:	r2 = 27
      99:	call 6

LBB0_3:
     100:	r3 = r10
     101:	r3 += -140
     102:	r1 = r6
     103:	r2 = 0
     104:	r4 = 14
     105:	call 26
     106:	r0 <<= 32
     107:	r0 s>>= 32
     108:	if r7 s> r0 goto 625
     109:	r1 = *(u32 *)(r10 - 144)
     110:	r2 = r1
     111:	r2 |= 1
     112:	*(u32 *)(r10 - 144) = r2
     113:	r4 = *(u32 *)(r6 + 24)
     114:	if r4 == 0 goto 21
     115:	r2 = r4
     116:	r2 |= 4096
     117:	*(u16 *)(r10 - 56) = r2
     118:	r3 = *(u32 *)(r6 + 28)
     119:	*(u16 *)(r10 - 54) = r3
     120:	r1 |= 257
     121:	*(u32 *)(r10 - 144) = r1
     122:	r1 = 10
     123:	*(u16 *)(r10 - 28) = r1
     124:	r1 = 2015699049
     125:	*(u32 *)(r10 - 32) = r1
     126:	r1 = 7166388607444348788ll
     128:	*(u64 *)(r10 - 40) = r1
     129:	r1 = 8030604370148158582ll
; flow_key.mds = *mds;
     131:	*(u64 *)(r10 - 48) = r1
     132:	r1 = r10
     133:	r1 += -48
     134:	r2 = 22
     135:	call 6

LBB0_6:
     136:	r2 = *(u8 *)(r8 + 12)
     137:	r1 = *(u8 *)(r8 + 13)
     138:	r1 <<= 8
     139:	r1 |= r2
     140:	r8 = 14
     141:	if r1 s> 1543 goto 3
     142:	if r1 == 8 goto 57
     143:	if r1 == 129 goto 5
     144:	goto 277

LBB0_9:
     145:	if r1 == 1544 goto 99
     146:	r9 = 112
     147:	if r1 == 56710 goto 126
     148:	if r1 != 43144 goto 273

LBB0_12:
     149:	r1 = *(u8 *)(r10 - 143)
     150:	r1 &= 1
     151:	if r1 != 0 goto 17
     152:	r1 = 169960549
     153:	*(u32 *)(r10 - 24) = r1
     154:	r1 = 8390891584458421024ll
     156:	*(u64 *)(r10 - 32) = r1
     157:	r1 = 8390045715596730732ll
     159:	*(u64 *)(r10 - 40) = r1
     160:	r1 = 8511913682638431566ll
     162:	*(u64 *)(r10 - 48) = r1
     163:	r7 = 0
     164:	*(u8 *)(r10 - 20) = r7
     165:	r1 = r10
     166:	r1 += -48
     167:	r2 = 29
     168:	goto 486

LBB0_14:
     169:	r3 = r10
     170:	r3 += -52
     171:	r1 = r6
     172:	r2 = 14
     173:	r4 = 4
     174:	call 26
     175:	r0 <<= 32
     176:	r0 s>>= 32
     177:	r1 = 0
     178:	if r1 s> r0 goto 555
     179:	*(u8 *)(r10 - 34) = r1
     180:	r1 = 2670
     181:	*(u16 *)(r10 - 36) = r1
     182:	r1 = 1634498147
     183:	*(u32 *)(r10 - 40) = r1
     184:	r1 = 2334956331002388848ll
     186:	*(u64 *)(r10 - 48) = r1
     187:	r1 = r10
     188:	r1 += -48
     189:	r2 = 15
     190:	call 6
     191:	r1 = *(u32 *)(r10 - 144)
     192:	r1 |= 512
     193:	*(u32 *)(r10 - 144) = r1
     194:	r8 = 18
     195:	r1 = *(u16 *)(r10 - 50)
     196:	if r1 s> 1543 goto 45
     197:	if r1 == 8 goto 2
     198:	if r1 == 129 goto 535
     199:	goto 222

LBB0_28:
     200:	r3 = r10
     201:	r3 += -48
     202:	r1 = r6
     203:	r2 = r8
     204:	r4 = 20
     205:	call 26
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r0 <<= 32
     207:	r0 s>>= 32
     208:	r1 = 0
; if (!action_batch) {
     209:	if r1 s> r0 goto 524
; printt("no action found, upcall to userspace\n");
     210:	r9 = *(u8 *)(r10 - 48)
     211:	r1 = *(u8 *)(r10 - 40)
     212:	*(u8 *)(r10 - 120) = r1
     213:	r1 = *(u8 *)(r10 - 39)
     214:	*(u8 *)(r10 - 119) = r1
     215:	r2 = *(u32 *)(r10 - 36)
     216:	*(u32 *)(r10 - 116) = r2
     217:	r2 = *(u32 *)(r10 - 32)
     218:	*(u32 *)(r10 - 112) = r2
     219:	r9 <<= 2
     220:	r9 &= 60
     221:	r9 += r8
     222:	r2 = *(u32 *)(r10 - 144)
     223:	r2 |= 4
     224:	*(u32 *)(r10 - 144) = r2
     225:	if r1 == 1 goto 431
     226:	if r1 == 17 goto 460
     227:	if r1 != 6 goto 194
     228:	r8 = r9

LBB0_33:
     229:	r3 = r10
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r3 += -76
     231:	r1 = r6
     232:	r2 = r8
     233:	r4 = 4
     234:	call 26
     235:	r0 <<= 32
     236:	r0 s>>= 32
     237:	r1 = 0
     238:	if r1 s> r0 goto 495
     239:	r1 = *(u32 *)(r10 - 144)
     240:	r1 |= 32
; value = map_lookup_elem(&datapath_stats, &index);
     241:	goto 179

LBB0_18:
     242:	r9 = 144
     243:	if r1 == 56710 goto 30
; if (value) {
     244:	if r1 != 1544 goto 177

LBB0_20:
; __sync_fetch_and_add(value, stat);
     245:	r3 = r10
; flow_stats_account(headers, mds, skb->len);
     246:	r3 += -120
     247:	r1 = r6
; flow_key.headers = *headers;
     248:	r2 = r8
     249:	r4 = 28
     250:	call 26
     251:	r0 <<= 32
     252:	r0 s>>= 32
     253:	r1 = 0
     254:	if r1 s> r0 goto 479
     255:	r1 = *(u16 *)(r10 - 120)
     256:	if r1 != 256 goto 151
     257:	r1 = *(u16 *)(r10 - 118)
     258:	if r1 != 8 goto 149
     259:	r1 = *(u8 *)(r10 - 116)
     260:	if r1 != 6 goto 147
     261:	r1 = *(u8 *)(r10 - 115)
     262:	if r1 != 4 goto 145
     263:	r1 = 0
     264:	*(u8 *)(r10 - 38) = r1
     265:	r1 = 2672
     266:	*(u16 *)(r10 - 40) = r1
     267:	r1 = 8241904408702247286ll
     269:	*(u64 *)(r10 - 48) = r1
     270:	r1 = r10
     271:	r1 += -48
     272:	r2 = 11
     273:	goto 144

LBB0_34:
     274:	r2 = *(u32 *)(r6 + 0)
     275:	r1 = r9
     276:	r1 |= 4
     277:	r1 += 7
     278:	r1 >>= 3
     279:	if r1 > r2 goto 454
     280:	r7 = r9
     281:	r7 >>= 3
     282:	*(u64 *)(r10 - 288) = r2
     283:	r0 = *(u8 *)skb[r7]
     284:	r2 = *(u64 *)(r10 - 288)
     285:	r0 &= 240
     286:	r0 >>= 4
     287:	*(u8 *)(r10 - 120) = r0
     288:	r9 |= 12
     289:	r1 = r9
     290:	r1 += 7
     291:	r1 >>= 3
     292:	if r1 > r2 goto 441
     293:	r1 = 0
     294:	*(u8 *)(r10 - 119) = r1
     295:	r1 = r9
     296:	r1 += 27
     297:	r1 >>= 3
     298:	if r1 > r2 goto 435
     299:	r7 = r9
     300:	r7 >>= 3
     301:	r0 = *(u32 *)skb[r7]
     302:	r2 = *(u64 *)(r10 - 288)
     303:	r0 >>= 8
     304:	r0 &= 1048575
     305:	*(u32 *)(r10 - 116) = r0
     306:	r1 = r9
     307:	r1 += 43
     308:	r1 >>= 3
     309:	if r1 > r2 goto 424
     310:	r1 = 0
     311:	*(u16 *)(r10 - 112) = r1
     312:	r1 = r9
     313:	r1 += 51
     314:	r1 >>= 3
     315:	if r1 > r2 goto 418
     316:	r7 = r9
; flow_key.mds = *mds;
     317:	r7 += 36
     318:	r1 = 4294967288ll
     320:	r7 &= r1
     321:	r7 >>= 3
     322:	r0 = *(u8 *)skb[r7]
     323:	r2 = *(u64 *)(r10 - 288)
     324:	*(u8 *)(r10 - 110) = r0
     325:	r1 = r9
     326:	r1 += 59
     327:	r1 >>= 3
     328:	if r1 > r2 goto 405
     329:	r7 = 0
     330:	*(u8 *)(r10 - 109) = r7
     331:	r1 = r9
     332:	r1 += 315
     333:	r1 >>= 3
     334:	if r1 > r2 goto 399
     335:	r2 = r9
     336:	r2 += 52
     337:	r1 = 4294967288ll
     339:	r2 &= r1
     340:	r2 >>= 3
     341:	r3 = r10
     342:	r3 += -108
     343:	r1 = r6
     344:	r4 = 32
     345:	call 26
     346:	r0 <<= 32
     347:	r0 s>>= 32
     348:	if r7 s> r0 goto 385
     349:	r1 = *(u32 *)(r10 - 144)
     350:	r1 |= 8
     351:	*(u32 *)(r10 - 144) = r1
     352:	r7 = *(u8 *)(r10 - 110)
     353:	r1 = 0
     354:	*(u8 *)(r10 - 34) = r1
     355:	r1 = 2660
     356:	*(u16 *)(r10 - 36) = r1
     357:	r1 = 622882676
     358:	*(u32 *)(r10 - 40) = r1
     359:	r1 = 8030604369210011753ll
     361:	*(u64 *)(r10 - 48) = r1
     362:	r1 = r10
     363:	r1 += -48
     364:	r2 = 15
     365:	r3 = r7
     366:	call 6
     367:	if r7 > 58 goto 401
     368:	r1 = 1
     369:	r1 <<= r7
     370:	r2 = 2280387116007424ll
     372:	r1 &= r2
     373:	if r1 != 0 goto 377
     374:	r9 += 308
     375:	if r7 == 17 goto 312
     376:	if r7 == 58 goto 1
     377:	goto 391

LBB0_58:
     378:	r3 = r10
     379:	r3 += -76
     380:	r1 = r6
     381:	r2 = r8
     382:	r4 = 8
     383:	call 26
     384:	r0 <<= 32
     385:	r0 s>>= 32
     386:	r1 = 0
     387:	if r1 s> r0 goto 346
     388:	r1 = 686117
     389:	*(u32 *)(r10 - 24) = r1
     390:	r1 = 2323048602641851168ll
; flow_stats = bpf_map_lookup_elem(&dp_flow_stats, &flow_key);
     392:	*(u64 *)(r10 - 32) = r1
     393:	r1 = 8657361305598259321ll
     395:	*(u64 *)(r10 - 40) = r1
; if (!flow_stats) {
     396:	r1 = 8367747989974639465ll
; printt("flow not found in flow stats, first install\n");
     398:	*(u64 *)(r10 - 48) = r1
     399:	r4 = *(u8 *)(r10 - 75)
     400:	r3 = *(u8 *)(r10 - 76)
     401:	r1 = r10
     402:	r1 += -48
     403:	r2 = 28
     404:	call 6
     405:	r1 = *(u32 *)(r10 - 144)
     406:	r1 |= 1024
     407:	goto 13

LBB0_26:
     408:	r1 = 0
     409:	*(u8 *)(r10 - 36) = r1
     410:	r1 = 175141473
     411:	*(u32 *)(r10 - 40) = r1
     412:	r1 = 2334106421097295433ll
     414:	*(u64 *)(r10 - 48) = r1
     415:	r1 = r10
     416:	r1 += -48
     417:	r2 = 13

LBB0_27:
     418:	call 6
     419:	r1 = *(u32 *)(r10 - 144)
; s.packet_count = 1;
     420:	r1 |= 16

LBB0_60:
     421:	*(u32 *)(r10 - 144) = r1

LBB0_61:
; s.byte_count = bytes;
     422:	r1 = *(u32 *)(r6 + 32)
     423:	*(u32 *)(r10 - 240) = r1
; s.used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     424:	r1 = *(u32 *)(r6 + 52)
     425:	if r1 == 0 goto 2
     426:	r1 = *(u32 *)(r6 + 36)
     427:	goto 1

LBB0_63:
     428:	r1 = *(u32 *)(r6 + 40)

LBB0_64:
     429:	*(u32 *)(r10 - 208) = r1
     430:	r1 = *(u32 *)(r6 + 8)
; err = bpf_map_update_elem(&dp_flow_stats, &flow_key, &s, BPF_ANY);
     431:	*(u32 *)(r10 - 236) = r1
     432:	r1 = *(u32 *)(r6 + 0)
     433:	*(u32 *)(r10 - 204) = r1
     434:	r2 = r10
     435:	r2 += -280
; flow_stats->packet_count += 1;
     436:	r1 = r6
     437:	r3 = 28
     438:	r4 = 0
     439:	call 20
     440:	r0 <<= 32
     441:	r0 >>= 32
     442:	r1 = 4294967225ll
; flow_stats->used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     444:	if r0 == r1 goto 33
     445:	if r0 != 0 goto 117
; printt("current: packets %d count %d ts %d\n",
     446:	r1 = 0
     447:	*(u8 *)(r10 - 12) = r1
     448:	r1 = 171210352
     449:	*(u32 *)(r10 - 16) = r1
     450:	r1 = 7575164683854618724ll
     452:	*(u64 *)(r10 - 24) = r1
     453:	r1 = 7575188049737247845ll
     455:	*(u64 *)(r10 - 32) = r1
     456:	r1 = 7957426734288364903ll
     458:	*(u64 *)(r10 - 40) = r1
     459:	r1 = 6873174124586758242ll
     461:	*(u64 *)(r10 - 48) = r1
     462:	r3 = *(u32 *)(r10 - 280)
     463:	r1 = r10
     464:	r1 += -48
     465:	r2 = 37
     466:	call 6
; flow_key.headers = *headers;
     467:	r1 = *(u32 *)(r10 - 280)
     468:	*(u32 *)(r10 - 168) = r1
     469:	r1 = *(u32 *)(r10 - 276)
     470:	*(u32 *)(r10 - 196) = r1
     471:	r1 = *(u8 *)(r10 - 260)
     472:	*(u8 *)(r10 - 162) = r1
     473:	r1 = *(u8 *)(r10 - 259)
     474:	*(u8 *)(r10 - 161) = r1
     475:	r1 = *(u8 *)(r10 - 153)
     476:	r1 &= 240
     477:	goto 51

LBB0_67:
     478:	r2 = r10
     479:	r2 += -280
     480:	r1 = r6
     481:	r3 = 28
     482:	r4 = 1
     483:	call 20
     484:	r0 <<= 32
     485:	r0 >>= 32
     486:	if r0 != 0 goto 76
     487:	r1 = 0
     488:	*(u8 *)(r10 - 12) = r1
     489:	r1 = 171341424
     490:	*(u32 *)(r10 - 16) = r1
     491:	r1 = 7575164683854618724ll
     493:	*(u64 *)(r10 - 24) = r1
     494:	r1 = 7575188049737247845ll
     496:	*(u64 *)(r10 - 32) = r1
     497:	r1 = 7957426734288364903ll
     499:	*(u64 *)(r10 - 40) = r1
     500:	r1 = 6873174124586758242ll
     502:	*(u64 *)(r10 - 48) = r1
     503:	r3 = *(u32 *)(r10 - 280)
     504:	r1 = r10
     505:	r1 += -48
     506:	r2 = 37
     507:	call 6
     508:	r1 = *(u32 *)(r10 - 280)
     509:	*(u32 *)(r10 - 168) = r1
     510:	r1 = *(u32 *)(r10 - 264)
     511:	r1 <<= 32
     512:	r2 = *(u32 *)(r10 - 268)
     513:	r1 |= r2
     514:	*(u64 *)(r10 - 176) = r1
     515:	r1 = r10
     516:	r1 += -276
     517:	r1 = *(u32 *)(r1 + 4)
     518:	r1 <<= 32
     519:	r2 = *(u32 *)(r10 - 276)
     520:	r1 |= r2
     521:	*(u64 *)(r10 - 184) = r1
     522:	r1 = *(u8 *)(r10 - 260)
     523:	*(u8 *)(r10 - 162) = r1
     524:	r1 = *(u8 *)(r10 - 259)
     525:	*(u8 *)(r10 - 161) = r1
     526:	r1 = *(u8 *)(r10 - 153)
     527:	r1 &= 240
     528:	r1 |= 1

LBB0_69:
     529:	*(u8 *)(r10 - 153) = r1
     530:	r7 = 0
     531:	*(u16 *)(r10 - 164) = r7
     532:	r2 = r10
     533:	r2 += -152
     534:	r1 = r6
; flow_key.mds = *mds;
     535:	r3 = 8
     536:	call 29
     537:	r0 <<= 32
     538:	r0 s>>= 32
     539:	r1 = 1
     540:	if r1 s> r0 goto 4
     541:	r1 = *(u8 *)(r10 - 153)
     542:	r1 &= 15
     543:	r1 |= 16
     544:	*(u8 *)(r10 - 153) = r1

LBB0_71:
     545:	*(u8 *)(r10 - 16) = r7
     546:	r1 = 748764258445063269ll
     548:	*(u64 *)(r10 - 24) = r1
     549:	r1 = 8223700945832209509ll
     551:	*(u64 *)(r10 - 32) = r1
     552:	r1 = 7957426734288364903ll
     554:	*(u64 *)(r10 - 40) = r1
     555:	r1 = 6873174124586758242ll
     557:	*(u64 *)(r10 - 48) = r1
     558:	r1 = r10
     559:	r1 += -48
     560:	r2 = 33
     561:	r3 = r0
     562:	call 6

LBB0_72:
     563:	r1 = 2681
     564:	*(u16 *)(r10 - 24) = r1
     565:	r1 = 7307970517681333792ll
     567:	*(u64 *)(r10 - 32) = r1
     568:	r1 = 7453010381915844725ll
     570:	*(u64 *)(r10 - 40) = r1
     571:	r1 = 2322294337917051216ll
     573:	*(u64 *)(r10 - 48) = r1
     574:	r7 = 0
     575:	*(u8 *)(r10 - 22) = r7
     576:	r1 = r10
     577:	r1 += -48
     578:	r2 = 27
     579:	call 6
     580:	r2 = r10
     581:	r2 += -252
     582:	r3 = r10
     583:	r3 += -144
     584:	r1 = 0ll
     586:	r4 = 0
     587:	call 2
     588:	r3 = *(u32 *)(r6 + 48)
     589:	if r3 == 0 goto 21
     590:	*(u8 *)(r10 - 8) = r7
     591:	r1 = 748764259439436910ll
     593:	*(u64 *)(r10 - 16) = r1
     594:	r1 = 7575103370313163873ll
     596:	*(u64 *)(r10 - 24) = r1
     597:	r1 = 8387229866955923812ll
     599:	*(u64 *)(r10 - 32) = r1
     600:	r1 = 8103418787772919652ll
     602:	*(u64 *)(r10 - 40) = r1
     603:	r1 = 2318337251234506098ll
     605:	*(u64 *)(r10 - 48) = r1
     606:	r1 = r10
; int index = 0;
     607:	r1 += -48
     608:	r2 = 41
     609:	call 6
     610:	goto 8

LBB0_76:
     611:	r2 = r10
; int error = bpf_map_update_elem(&percpu_executing_key, &index,
     612:	r2 += -252
     613:	r3 = r10
     614:	r3 += -248
     615:	r1 = 0ll
     617:	r4 = 0
     618:	call 2

LBB0_77:
; if (error) {
     619:	r7 = 0
; printt("update percpu_executing_key failed: %d\n", error);
     620:	*(u32 *)(r6 + 48) = r7
     621:	r1 = 2926244458165024ll
     623:	*(u64 *)(r10 - 24) = r1
     624:	r1 = 8103501230877974571ll
     626:	*(u64 *)(r10 - 32) = r1
     627:	r1 = 2335225758293500012ll
     629:	*(u64 *)(r10 - 40) = r1
     630:	r8 = 7809632219746099572ll
     632:	*(u64 *)(r10 - 48) = r8
     633:	r1 = r10
     634:	r1 += -48
     635:	r2 = 32
     636:	call 6
     637:	r1 = r6
     638:	r2 = 0ll
     640:	r3 = 33
     641:	call 12
; type = action->type;
     642:	r1 = 2668
; printt("action type %d\n", type);
     643:	*(u16 *)(r10 - 24) = r1
     644:	*(u64 *)(r10 - 32) = r8
     645:	r1 = 2334956331002456429ll
     647:	*(u64 *)(r10 - 40) = r1
     648:	r1 = 2332110682684802395ll
     650:	*(u64 *)(r10 - 48) = r1
     651:	*(u8 *)(r10 - 22) = r7
     652:	r1 = r10
     653:	r1 += -48
; switch (type) {
     654:	r2 = 27

LBB0_78:
     655:	call 6
     656:	goto 92

LBB0_56:
     657:	r3 = r10
     658:	r3 += -76
     659:	r1 = r6
; printt("output action port = %d\n", action->u.out.port);
     660:	r2 = r9
     661:	r4 = 2
     662:	call 26
     663:	r0 <<= 32
     664:	r0 s>>= 32
     665:	r1 = 0
     666:	if r1 s> r0 goto 67
     667:	r1 = 10
     668:	*(u16 *)(r10 - 24) = r1
     669:	r1 = 8657361305598256239ll
     671:	*(u64 *)(r10 - 32) = r1
     672:	r1 = 7142841109859606629ll
     674:	*(u64 *)(r10 - 40) = r1
     675:	r1 = 8104636687103910761ll
     677:	*(u64 *)(r10 - 48) = r1
     678:	r4 = *(u8 *)(r10 - 75)
     679:	r3 = *(u8 *)(r10 - 76)
     680:	r1 = r10
     681:	r1 += -48
; printt("hash\n");
     682:	r2 = 26
     683:	call 6
     684:	r1 = *(u32 *)(r10 - 144)
     685:	r1 |= 128
     686:	goto 65270

LBB0_50:
     687:	r9 <<= 3

LBB0_51:
     688:	r2 = r9
     689:	r2 += 23
     690:	r1 = 4294967288ll
     692:	r2 &= r1
     693:	r2 >>= 3
     694:	r3 = *(u32 *)(r6 + 0)
; printt("vlan push tci %d\n", action->u.push_vlan.vlan_tci);
     695:	if r2 > r3 goto 38
     696:	r7 = r9
     697:	r7 += 39
     698:	r7 &= r1
     699:	r8 = r9
     700:	r8 &= r1
     701:	r8 >>= 3
     702:	*(u64 *)(r10 - 288) = r3
     703:	r0 = *(u16 *)skb[r8]
     704:	*(u16 *)(r10 - 76) = r0
     705:	r7 >>= 3
     706:	r1 = *(u64 *)(r10 - 288)
     707:	if r7 > r1 goto 26
     708:	r8 = r9
     709:	r8 += 16
     710:	r7 = r9
     711:	r7 += 55
; printt("truncate\n");
     712:	r1 = 4294967288ll
     714:	r7 &= r1
; printt("end of action processing\n");
     715:	r8 &= r1
     716:	r8 >>= 3
     717:	r0 = *(u16 *)skb[r8]
     718:	r2 = *(u64 *)(r10 - 288)
     719:	*(u16 *)(r10 - 74) = r0
     720:	r7 >>= 3
     721:	if r7 > r2 goto 12
     722:	r1 = 0
     723:	*(u16 *)(r10 - 72) = r1
     724:	r9 += 71
     725:	r3 = 4294967288ll
     727:	r9 &= r3
     728:	r9 >>= 3
     729:	if r9 > r2 goto 4
     730:	*(u16 *)(r10 - 70) = r1
; printt("vlan pop\n");
     731:	r1 = *(u32 *)(r10 - 144)
     732:	r1 |= 64
     733:	goto 65223

LBB0_73:
     734:	r1 = 0
     735:	*(u8 *)(r10 - 30) = r1
     736:	r1 = 2672
     737:	*(u16 *)(r10 - 32) = r1
     738:	r1 = 8030591174902443890ll
     740:	*(u64 *)(r10 - 40) = r1
; printt("recirc\n");
     741:	r1 = 8243030313072222576ll
     743:	*(u64 *)(r10 - 48) = r1
     744:	r1 = r10
     745:	r1 += -48
     746:	r2 = 19

LBB0_74:
     747:	call 6
     748:	r7 = 2

LBB0_79:
; printt("userspace action, len = %d, ifindex = %d upcall back\n",
     749:	r0 = r7
     750:	exit

LBB0_47:
     751:	r1 = 7631471
     752:	*(u32 *)(r10 - 16) = r1
     753:	r1 = 8102104866965712750ll
     755:	*(u64 *)(r10 - 24) = r1
     756:	r1 = 2338042638363879456ll
     758:	*(u64 *)(r10 - 32) = r1
     759:	r1 = 7957695011081254008ll
     761:	*(u64 *)(r10 - 40) = r1
     762:	r1 = 7286884079405720425ll
     764:	*(u64 *)(r10 - 48) = r1
     765:	r1 = r10
     766:	r1 += -48
     767:	r2 = 36
     768:	goto 65514

LBB0_43:
     769:	if r7 == 6 goto 64995
     770:	r1 = 10
     771:	*(u16 *)(r10 - 24) = r1
; if (skb->cb[OVS_CB_INGRESS]) {
     772:	r1 = 7234315311538774132ll
; __asm__ __volatile__("": : :"memory");
     774:	*(u64 *)(r10 - 32) = r1
; return skb->ingress_ifindex;
     775:	r1 = 8029390886039220084ll
; printt("set action, remote ipv4 = %x, is_set = %d\n",
     777:	*(u64 *)(r10 - 40) = r1
     778:	r1 = 8030604369210011753ll
     780:	*(u64 *)(r10 - 48) = r1
     781:	r1 = r10
     782:	r1 += -48
     783:	r2 = 26
     784:	call 6
     785:	goto 65172
Disassembly of section tail-33:
lookup:
; {
       0:	r8 = r1
; {
       1:	r6 = 0
; int ebpf_zero = 0;
       2:	*(u32 *)(r10 - 272) = r6
       3:	r2 = r10
       4:	r2 += -272
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r1 = 0ll
       7:	call 1
       8:	r9 = r0
; if (!headers) {
       9:	if r9 != 0 goto 19
; printt("no packet header found\n");
      10:	r1 = 2925175346521632ll
      12:	*(u64 *)(r10 - 256) = r1
      13:	r1 = 8243105062447489140ll
      15:	*(u64 *)(r10 - 264) = r1
      16:	r1 = 7308044090482913134ll
      18:	*(u64 *)(r10 - 272) = r1
      19:	r1 = r10
      20:	r1 += -272
      21:	r2 = 24
      22:	call 6
; ERR_EXIT();
      23:	r1 = 2332110682684802395ll
      25:	*(u64 *)(r10 - 272) = r1
      26:	r1 = 10
      27:	*(u16 *)(r10 - 264) = r1
      28:	goto 27

LBB1_2:
; int ebpf_zero = 0;
      29:	*(u32 *)(r10 - 272) = r6
      30:	r2 = r10
      31:	r2 += -272
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = 0ll
      34:	call 1
      35:	r7 = r0
; if (!mds) {
      36:	if r7 != 0 goto 25
; printt("no packet metadata found\n");
      37:	r1 = 7236850772546183540ll
      39:	*(u64 *)(r10 - 256) = r1
      40:	r1 = 7017841271895826548ll
      42:	*(u64 *)(r10 - 264) = r1
      43:	r1 = 7308044090482913134ll
      45:	*(u64 *)(r10 - 272) = r1
      46:	r6 = 10
      47:	*(u16 *)(r10 - 248) = r6
      48:	r1 = r10
      49:	r1 += -272
      50:	r2 = 26
      51:	call 6
; ERR_EXIT();
      52:	r1 = 2332110682684802395ll
      54:	*(u64 *)(r10 - 272) = r1
      55:	*(u16 *)(r10 - 264) = r6

LBB1_4:
      56:	r1 = r10
      57:	r1 += -272
      58:	r2 = 10

LBB1_5:
      59:	call 6

LBB1_6:
; }
      60:	r0 = 0
      61:	exit

LBB1_7:
      62:	*(u64 *)(r10 - 288) = r8
; flow_key.headers = *headers;
      63:	r1 = *(u32 *)(r9 + 68)
      64:	r1 <<= 32
      65:	r2 = *(u32 *)(r9 + 64)
      66:	r1 |= r2
      67:	*(u64 *)(r10 - 296) = r1
      68:	r1 = *(u32 *)(r9 + 76)
      69:	r1 <<= 32
      70:	r3 = *(u32 *)(r9 + 72)
      71:	r1 |= r3
      72:	*(u64 *)(r10 - 304) = r1
      73:	r1 = *(u32 *)(r9 + 84)
      74:	r1 <<= 32
      75:	r3 = *(u32 *)(r9 + 80)
      76:	r1 |= r3
      77:	*(u64 *)(r10 - 320) = r1
      78:	r1 = *(u32 *)(r9 + 12)
      79:	r1 <<= 32
      80:	r5 = *(u32 *)(r9 + 8)
      81:	r1 |= r5
      82:	*(u64 *)(r10 - 312) = r1
      83:	r5 = *(u32 *)(r9 + 20)
      84:	r5 <<= 32
      85:	r0 = *(u32 *)(r9 + 16)
      86:	r5 |= r0
      87:	r0 = *(u32 *)(r9 + 28)
      88:	r0 <<= 32
      89:	r6 = *(u32 *)(r9 + 24)
      90:	r0 |= r6
      91:	r6 = *(u32 *)(r9 + 36)
      92:	r6 <<= 32
      93:	r8 = *(u32 *)(r9 + 32)
      94:	r6 |= r8
      95:	r8 = *(u32 *)(r9 + 44)
      96:	r8 <<= 32
      97:	r1 = *(u32 *)(r9 + 40)
      98:	r8 |= r1
      99:	r1 = *(u32 *)(r9 + 52)
     100:	r1 <<= 32
     101:	r2 = *(u32 *)(r9 + 48)
     102:	r1 |= r2
     103:	r2 = *(u32 *)(r9 + 60)
     104:	r2 <<= 32
     105:	r3 = *(u32 *)(r9 + 56)
     106:	r2 |= r3
     107:	r3 = *(u32 *)(r9 + 92)
     108:	r3 <<= 32
     109:	r4 = *(u32 *)(r9 + 88)
     110:	r3 |= r4
     111:	*(u64 *)(r10 - 184) = r3
     112:	r3 = *(u64 *)(r10 - 320)
     113:	*(u64 *)(r10 - 192) = r3
     114:	r3 = *(u64 *)(r10 - 304)
     115:	*(u64 *)(r10 - 200) = r3
     116:	r3 = *(u64 *)(r10 - 296)
     117:	*(u64 *)(r10 - 208) = r3
     118:	*(u64 *)(r10 - 216) = r2
     119:	*(u64 *)(r10 - 224) = r1
     120:	*(u64 *)(r10 - 232) = r8
     121:	*(u64 *)(r10 - 240) = r6
     122:	*(u64 *)(r10 - 248) = r0
     123:	*(u64 *)(r10 - 256) = r5
     124:	r1 = *(u64 *)(r10 - 312)
     125:	*(u64 *)(r10 - 264) = r1
     126:	r1 = *(u32 *)(r9 + 0)
     127:	r2 = *(u32 *)(r9 + 4)
     128:	r2 <<= 32
     129:	r2 |= r1
     130:	*(u64 *)(r10 - 272) = r2
; flow_key.mds = *mds;
     131:	r1 = *(u32 *)(r7 + 76)
     132:	r1 <<= 32
     133:	r2 = *(u32 *)(r7 + 72)
     134:	r1 |= r2
     135:	*(u64 *)(r10 - 296) = r1
     136:	r1 = *(u32 *)(r7 + 84)
     137:	r1 <<= 32
     138:	r3 = *(u32 *)(r7 + 80)
     139:	r1 |= r3
     140:	*(u64 *)(r10 - 304) = r1
     141:	r1 = *(u32 *)(r7 + 92)
     142:	r1 <<= 32
     143:	r3 = *(u32 *)(r7 + 88)
     144:	r1 |= r3
     145:	*(u64 *)(r10 - 320) = r1
     146:	r1 = *(u32 *)(r7 + 20)
     147:	r1 <<= 32
     148:	r5 = *(u32 *)(r7 + 16)
     149:	r1 |= r5
     150:	*(u64 *)(r10 - 312) = r1
     151:	r5 = *(u32 *)(r7 + 28)
     152:	r5 <<= 32
     153:	r0 = *(u32 *)(r7 + 24)
     154:	r5 |= r0
     155:	r0 = *(u32 *)(r7 + 36)
     156:	r0 <<= 32
     157:	r6 = *(u32 *)(r7 + 32)
     158:	r0 |= r6
     159:	r6 = *(u32 *)(r7 + 44)
     160:	r6 <<= 32
     161:	r8 = *(u32 *)(r7 + 40)
     162:	r6 |= r8
     163:	r8 = *(u32 *)(r7 + 52)
     164:	r8 <<= 32
     165:	r1 = *(u32 *)(r7 + 48)
     166:	r8 |= r1
     167:	r1 = *(u32 *)(r7 + 60)
     168:	r1 <<= 32
     169:	r2 = *(u32 *)(r7 + 56)
     170:	r1 |= r2
     171:	r2 = *(u32 *)(r7 + 68)
     172:	r2 <<= 32
     173:	r3 = *(u32 *)(r7 + 64)
     174:	r2 |= r3
     175:	r3 = *(u32 *)(r7 + 100)
     176:	r3 <<= 32
     177:	r4 = *(u32 *)(r7 + 96)
     178:	r3 |= r4
     179:	*(u64 *)(r10 - 80) = r3
     180:	r3 = *(u64 *)(r10 - 320)
     181:	*(u64 *)(r10 - 88) = r3
     182:	r3 = *(u64 *)(r10 - 304)
     183:	*(u64 *)(r10 - 96) = r3
     184:	r3 = *(u64 *)(r10 - 296)
     185:	*(u64 *)(r10 - 104) = r3
     186:	*(u64 *)(r10 - 112) = r2
     187:	*(u64 *)(r10 - 120) = r1
     188:	*(u64 *)(r10 - 128) = r8
     189:	*(u64 *)(r10 - 136) = r6
     190:	*(u64 *)(r10 - 144) = r0
     191:	*(u64 *)(r10 - 152) = r5
     192:	r1 = *(u64 *)(r10 - 312)
     193:	*(u64 *)(r10 - 160) = r1
     194:	r1 = *(u32 *)(r7 + 12)
     195:	r1 <<= 32
     196:	r2 = *(u32 *)(r7 + 8)
     197:	r1 |= r2
     198:	*(u64 *)(r10 - 168) = r1
     199:	r1 = *(u32 *)(r7 + 0)
     200:	r2 = *(u32 *)(r7 + 4)
     201:	r2 <<= 32
     202:	r2 |= r1
     203:	*(u64 *)(r10 - 176) = r2
     204:	r2 = r10
     205:	r2 += -272
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r1 = 0ll
     208:	call 1
; if (!action_batch) {
     209:	if r0 != 0 goto 26
; printt("no action found, upcall to userspace\n");
     210:	r1 = 10
     211:	*(u16 *)(r10 - 236) = r1
     212:	r1 = 1701011824
     213:	*(u32 *)(r10 - 240) = r1
     214:	r1 = 8318823008267431796ll
     216:	*(u64 *)(r10 - 248) = r1
     217:	r1 = 2336361472234386720ll
     219:	*(u64 *)(r10 - 256) = r1
     220:	r1 = 3198803085999087726ll
     222:	*(u64 *)(r10 - 264) = r1
     223:	r1 = 8028075780944719726ll
     225:	*(u64 *)(r10 - 272) = r1
     226:	r1 = r10
     227:	r1 += -272
     228:	r2 = 38
     229:	call 6
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r1 = *(u64 *)(r10 - 288)
     231:	r2 = 0ll
     233:	r3 = 35
     234:	call 12
     235:	goto 65360

LBB1_9:
     236:	*(u64 *)(r10 - 336) = r0
     237:	r6 = 1
     238:	*(u32 *)(r10 - 272) = r6
     239:	r2 = r10
     240:	r2 += -272
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r1 = 0ll
     243:	call 1
; if (value) {
     244:	if r0 == 0 goto 1
; __sync_fetch_and_add(value, stat);
     245:	lock *(u64 *)(r0 + 0) += r6

LBB1_11:
; flow_stats_account(headers, mds, skb->len);
     246:	r1 = *(u64 *)(r10 - 288)
     247:	r1 = *(u32 *)(r1 + 0)
; flow_key.headers = *headers;
     248:	*(u64 *)(r10 - 328) = r1
     249:	r1 = *(u32 *)(r9 + 68)
     250:	r1 <<= 32
     251:	r2 = *(u32 *)(r9 + 64)
     252:	r1 |= r2
     253:	*(u64 *)(r10 - 296) = r1
     254:	r1 = *(u32 *)(r9 + 76)
     255:	r1 <<= 32
     256:	r3 = *(u32 *)(r9 + 72)
     257:	r1 |= r3
     258:	*(u64 *)(r10 - 304) = r1
     259:	r1 = *(u32 *)(r9 + 84)
     260:	r1 <<= 32
     261:	r3 = *(u32 *)(r9 + 80)
     262:	r1 |= r3
     263:	*(u64 *)(r10 - 320) = r1
     264:	r1 = *(u32 *)(r9 + 12)
     265:	r1 <<= 32
     266:	r5 = *(u32 *)(r9 + 8)
     267:	r1 |= r5
     268:	*(u64 *)(r10 - 312) = r1
     269:	r5 = *(u32 *)(r9 + 20)
     270:	r5 <<= 32
     271:	r0 = *(u32 *)(r9 + 16)
     272:	r5 |= r0
     273:	r0 = *(u32 *)(r9 + 28)
     274:	r0 <<= 32
     275:	r6 = *(u32 *)(r9 + 24)
     276:	r0 |= r6
     277:	r6 = *(u32 *)(r9 + 36)
     278:	r6 <<= 32
     279:	r8 = *(u32 *)(r9 + 32)
     280:	r6 |= r8
     281:	r8 = *(u32 *)(r9 + 44)
     282:	r8 <<= 32
     283:	r1 = *(u32 *)(r9 + 40)
     284:	r8 |= r1
     285:	r1 = *(u32 *)(r9 + 52)
     286:	r1 <<= 32
     287:	r2 = *(u32 *)(r9 + 48)
     288:	r1 |= r2
     289:	r2 = *(u32 *)(r9 + 60)
     290:	r2 <<= 32
     291:	r3 = *(u32 *)(r9 + 56)
     292:	r2 |= r3
     293:	r3 = *(u32 *)(r9 + 92)
     294:	r3 <<= 32
     295:	r4 = *(u32 *)(r9 + 88)
     296:	r3 |= r4
     297:	*(u64 *)(r10 - 184) = r3
     298:	r3 = *(u64 *)(r10 - 320)
     299:	*(u64 *)(r10 - 192) = r3
     300:	r3 = *(u64 *)(r10 - 304)
     301:	*(u64 *)(r10 - 200) = r3
     302:	r3 = *(u64 *)(r10 - 296)
     303:	*(u64 *)(r10 - 208) = r3
     304:	*(u64 *)(r10 - 216) = r2
     305:	*(u64 *)(r10 - 224) = r1
     306:	*(u64 *)(r10 - 232) = r8
     307:	*(u64 *)(r10 - 240) = r6
     308:	*(u64 *)(r10 - 248) = r0
     309:	*(u64 *)(r10 - 256) = r5
     310:	r1 = *(u64 *)(r10 - 312)
     311:	*(u64 *)(r10 - 264) = r1
     312:	r1 = *(u32 *)(r9 + 0)
     313:	r2 = *(u32 *)(r9 + 4)
     314:	r2 <<= 32
     315:	r2 |= r1
     316:	*(u64 *)(r10 - 272) = r2
; flow_key.mds = *mds;
     317:	r1 = *(u32 *)(r7 + 76)
     318:	r1 <<= 32
     319:	r2 = *(u32 *)(r7 + 72)
     320:	r1 |= r2
     321:	*(u64 *)(r10 - 296) = r1
     322:	r1 = *(u32 *)(r7 + 84)
     323:	r1 <<= 32
     324:	r3 = *(u32 *)(r7 + 80)
     325:	r1 |= r3
     326:	*(u64 *)(r10 - 304) = r1
     327:	r1 = *(u32 *)(r7 + 92)
     328:	r1 <<= 32
     329:	r3 = *(u32 *)(r7 + 88)
     330:	r1 |= r3
     331:	*(u64 *)(r10 - 320) = r1
     332:	r1 = *(u32 *)(r7 + 20)
     333:	r1 <<= 32
     334:	r5 = *(u32 *)(r7 + 16)
     335:	r1 |= r5
     336:	*(u64 *)(r10 - 312) = r1
     337:	r5 = *(u32 *)(r7 + 28)
     338:	r5 <<= 32
     339:	r0 = *(u32 *)(r7 + 24)
     340:	r5 |= r0
     341:	r0 = *(u32 *)(r7 + 36)
     342:	r0 <<= 32
     343:	r6 = *(u32 *)(r7 + 32)
     344:	r0 |= r6
     345:	r6 = *(u32 *)(r7 + 44)
     346:	r6 <<= 32
     347:	r8 = *(u32 *)(r7 + 40)
     348:	r6 |= r8
     349:	r8 = *(u32 *)(r7 + 52)
     350:	r8 <<= 32
     351:	r1 = *(u32 *)(r7 + 48)
     352:	r8 |= r1
     353:	r1 = *(u32 *)(r7 + 60)
     354:	r1 <<= 32
     355:	r2 = *(u32 *)(r7 + 56)
     356:	r1 |= r2
     357:	r2 = *(u32 *)(r7 + 68)
     358:	r2 <<= 32
     359:	r3 = *(u32 *)(r7 + 64)
     360:	r2 |= r3
     361:	r3 = *(u32 *)(r7 + 100)
     362:	r3 <<= 32
     363:	r4 = *(u32 *)(r7 + 96)
     364:	r3 |= r4
     365:	*(u64 *)(r10 - 80) = r3
     366:	r3 = *(u64 *)(r10 - 320)
     367:	*(u64 *)(r10 - 88) = r3
     368:	r3 = *(u64 *)(r10 - 304)
     369:	*(u64 *)(r10 - 96) = r3
     370:	r3 = *(u64 *)(r10 - 296)
     371:	*(u64 *)(r10 - 104) = r3
     372:	*(u64 *)(r10 - 112) = r2
     373:	*(u64 *)(r10 - 120) = r1
     374:	*(u64 *)(r10 - 128) = r8
     375:	*(u64 *)(r10 - 136) = r6
     376:	*(u64 *)(r10 - 144) = r0
     377:	*(u64 *)(r10 - 152) = r5
     378:	r1 = *(u64 *)(r10 - 312)
     379:	*(u64 *)(r10 - 160) = r1
     380:	r1 = *(u32 *)(r7 + 12)
     381:	r1 <<= 32
     382:	r2 = *(u32 *)(r7 + 8)
     383:	r1 |= r2
     384:	*(u64 *)(r10 - 168) = r1
     385:	r1 = *(u32 *)(r7 + 0)
     386:	r2 = *(u32 *)(r7 + 4)
     387:	r2 <<= 32
     388:	r2 |= r1
     389:	*(u64 *)(r10 - 176) = r2
     390:	r2 = r10
     391:	r2 += -272
; flow_stats = bpf_map_lookup_elem(&dp_flow_stats, &flow_key);
     392:	r1 = 0ll
     394:	call 1
     395:	r6 = r0
; if (!flow_stats) {
     396:	if r6 != 0 goto 39
; printt("flow not found in flow stats, first install\n");
     397:	r1 = 174877793
     398:	*(u32 *)(r10 - 24) = r1
     399:	r1 = 8391171928516490098ll
     401:	*(u64 *)(r10 - 32) = r1
     402:	r1 = 7594793196894577012ll
     404:	*(u64 *)(r10 - 40) = r1
     405:	r1 = 8295761834060161134ll
     407:	*(u64 *)(r10 - 48) = r1
     408:	r1 = 7575164998816589344ll
     410:	*(u64 *)(r10 - 56) = r1
     411:	r1 = 8390045716536323174ll
     413:	*(u64 *)(r10 - 64) = r1
     414:	r1 = 0
     415:	*(u8 *)(r10 - 20) = r1
     416:	r1 = r10
     417:	r1 += -64
     418:	r2 = 45
     419:	call 6
; s.packet_count = 1;
     420:	r1 = 1
     421:	*(u64 *)(r10 - 64) = r1
; s.byte_count = bytes;
     422:	r1 = *(u64 *)(r10 - 328)
     423:	*(u64 *)(r10 - 56) = r1
; s.used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     424:	call 5
     425:	r0 /= 1000000
     426:	*(u64 *)(r10 - 48) = r0
     427:	r2 = r10
     428:	r2 += -272
     429:	r3 = r10
     430:	r3 += -64
; err = bpf_map_update_elem(&dp_flow_stats, &flow_key, &s, BPF_ANY);
     431:	r1 = 0ll
     433:	r4 = 0
     434:	call 2
     435:	goto 31

LBB1_13:
; flow_stats->packet_count += 1;
     436:	r1 = *(u64 *)(r6 + 8)
     437:	r2 = *(u64 *)(r10 - 328)
     438:	r2 += r1
     439:	r1 = *(u64 *)(r6 + 0)
     440:	*(u64 *)(r6 + 8) = r2
     441:	r1 += 1
     442:	*(u64 *)(r6 + 0) = r1
; flow_stats->used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     443:	call 5
     444:	r0 /= 1000000
     445:	*(u64 *)(r6 + 16) = r0
; printt("current: packets %d count %d ts %d\n",
     446:	r1 = 680997
     447:	*(u32 *)(r10 - 32) = r1
     448:	r1 = 2338340314003349620ll
     450:	*(u64 *)(r10 - 40) = r1
     451:	r1 = 7959390387983099168ll
     453:	*(u64 *)(r10 - 48) = r1
     454:	r1 = 8319385923563384864ll
     456:	*(u64 *)(r10 - 56) = r1
     457:	r1 = 4212112933489112419ll
     459:	*(u64 *)(r10 - 64) = r1
     460:	r5 = *(u64 *)(r6 + 16)
     461:	r4 = *(u64 *)(r6 + 8)
     462:	r3 = *(u64 *)(r6 + 0)
     463:	r1 = r10
     464:	r1 += -64
     465:	r2 = 36
     466:	call 6

LBB1_14:
; flow_key.headers = *headers;
     467:	r1 = *(u32 *)(r9 + 68)
     468:	r1 <<= 32
     469:	r2 = *(u32 *)(r9 + 64)
     470:	r1 |= r2
     471:	*(u64 *)(r10 - 296) = r1
     472:	r1 = *(u32 *)(r9 + 76)
     473:	r1 <<= 32
     474:	r3 = *(u32 *)(r9 + 72)
     475:	r1 |= r3
     476:	*(u64 *)(r10 - 304) = r1
     477:	r1 = *(u32 *)(r9 + 84)
     478:	r1 <<= 32
     479:	r3 = *(u32 *)(r9 + 80)
     480:	r1 |= r3
     481:	*(u64 *)(r10 - 320) = r1
     482:	r1 = *(u32 *)(r9 + 12)
     483:	r1 <<= 32
     484:	r5 = *(u32 *)(r9 + 8)
     485:	r1 |= r5
     486:	*(u64 *)(r10 - 312) = r1
     487:	r5 = *(u32 *)(r9 + 20)
     488:	r5 <<= 32
     489:	r0 = *(u32 *)(r9 + 16)
     490:	r5 |= r0
     491:	r0 = *(u32 *)(r9 + 28)
     492:	r0 <<= 32
     493:	r6 = *(u32 *)(r9 + 24)
     494:	r0 |= r6
     495:	r6 = *(u32 *)(r9 + 36)
     496:	r6 <<= 32
     497:	r8 = *(u32 *)(r9 + 32)
     498:	r6 |= r8
     499:	r8 = *(u32 *)(r9 + 44)
     500:	r8 <<= 32
     501:	r1 = *(u32 *)(r9 + 40)
     502:	r8 |= r1
     503:	r1 = *(u32 *)(r9 + 52)
     504:	r1 <<= 32
     505:	r2 = *(u32 *)(r9 + 48)
     506:	r1 |= r2
     507:	r2 = *(u32 *)(r9 + 60)
     508:	r2 <<= 32
     509:	r3 = *(u32 *)(r9 + 56)
     510:	r2 |= r3
     511:	r3 = *(u32 *)(r9 + 92)
     512:	r3 <<= 32
     513:	r4 = *(u32 *)(r9 + 88)
     514:	r3 |= r4
     515:	*(u64 *)(r10 - 184) = r3
     516:	r3 = *(u64 *)(r10 - 320)
     517:	*(u64 *)(r10 - 192) = r3
     518:	r3 = *(u64 *)(r10 - 304)
     519:	*(u64 *)(r10 - 200) = r3
     520:	r3 = *(u64 *)(r10 - 296)
     521:	*(u64 *)(r10 - 208) = r3
     522:	*(u64 *)(r10 - 216) = r2
     523:	*(u64 *)(r10 - 224) = r1
     524:	*(u64 *)(r10 - 232) = r8
     525:	*(u64 *)(r10 - 240) = r6
     526:	*(u64 *)(r10 - 248) = r0
     527:	*(u64 *)(r10 - 256) = r5
     528:	r1 = *(u64 *)(r10 - 312)
     529:	*(u64 *)(r10 - 264) = r1
     530:	r1 = *(u32 *)(r9 + 0)
     531:	r2 = *(u32 *)(r9 + 4)
     532:	r2 <<= 32
     533:	r2 |= r1
     534:	*(u64 *)(r10 - 272) = r2
; flow_key.mds = *mds;
     535:	r1 = *(u32 *)(r7 + 76)
     536:	r1 <<= 32
     537:	r2 = *(u32 *)(r7 + 72)
     538:	r1 |= r2
     539:	*(u64 *)(r10 - 296) = r1
     540:	r1 = *(u32 *)(r7 + 84)
     541:	r1 <<= 32
     542:	r3 = *(u32 *)(r7 + 80)
     543:	r1 |= r3
     544:	*(u64 *)(r10 - 304) = r1
     545:	r4 = *(u32 *)(r7 + 92)
     546:	r4 <<= 32
     547:	r3 = *(u32 *)(r7 + 88)
     548:	r4 |= r3
     549:	r1 = *(u32 *)(r7 + 20)
     550:	r1 <<= 32
     551:	r5 = *(u32 *)(r7 + 16)
     552:	r1 |= r5
     553:	*(u64 *)(r10 - 312) = r1
     554:	r5 = *(u32 *)(r7 + 28)
     555:	r5 <<= 32
     556:	r0 = *(u32 *)(r7 + 24)
     557:	r5 |= r0
     558:	r0 = *(u32 *)(r7 + 36)
     559:	r0 <<= 32
     560:	r6 = *(u32 *)(r7 + 32)
     561:	r0 |= r6
     562:	r6 = *(u32 *)(r7 + 44)
     563:	r6 <<= 32
     564:	r8 = *(u32 *)(r7 + 40)
     565:	r6 |= r8
     566:	r8 = *(u32 *)(r7 + 52)
     567:	r8 <<= 32
     568:	r9 = *(u32 *)(r7 + 48)
     569:	r8 |= r9
     570:	r9 = *(u32 *)(r7 + 60)
     571:	r9 <<= 32
     572:	r1 = *(u32 *)(r7 + 56)
     573:	r9 |= r1
     574:	r1 = *(u32 *)(r7 + 68)
     575:	r1 <<= 32
     576:	r2 = *(u32 *)(r7 + 64)
     577:	r1 |= r2
     578:	r2 = *(u32 *)(r7 + 100)
     579:	r2 <<= 32
     580:	r3 = *(u32 *)(r7 + 96)
     581:	r2 |= r3
     582:	*(u64 *)(r10 - 80) = r2
     583:	*(u64 *)(r10 - 88) = r4
     584:	r2 = *(u64 *)(r10 - 304)
     585:	*(u64 *)(r10 - 96) = r2
     586:	r2 = *(u64 *)(r10 - 296)
     587:	*(u64 *)(r10 - 104) = r2
     588:	*(u64 *)(r10 - 112) = r1
     589:	*(u64 *)(r10 - 120) = r9
     590:	*(u64 *)(r10 - 128) = r8
     591:	*(u64 *)(r10 - 136) = r6
     592:	*(u64 *)(r10 - 144) = r0
     593:	*(u64 *)(r10 - 152) = r5
     594:	r1 = *(u64 *)(r10 - 312)
     595:	*(u64 *)(r10 - 160) = r1
     596:	r1 = *(u32 *)(r7 + 12)
     597:	r1 <<= 32
     598:	r2 = *(u32 *)(r7 + 8)
     599:	r1 |= r2
     600:	*(u64 *)(r10 - 168) = r1
     601:	r1 = *(u32 *)(r7 + 0)
     602:	r2 = *(u32 *)(r7 + 4)
     603:	r2 <<= 32
     604:	r2 |= r1
     605:	*(u64 *)(r10 - 176) = r2
     606:	r1 = 0
; int index = 0;
     607:	*(u32 *)(r10 - 276) = r1
     608:	r2 = r10
     609:	r2 += -276
     610:	r3 = r10
     611:	r3 += -272
; int error = bpf_map_update_elem(&percpu_executing_key, &index,
     612:	r1 = 0ll
     614:	r4 = 0
     615:	call 2
     616:	r1 = r0
     617:	r1 <<= 32
     618:	r1 >>= 32
; if (error) {
     619:	if r1 == 0 goto 21
; printt("update percpu_executing_key failed: %d\n", error);
     620:	r1 = 2924860384371813ll
     622:	*(u64 *)(r10 - 32) = r1
     623:	r1 = 7811882119910221163ll
     625:	*(u64 *)(r10 - 40) = r1
     626:	r1 = 6874584755408823141ll
     628:	*(u64 *)(r10 - 48) = r1
     629:	r1 = 8675445215200506469ll
     631:	*(u64 *)(r10 - 56) = r1
     632:	r1 = 8079569282027253877ll
     634:	*(u64 *)(r10 - 64) = r1
     635:	r1 = r10
     636:	r1 += -64
     637:	r2 = 40
     638:	r3 = r0
     639:	call 6
     640:	goto 64955

LBB1_16:
     641:	r8 = *(u64 *)(r10 - 336)
; type = action->type;
     642:	r7 = *(u32 *)(r8 + 0)
; printt("action type %d\n", type);
     643:	r1 = 2924860387192953ll
     645:	*(u64 *)(r10 - 56) = r1
     646:	r1 = 8367809532444042081ll
     648:	*(u64 *)(r10 - 64) = r1
     649:	r1 = r10
     650:	r1 += -64
     651:	r2 = 16
     652:	r3 = r7
     653:	call 6
; switch (type) {
     654:	if r7 s> 4 goto 21
     655:	r6 = *(u64 *)(r10 - 288)
     656:	if r7 s> 1 goto 34
     657:	if r7 == 0 goto 57
     658:	if r7 == 1 goto 1
     659:	goto 158

LBB1_20:
; printt("output action port = %d\n", action->u.out.port);
     660:	r1 = 0
     661:	*(u8 *)(r10 - 40) = r1
     662:	r1 = 748764258445063282ll
     664:	*(u64 *)(r10 - 48) = r1
     665:	r1 = 8029953794289267811ll
     667:	*(u64 *)(r10 - 56) = r1
     668:	r1 = 6998721868680426863ll
     670:	*(u64 *)(r10 - 64) = r1
     671:	r3 = *(u32 *)(r8 + 8)
     672:	r1 = r10
     673:	r1 += -64
     674:	r2 = 25
     675:	goto 160

LBB1_21:
     676:	r6 = *(u64 *)(r10 - 288)
     677:	if r7 s> 10 goto 30
     678:	if r7 == 5 goto 52
     679:	if r7 == 7 goto 61
     680:	if r7 == 8 goto 1
     681:	goto 136

LBB1_25:
; printt("hash\n");
     682:	r1 = 10
     683:	*(u16 *)(r10 - 60) = r1
     684:	r1 = 1752392040
     685:	*(u32 *)(r10 - 64) = r1
     686:	r1 = r10
     687:	r1 += -64
     688:	r2 = 6
     689:	call 6
     690:	goto 152

LBB1_26:
     691:	if r7 == 2 goto 57
     692:	if r7 == 3 goto 83
     693:	if r7 == 4 goto 1
     694:	goto 123

LBB1_29:
; printt("vlan push tci %d\n", action->u.push_vlan.vlan_tci);
     695:	r1 = 10
     696:	*(u16 *)(r10 - 48) = r1
     697:	r1 = 7216209614943297640ll
     699:	*(u64 *)(r10 - 56) = r1
     700:	r1 = 8319679171230002294ll
     702:	*(u64 *)(r10 - 64) = r1
     703:	r3 = *(u16 *)(r8 + 10)
     704:	r1 = r10
     705:	r1 += -64
     706:	r2 = 18
     707:	goto 128

LBB1_30:
     708:	if r7 == 11 goto 92
     709:	if r7 == 12 goto 101
     710:	if r7 == 13 goto 1
     711:	goto 106

LBB1_33:
; printt("truncate\n");
     712:	r1 = 7310575174812004980ll
     714:	goto 18

LBB1_34:
; printt("end of action processing\n");
     715:	r1 = 10
     716:	*(u16 *)(r10 - 40) = r1
     717:	r1 = 7453010377922929519ll
     719:	*(u64 *)(r10 - 48) = r1
     720:	r1 = 8246126576403051619ll
     722:	*(u64 *)(r10 - 56) = r1
     723:	r1 = 6998706448404606565ll
     725:	*(u64 *)(r10 - 64) = r1
     726:	r1 = r10
     727:	r1 += -64
     728:	r2 = 26
     729:	call 6
     730:	goto 112

LBB1_35:
; printt("vlan pop\n");
     731:	r1 = 8101817539255954550ll

LBB1_36:
     733:	*(u64 *)(r10 - 64) = r1
     734:	r1 = 10
     735:	*(u16 *)(r10 - 56) = r1
     736:	r1 = r10
     737:	r1 += -64
     738:	r2 = 10
     739:	call 6
     740:	goto 102

LBB1_37:
; printt("recirc\n");
     741:	r1 = 2924092812649842ll
     743:	*(u64 *)(r10 - 64) = r1
     744:	r1 = r10
     745:	r1 += -64
     746:	r2 = 8
     747:	call 6
     748:	goto 94

LBB1_38:
; printt("userspace action, len = %d, ifindex = %d upcall back\n",
     749:	r1 = 10
     750:	*(u16 *)(r10 - 12) = r1
     751:	r1 = 1801675106
     752:	*(u32 *)(r10 - 16) = r1
     753:	r1 = 2336361472234386720ll
     755:	*(u64 *)(r10 - 24) = r1
     756:	r1 = 7216209424840942948ll
     758:	*(u64 *)(r10 - 32) = r1
     759:	r1 = 7956002818424071205ll
     761:	*(u64 *)(r10 - 40) = r1
     762:	r1 = 2323048641313120300ll
     764:	*(u64 *)(r10 - 48) = r1
     765:	r1 = 7957695015191388261ll
     767:	*(u64 *)(r10 - 56) = r1
     768:	r1 = 7161128523638600565ll
     770:	*(u64 *)(r10 - 64) = r1
     771:	r3 = *(u16 *)(r8 + 8)
; if (skb->cb[OVS_CB_INGRESS]) {
     772:	r1 = *(u32 *)(r6 + 52)
     773:	if r1 == 0 goto 64
; __asm__ __volatile__("": : :"memory");
     774:	r4 = *(u32 *)(r6 + 36)
; return skb->ingress_ifindex;
     775:	goto 63

LBB1_40:
; printt("set action, remote ipv4 = %x, is_set = %d\n",
     776:	r1 = 0
     777:	*(u8 *)(r10 - 22) = r1
     778:	r1 = 2660
     779:	*(u16 *)(r10 - 24) = r1
     780:	r1 = 2675205388259128159ll
     782:	*(u64 *)(r10 - 32) = r1
     783:	r1 = 8316213562282680381ll
     785:	*(u64 *)(r10 - 40) = r1
     786:	r1 = 2320609933174793588ll
     788:	*(u64 *)(r10 - 48) = r1
     789:	r1 = 8029185251511922287ll
     791:	*(u64 *)(r10 - 56) = r1
     792:	r1 = 7598807740088345971ll
     794:	*(u64 *)(r10 - 64) = r1
     795:	r4 = *(u32 *)(r8 + 4)
     796:	r3 = *(u32 *)(r8 + 12)
     797:	r1 = r10
     798:	r1 += -64
     799:	r2 = 43
     800:	goto 41

LBB1_41:
; printt("set masked\n");
     801:	r1 = 681061
     802:	*(u32 *)(r10 - 56) = r1
     803:	r1 = 7742639305703843187ll
     805:	*(u64 *)(r10 - 64) = r1
     806:	r1 = r10
     807:	r1 += -64
     808:	r2 = 12
     809:	call 6
     810:	goto 32

LBB1_42:
; printt("ct\n");
     811:	r1 = 685155
     812:	*(u32 *)(r10 - 64) = r1
     813:	r1 = r10
     814:	r1 += -64
     815:	r2 = 4
     816:	call 6
     817:	goto 25

LBB1_43:
; printt("ERROR action type %d not support\n", type);
     818:	r1 = 10
     819:	*(u16 *)(r10 - 32) = r1
     820:	r1 = 8390891584458421024ll
     822:	*(u64 *)(r10 - 40) = r1
     823:	r1 = 8390045716212686949ll
     825:	*(u64 *)(r10 - 48) = r1
     826:	r1 = 8104636687070488948ll
     828:	*(u64 *)(r10 - 56) = r1
     829:	r1 = 7161040420386001477ll
     831:	*(u64 *)(r10 - 64) = r1
     832:	r1 = r10
     833:	r1 += -64
     834:	r2 = 34
     835:	r3 = r7

LBB1_44:
     836:	call 6
     837:	goto 5

LBB1_45:
; ifindex = skb->ifindex;
     838:	r4 = *(u32 *)(r6 + 40)

LBB1_46:
; __asm__ __volatile__("": : :"memory");
     839:	r1 = r10
     840:	r1 += -64
; printt("userspace action, len = %d, ifindex = %d upcall back\n",
     841:	r2 = 54

LBB1_47:
     842:	call 6

LBB1_48:
; bpf_tail_call(skb, &tailcalls, type);
     843:	r1 = r6
     844:	r2 = 0ll
     846:	r3 = r7
     847:	call 12
; printt("ERROR: tail call fails\n");
     848:	r1 = 2941659228759584ll
     850:	*(u64 *)(r10 - 48) = r1
     851:	r1 = 7812726531954600289ll
     853:	*(u64 *)(r10 - 56) = r1
     854:	r1 = 8367752232846905925ll
     856:	*(u64 *)(r10 - 64) = r1
     857:	r1 = r10
     858:	r1 += -64
     859:	r2 = 24
     860:	goto 64734
Disassembly of section tail-0:
tail_action_unspec:
; {
       0:	r3 = *(u32 *)(r1 + 48)
; {
       1:	r1 = 10
; int ebpf_zero = 0;
       2:	*(u16 *)(r10 - 12) = r1
       3:	r1 = 1735289203
       4:	*(u32 *)(r10 - 16) = r1
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r1 = 8315161617321959526ll
       7:	*(u64 *)(r10 - 24) = r1
       8:	r1 = 8007510562770529380ll
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 32) = r1
      11:	r1 = 2675205388326233198ll
      13:	*(u64 *)(r10 - 40) = r1
      14:	r1 = 7575175998026834785ll
      16:	*(u64 *)(r10 - 48) = r1
      17:	r1 = r10
      18:	r1 += -48
      19:	r2 = 38
      20:	call 6
      21:	r0 = 2
      22:	exit
Disassembly of section tail-1:
tail_action_output:
; {
       0:	r6 = r1
; {
       1:	r7 = *(u32 *)(r6 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r7 goto 14
       6:	*(u8 *)(r10 - 184) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 192) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 200) = r1
      13:	r1 = 2339727127740568133ll
      15:	*(u64 *)(r10 - 208) = r1
      16:	r1 = r10
      17:	r1 += -208
      18:	r2 = 25
      19:	goto 305

LBB3_2:
      20:	r1 = *(u32 *)(r6 + 56)
      21:	if r1 == 0 goto 9
      22:	*(u64 *)(r10 - 248) = r6
; ERR_EXIT();
      23:	r2 = r10
      24:	r2 += -4
      25:	r1 = 0ll
      27:	call 1
      28:	r8 = r0
; int ebpf_zero = 0;
      29:	if r8 != 0 goto 173
      30:	goto 253

LBB3_4:
      31:	r2 = r10
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r2 += -4
      33:	r1 = 0ll
      35:	call 1
; if (!mds) {
      36:	if r0 == 0 goto 274
; printt("no packet metadata found\n");
      37:	*(u64 *)(r10 - 248) = r6
      38:	r2 = *(u32 *)(r0 + 172)
      39:	r2 <<= 32
      40:	r1 = *(u32 *)(r0 + 168)
      41:	r2 |= r1
      42:	*(u64 *)(r10 - 264) = r2
      43:	r2 = *(u32 *)(r0 + 180)
      44:	r2 <<= 32
      45:	r1 = *(u32 *)(r0 + 176)
      46:	r2 |= r1
      47:	*(u64 *)(r10 - 280) = r2
      48:	r2 = *(u32 *)(r0 + 188)
      49:	r2 <<= 32
      50:	r1 = *(u32 *)(r0 + 184)
      51:	r2 |= r1
; ERR_EXIT();
      52:	*(u64 *)(r10 - 296) = r2
      53:	r2 = *(u32 *)(r0 + 20)
      54:	r2 <<= 32
      55:	r1 = *(u32 *)(r0 + 16)
      56:	r2 |= r1
      57:	*(u64 *)(r10 - 256) = r2
      58:	r2 = *(u32 *)(r0 + 28)
      59:	r2 <<= 32
; }
      60:	r1 = *(u32 *)(r0 + 24)
      61:	r2 |= r1
      62:	*(u64 *)(r10 - 272) = r2
; flow_key.headers = *headers;
      63:	r2 = *(u32 *)(r0 + 36)
      64:	r2 <<= 32
      65:	r1 = *(u32 *)(r0 + 32)
      66:	r2 |= r1
      67:	*(u64 *)(r10 - 288) = r2
      68:	r2 = *(u32 *)(r0 + 44)
      69:	r2 <<= 32
      70:	r1 = *(u32 *)(r0 + 40)
      71:	r2 |= r1
      72:	*(u64 *)(r10 - 304) = r2
      73:	r2 = *(u32 *)(r0 + 52)
      74:	r2 <<= 32
      75:	r1 = *(u32 *)(r0 + 48)
      76:	r2 |= r1
      77:	*(u64 *)(r10 - 312) = r2
      78:	r2 = *(u32 *)(r0 + 60)
      79:	r2 <<= 32
      80:	r1 = *(u32 *)(r0 + 56)
      81:	r2 |= r1
      82:	*(u64 *)(r10 - 320) = r2
      83:	r2 = *(u32 *)(r0 + 68)
      84:	r2 <<= 32
      85:	r1 = *(u32 *)(r0 + 64)
      86:	r2 |= r1
      87:	*(u64 *)(r10 - 328) = r2
      88:	r2 = *(u32 *)(r0 + 76)
      89:	r2 <<= 32
      90:	r1 = *(u32 *)(r0 + 72)
      91:	r2 |= r1
      92:	*(u64 *)(r10 - 336) = r2
      93:	r2 = *(u32 *)(r0 + 84)
      94:	r2 <<= 32
      95:	r1 = *(u32 *)(r0 + 80)
      96:	r2 |= r1
      97:	*(u64 *)(r10 - 344) = r2
      98:	r2 = *(u32 *)(r0 + 92)
      99:	r2 <<= 32
     100:	r1 = *(u32 *)(r0 + 88)
     101:	r2 |= r1
     102:	*(u64 *)(r10 - 352) = r2
     103:	r2 = *(u32 *)(r0 + 100)
     104:	r2 <<= 32
     105:	r1 = *(u32 *)(r0 + 96)
     106:	r2 |= r1
     107:	*(u64 *)(r10 - 360) = r2
     108:	r2 = *(u32 *)(r0 + 108)
     109:	r2 <<= 32
     110:	r1 = *(u32 *)(r0 + 104)
     111:	r2 |= r1
     112:	*(u64 *)(r10 - 368) = r2
     113:	r2 = *(u32 *)(r0 + 116)
     114:	r2 <<= 32
     115:	r1 = *(u32 *)(r0 + 112)
     116:	r2 |= r1
     117:	*(u64 *)(r10 - 376) = r2
     118:	r3 = *(u32 *)(r0 + 124)
     119:	r3 <<= 32
     120:	r1 = *(u32 *)(r0 + 120)
     121:	r3 |= r1
     122:	r2 = *(u32 *)(r0 + 132)
     123:	r2 <<= 32
     124:	r1 = *(u32 *)(r0 + 128)
     125:	r2 |= r1
     126:	r6 = *(u32 *)(r0 + 140)
     127:	r6 <<= 32
     128:	r1 = *(u32 *)(r0 + 136)
     129:	r6 |= r1
     130:	r1 = *(u32 *)(r0 + 148)
; flow_key.mds = *mds;
     131:	r1 <<= 32
     132:	r9 = *(u32 *)(r0 + 144)
     133:	r1 |= r9
     134:	r9 = *(u32 *)(r0 + 156)
     135:	r9 <<= 32
     136:	r8 = *(u32 *)(r0 + 152)
     137:	r9 |= r8
     138:	r8 = *(u32 *)(r0 + 164)
     139:	r8 <<= 32
     140:	r5 = *(u32 *)(r0 + 160)
     141:	r8 |= r5
     142:	r5 = *(u32 *)(r0 + 196)
     143:	r5 <<= 32
     144:	r4 = *(u32 *)(r0 + 192)
     145:	r5 |= r4
     146:	*(u64 *)(r10 - 16) = r5
     147:	r4 = *(u64 *)(r10 - 296)
     148:	*(u64 *)(r10 - 24) = r4
     149:	r4 = *(u64 *)(r10 - 280)
     150:	*(u64 *)(r10 - 32) = r4
     151:	r4 = *(u64 *)(r10 - 264)
     152:	*(u64 *)(r10 - 40) = r4
     153:	*(u64 *)(r10 - 48) = r8
     154:	*(u64 *)(r10 - 56) = r9
     155:	*(u64 *)(r10 - 64) = r1
     156:	*(u64 *)(r10 - 72) = r6
     157:	*(u64 *)(r10 - 80) = r2
     158:	*(u64 *)(r10 - 88) = r3
     159:	r1 = *(u64 *)(r10 - 376)
     160:	*(u64 *)(r10 - 96) = r1
     161:	r1 = *(u64 *)(r10 - 368)
     162:	*(u64 *)(r10 - 104) = r1
     163:	r1 = *(u64 *)(r10 - 360)
     164:	*(u64 *)(r10 - 112) = r1
     165:	r1 = *(u64 *)(r10 - 352)
     166:	*(u64 *)(r10 - 120) = r1
     167:	r1 = *(u64 *)(r10 - 344)
     168:	*(u64 *)(r10 - 128) = r1
     169:	r1 = *(u64 *)(r10 - 336)
     170:	*(u64 *)(r10 - 136) = r1
     171:	r1 = *(u64 *)(r10 - 328)
     172:	*(u64 *)(r10 - 144) = r1
     173:	r1 = *(u64 *)(r10 - 320)
     174:	*(u64 *)(r10 - 152) = r1
     175:	r1 = *(u64 *)(r10 - 312)
     176:	*(u64 *)(r10 - 160) = r1
     177:	r1 = *(u64 *)(r10 - 304)
     178:	*(u64 *)(r10 - 168) = r1
     179:	r1 = *(u64 *)(r10 - 288)
     180:	*(u64 *)(r10 - 176) = r1
     181:	r1 = *(u64 *)(r10 - 272)
     182:	*(u64 *)(r10 - 184) = r1
     183:	r1 = *(u64 *)(r10 - 256)
     184:	*(u64 *)(r10 - 192) = r1
     185:	r1 = *(u32 *)(r0 + 12)
     186:	r1 <<= 32
     187:	r2 = *(u32 *)(r0 + 8)
     188:	r1 |= r2
     189:	*(u64 *)(r10 - 200) = r1
     190:	r1 = *(u32 *)(r0 + 0)
     191:	r2 = *(u32 *)(r0 + 4)
     192:	r2 <<= 32
     193:	r2 |= r1
     194:	*(u64 *)(r10 - 208) = r2
     195:	r2 = r10
     196:	r2 += -208
     197:	r1 = 0ll
     199:	call 1
     200:	r8 = r0
     201:	if r8 != 0 goto 1
     202:	goto 81

LBB3_9:
     203:	r7 *= 136
     204:	r6 = r8
     205:	r6 += r7
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r7 = 2
     207:	if r6 == 0 goto 119
     208:	r9 = *(u32 *)(r6 + 12)
; if (!action_batch) {
     209:	r1 = 0
; printt("no action found, upcall to userspace\n");
     210:	*(u8 *)(r10 - 172) = r1
     211:	r1 = 174335264
     212:	*(u32 *)(r10 - 176) = r1
     213:	r1 = 4572124926259457641ll
     215:	*(u64 *)(r10 - 184) = r1
     216:	r1 = 2334031327279477874ll
     218:	*(u64 *)(r10 - 192) = r1
     219:	r1 = 8029953794289267811ll
     221:	*(u64 *)(r10 - 200) = r1
     222:	r1 = 6998721868680426863ll
     224:	*(u64 *)(r10 - 208) = r1
     225:	r9 &= 1
     226:	r3 = *(u32 *)(r6 + 8)
     227:	r1 = r10
     228:	r1 += -208
     229:	r2 = 37
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r4 = r9
     231:	call 6
     232:	r2 = *(u32 *)(r6 + 8)
     233:	r6 = *(u64 *)(r10 - 248)
     234:	r1 = r6
     235:	r3 = r9
     236:	call 13
     237:	r1 = *(u32 *)(r6 + 48)
     238:	r1 += 1
     239:	*(u32 *)(r6 + 48) = r1
     240:	r1 <<= 32
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r1 >>= 32
     242:	if r1 > 31 goto 57
     243:	r1 *= 136
; if (value) {
     244:	r8 += r1
; __sync_fetch_and_add(value, stat);
     245:	r3 = *(u32 *)(r8 + 0)
; flow_stats_account(headers, mds, skb->len);
     246:	if r3 == 0 goto 53
     247:	r1 = 2660
; flow_key.headers = *headers;
     248:	*(u16 *)(r10 - 188) = r1
     249:	r1 = 622869792
     250:	*(u32 *)(r10 - 192) = r1
     251:	r1 = 7309475734889590633ll
     253:	*(u64 *)(r10 - 200) = r1
     254:	r1 = 8386653723114890606ll
     256:	*(u64 *)(r10 - 208) = r1
     257:	r9 = r6
     258:	r6 = 0
     259:	*(u8 *)(r10 - 186) = r6
     260:	r1 = r10
     261:	r1 += -208
     262:	r2 = 23
     263:	call 6
     264:	r3 = *(u32 *)(r8 + 0)
     265:	r1 = r9
     266:	r2 = 0ll
     268:	call 12
     269:	*(u8 *)(r10 - 184) = r6
     270:	r1 = 749689262168041837ll
     272:	*(u64 *)(r10 - 192) = r1
     273:	r1 = 2336361472229141609ll
     275:	*(u64 *)(r10 - 200) = r1
     276:	r1 = 7022273303978263131ll
     278:	*(u64 *)(r10 - 208) = r1
     279:	r1 = r10
     280:	r1 += -208
     281:	r2 = 25
     282:	call 6
     283:	goto 43

LBB3_7:
     284:	r1 = 0
     285:	*(u8 *)(r10 - 186) = r1
     286:	r1 = 2660
     287:	*(u16 *)(r10 - 188) = r1
     288:	r1 = 1853189990
     289:	*(u32 *)(r10 - 192) = r1
     290:	r1 = 2336927755366785312ll
     292:	*(u64 *)(r10 - 200) = r1
     293:	r1 = 7521983764245802862ll
     295:	*(u64 *)(r10 - 208) = r1
     296:	r1 = r10
     297:	r1 += -208
     298:	r2 = 23
     299:	goto 25

LBB3_13:
     300:	r7 = 4
     301:	r1 = *(u32 *)(r6 + 56)
     302:	if r1 == 0 goto 24
     303:	r1 = 0
     304:	*(u32 *)(r10 - 208) = r1
     305:	r2 = r10
     306:	r2 += -208
     307:	r1 = 0ll
     309:	call 3
     310:	goto 16

LBB3_6:
     311:	r1 = 686437
     312:	*(u32 *)(r10 - 216) = r1
     313:	r1 = 7737016408759104867ll
     315:	*(u64 *)(r10 - 224) = r1
     316:	r1 = 7311705455702598514ll
; flow_key.mds = *mds;
     318:	*(u64 *)(r10 - 232) = r1
     319:	r1 = 7309377901238971749ll
     321:	*(u64 *)(r10 - 240) = r1
     322:	r1 = r10
     323:	r1 += -240
     324:	r2 = 28

LBB3_8:
     325:	call 6
     326:	r7 = 2

LBB3_15:
     327:	r0 = r7
     328:	exit
Disassembly of section tail-2:
tail_action_userspace:
; {
       0:	r7 = r1
; {
       1:	r6 = *(u32 *)(r7 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r6 goto 14
       6:	*(u8 *)(r10 - 280) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 288) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 296) = r1
      13:	r1 = 2339727127740568133ll

LBB4_2:
      15:	*(u64 *)(r10 - 304) = r1
      16:	r1 = r10
      17:	r1 += -304
      18:	r2 = 25
      19:	goto 330

LBB4_3:
      20:	r1 = *(u32 *)(r7 + 56)
      21:	if r1 == 0 goto 8
      22:	r2 = r10
; ERR_EXIT();
      23:	r2 += -4
      24:	r1 = 0ll
      26:	call 1
      27:	r9 = r0
      28:	if r9 != 0 goto 174
; int ebpf_zero = 0;
      29:	goto 238

LBB4_5:
      30:	r2 = r10
      31:	r2 += -4
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = 0ll
      34:	call 1
      35:	if r0 == 0 goto 300
; if (!mds) {
      36:	r2 = *(u32 *)(r0 + 172)
; printt("no packet metadata found\n");
      37:	r2 <<= 32
      38:	r1 = *(u32 *)(r0 + 168)
      39:	r2 |= r1
      40:	*(u64 *)(r10 - 328) = r2
      41:	r2 = *(u32 *)(r0 + 180)
      42:	r2 <<= 32
      43:	r1 = *(u32 *)(r0 + 176)
      44:	r2 |= r1
      45:	*(u64 *)(r10 - 344) = r2
      46:	r2 = *(u32 *)(r0 + 188)
      47:	r2 <<= 32
      48:	r1 = *(u32 *)(r0 + 184)
      49:	r2 |= r1
      50:	*(u64 *)(r10 - 360) = r2
      51:	r2 = *(u32 *)(r0 + 20)
; ERR_EXIT();
      52:	r2 <<= 32
      53:	r1 = *(u32 *)(r0 + 16)
      54:	r2 |= r1
      55:	*(u64 *)(r10 - 320) = r2
      56:	r2 = *(u32 *)(r0 + 28)
      57:	r2 <<= 32
      58:	r1 = *(u32 *)(r0 + 24)
      59:	r2 |= r1
; }
      60:	*(u64 *)(r10 - 336) = r2
      61:	r2 = *(u32 *)(r0 + 36)
      62:	r2 <<= 32
; flow_key.headers = *headers;
      63:	r1 = *(u32 *)(r0 + 32)
      64:	r2 |= r1
      65:	*(u64 *)(r10 - 352) = r2
      66:	r2 = *(u32 *)(r0 + 44)
      67:	r2 <<= 32
      68:	r1 = *(u32 *)(r0 + 40)
      69:	r2 |= r1
      70:	*(u64 *)(r10 - 368) = r2
      71:	r2 = *(u32 *)(r0 + 52)
      72:	r2 <<= 32
      73:	r1 = *(u32 *)(r0 + 48)
      74:	r2 |= r1
      75:	*(u64 *)(r10 - 376) = r2
      76:	r2 = *(u32 *)(r0 + 60)
      77:	r2 <<= 32
      78:	r1 = *(u32 *)(r0 + 56)
      79:	r2 |= r1
      80:	*(u64 *)(r10 - 384) = r2
      81:	r2 = *(u32 *)(r0 + 68)
      82:	r2 <<= 32
      83:	r1 = *(u32 *)(r0 + 64)
      84:	r2 |= r1
      85:	*(u64 *)(r10 - 392) = r2
      86:	r2 = *(u32 *)(r0 + 76)
      87:	r2 <<= 32
      88:	r1 = *(u32 *)(r0 + 72)
      89:	r2 |= r1
      90:	*(u64 *)(r10 - 400) = r2
      91:	r2 = *(u32 *)(r0 + 84)
      92:	r2 <<= 32
      93:	r1 = *(u32 *)(r0 + 80)
      94:	r2 |= r1
      95:	*(u64 *)(r10 - 408) = r2
      96:	r2 = *(u32 *)(r0 + 92)
      97:	r2 <<= 32
      98:	r1 = *(u32 *)(r0 + 88)
      99:	r2 |= r1
     100:	*(u64 *)(r10 - 416) = r2
     101:	r2 = *(u32 *)(r0 + 100)
     102:	r2 <<= 32
     103:	r1 = *(u32 *)(r0 + 96)
     104:	r2 |= r1
     105:	*(u64 *)(r10 - 424) = r2
     106:	r2 = *(u32 *)(r0 + 108)
     107:	r2 <<= 32
     108:	r1 = *(u32 *)(r0 + 104)
     109:	r2 |= r1
     110:	*(u64 *)(r10 - 432) = r2
     111:	r2 = *(u32 *)(r0 + 116)
     112:	r2 <<= 32
     113:	r1 = *(u32 *)(r0 + 112)
     114:	r2 |= r1
     115:	*(u64 *)(r10 - 440) = r2
     116:	r3 = *(u32 *)(r0 + 124)
     117:	r3 <<= 32
     118:	r1 = *(u32 *)(r0 + 120)
     119:	r3 |= r1
     120:	r2 = *(u32 *)(r0 + 132)
     121:	r2 <<= 32
     122:	r1 = *(u32 *)(r0 + 128)
     123:	r2 |= r1
     124:	r1 = *(u32 *)(r0 + 140)
     125:	r1 <<= 32
     126:	r8 = *(u32 *)(r0 + 136)
     127:	r1 |= r8
     128:	r8 = *(u32 *)(r0 + 148)
     129:	r8 <<= 32
     130:	*(u64 *)(r10 - 312) = r7
; flow_key.mds = *mds;
     131:	r7 = *(u32 *)(r0 + 144)
     132:	r8 |= r7
     133:	r7 = *(u32 *)(r0 + 156)
     134:	r7 <<= 32
     135:	r9 = *(u32 *)(r0 + 152)
     136:	r7 |= r9
     137:	r9 = *(u32 *)(r0 + 164)
     138:	r9 <<= 32
     139:	r5 = *(u32 *)(r0 + 160)
     140:	r9 |= r5
     141:	r5 = *(u32 *)(r0 + 196)
     142:	r5 <<= 32
     143:	r4 = *(u32 *)(r0 + 192)
     144:	r5 |= r4
     145:	*(u64 *)(r10 - 64) = r5
     146:	r4 = *(u64 *)(r10 - 360)
     147:	*(u64 *)(r10 - 72) = r4
     148:	r4 = *(u64 *)(r10 - 344)
     149:	*(u64 *)(r10 - 80) = r4
     150:	r4 = *(u64 *)(r10 - 328)
     151:	*(u64 *)(r10 - 88) = r4
     152:	*(u64 *)(r10 - 96) = r9
     153:	*(u64 *)(r10 - 104) = r7
     154:	r7 = *(u64 *)(r10 - 312)
     155:	*(u64 *)(r10 - 112) = r8
     156:	*(u64 *)(r10 - 120) = r1
     157:	*(u64 *)(r10 - 128) = r2
     158:	*(u64 *)(r10 - 136) = r3
     159:	r1 = *(u64 *)(r10 - 440)
     160:	*(u64 *)(r10 - 144) = r1
     161:	r1 = *(u64 *)(r10 - 432)
     162:	*(u64 *)(r10 - 152) = r1
     163:	r1 = *(u64 *)(r10 - 424)
     164:	*(u64 *)(r10 - 160) = r1
     165:	r1 = *(u64 *)(r10 - 416)
     166:	*(u64 *)(r10 - 168) = r1
     167:	r1 = *(u64 *)(r10 - 408)
     168:	*(u64 *)(r10 - 176) = r1
     169:	r1 = *(u64 *)(r10 - 400)
     170:	*(u64 *)(r10 - 184) = r1
     171:	r1 = *(u64 *)(r10 - 392)
     172:	*(u64 *)(r10 - 192) = r1
     173:	r1 = *(u64 *)(r10 - 384)
     174:	*(u64 *)(r10 - 200) = r1
     175:	r1 = *(u64 *)(r10 - 376)
     176:	*(u64 *)(r10 - 208) = r1
     177:	r1 = *(u64 *)(r10 - 368)
     178:	*(u64 *)(r10 - 216) = r1
     179:	r1 = *(u64 *)(r10 - 352)
     180:	*(u64 *)(r10 - 224) = r1
     181:	r1 = *(u64 *)(r10 - 336)
     182:	*(u64 *)(r10 - 232) = r1
     183:	r1 = *(u64 *)(r10 - 320)
     184:	*(u64 *)(r10 - 240) = r1
     185:	r1 = *(u32 *)(r0 + 12)
     186:	r1 <<= 32
     187:	r2 = *(u32 *)(r0 + 8)
     188:	r1 |= r2
     189:	*(u64 *)(r10 - 248) = r1
     190:	r1 = *(u32 *)(r0 + 0)
     191:	r2 = *(u32 *)(r0 + 4)
     192:	r2 <<= 32
     193:	r2 |= r1
     194:	*(u64 *)(r10 - 256) = r2
     195:	r2 = r10
     196:	r2 += -256
     197:	r1 = 0ll
     199:	call 1
     200:	r9 = r0
     201:	if r9 != 0 goto 1
     202:	goto 65

LBB4_7:
     203:	r6 *= 136
     204:	r1 = r9
     205:	r1 += r6
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r8 = 2
     207:	if r1 == 0 goto 144
     208:	r2 = 0
; if (!action_batch) {
     209:	*(u64 *)(r10 - 16) = r2
; printt("no action found, upcall to userspace\n");
     210:	*(u64 *)(r10 - 24) = r2
     211:	*(u64 *)(r10 - 32) = r2
     212:	*(u64 *)(r10 - 40) = r2
     213:	*(u64 *)(r10 - 48) = r2
     214:	*(u64 *)(r10 - 56) = r2
     215:	*(u64 *)(r10 - 64) = r2
     216:	*(u64 *)(r10 - 72) = r2
     217:	*(u64 *)(r10 - 80) = r2
     218:	*(u64 *)(r10 - 88) = r2
     219:	*(u64 *)(r10 - 96) = r2
     220:	*(u64 *)(r10 - 104) = r2
     221:	*(u64 *)(r10 - 112) = r2
     222:	*(u64 *)(r10 - 120) = r2
     223:	*(u64 *)(r10 - 128) = r2
     224:	*(u64 *)(r10 - 136) = r2
     225:	*(u64 *)(r10 - 144) = r2
     226:	*(u64 *)(r10 - 152) = r2
     227:	*(u64 *)(r10 - 160) = r2
     228:	*(u64 *)(r10 - 168) = r2
     229:	*(u64 *)(r10 - 176) = r2
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	*(u64 *)(r10 - 184) = r2
     231:	*(u64 *)(r10 - 192) = r2
     232:	*(u64 *)(r10 - 200) = r2
     233:	*(u64 *)(r10 - 208) = r2
     234:	*(u64 *)(r10 - 216) = r2
     235:	*(u64 *)(r10 - 224) = r2
     236:	*(u64 *)(r10 - 232) = r2
     237:	*(u64 *)(r10 - 240) = r2
     238:	*(u64 *)(r10 - 248) = r2
     239:	*(u64 *)(r10 - 256) = r2
     240:	r8 = 2
; value = map_lookup_elem(&datapath_stats, &index);
     241:	*(u8 *)(r10 - 256) = r8
     242:	r3 = *(u32 *)(r7 + 40)
     243:	*(u32 *)(r10 - 252) = r3
; if (value) {
     244:	r3 = *(u32 *)(r7 + 0)
; __sync_fetch_and_add(value, stat);
     245:	*(u32 *)(r10 - 240) = r3
; flow_stats_account(headers, mds, skb->len);
     246:	r3 = *(u16 *)(r1 + 8)
     247:	r4 = 25
; flow_key.headers = *headers;
     248:	if r4 > r3 goto 35
     249:	*(u8 *)(r10 - 274) = r2
     250:	r1 = 2661
     251:	*(u16 *)(r10 - 276) = r1
     252:	r1 = 1735549292
     253:	*(u32 *)(r10 - 280) = r1
     254:	r1 = 2337209276179900704ll
     256:	*(u64 *)(r10 - 288) = r1
     257:	r1 = 7957695015191388261ll
     259:	*(u64 *)(r10 - 296) = r1
     260:	r1 = 7161128523638600565ll
     262:	*(u64 *)(r10 - 304) = r1
     263:	r1 = r10
     264:	r1 += -304
     265:	r2 = 31
     266:	call 6
     267:	goto 84

LBB4_10:
     268:	r1 = 0
     269:	*(u8 *)(r10 - 282) = r1
     270:	r1 = 2660
     271:	*(u16 *)(r10 - 284) = r1
     272:	r1 = 1853189990
     273:	*(u32 *)(r10 - 288) = r1
     274:	r1 = 2336927755366785312ll
     276:	*(u64 *)(r10 - 296) = r1
     277:	r1 = 7521983764245802862ll
     279:	*(u64 *)(r10 - 304) = r1
     280:	r1 = r10
     281:	r1 += -304
     282:	r2 = 23
     283:	goto 66

LBB4_11:
     284:	r1 += 8
     285:	r3 = *(u16 *)(r1 + 12)
     286:	r3 <<= 16
     287:	r4 = *(u16 *)(r1 + 10)
     288:	r3 |= r4
     289:	r4 = *(u16 *)(r1 + 16)
     290:	r4 <<= 16
     291:	r5 = *(u16 *)(r1 + 14)
     292:	r4 |= r5
     293:	r5 = *(u16 *)(r1 + 20)
     294:	r5 <<= 16
     295:	r0 = *(u16 *)(r1 + 18)
     296:	r5 |= r0
     297:	r0 = *(u16 *)(r1 + 24)
     298:	r0 <<= 16
     299:	r6 = *(u16 *)(r1 + 22)
     300:	r0 |= r6
     301:	*(u32 *)(r10 - 216) = r0
     302:	*(u32 *)(r10 - 220) = r5
     303:	*(u32 *)(r10 - 224) = r4
     304:	*(u32 *)(r10 - 228) = r3
     305:	r3 = *(u16 *)(r1 + 8)
     306:	r3 <<= 16
     307:	r4 = *(u16 *)(r1 + 6)
     308:	r3 |= r4
     309:	*(u32 *)(r10 - 232) = r3
     310:	r3 = *(u16 *)(r1 + 4)
     311:	r3 <<= 16
     312:	r4 = *(u16 *)(r1 + 2)
     313:	r3 |= r4
     314:	*(u32 *)(r10 - 236) = r3
     315:	r1 = *(u16 *)(r1 + 0)
     316:	*(u32 *)(r10 - 212) = r1
; flow_key.mds = *mds;
     317:	*(u32 *)(r10 - 304) = r2
     318:	r2 = r10
     319:	r2 += -304
     320:	r1 = 0ll
     322:	call 1
     323:	if r0 != 0 goto 30
     324:	r1 = 0
     325:	*(u8 *)(r10 - 288) = r1
     326:	r1 = 742051967875969897ll
     328:	*(u64 *)(r10 - 296) = r1
     329:	r1 = 2338338411336787304ll
     331:	*(u64 *)(r10 - 304) = r1
     332:	r1 = r10
     333:	r1 += -304
     334:	r2 = 17
     335:	goto 14

LBB4_13:
     336:	r1 = 686437
     337:	*(u32 *)(r10 - 280) = r1
     338:	r1 = 7737016408759104867ll
     340:	*(u64 *)(r10 - 288) = r1
     341:	r1 = 7311705455702598514ll
     343:	*(u64 *)(r10 - 296) = r1
     344:	r1 = 7309377901238971749ll
     346:	*(u64 *)(r10 - 304) = r1
     347:	r1 = r10
     348:	r1 += -304
     349:	r2 = 28

LBB4_14:
     350:	call 6

LBB4_15:
     351:	r8 = 2

LBB4_16:
     352:	r0 = r8
     353:	exit

LBB4_17:
     354:	r1 = *(u32 *)(r0 + 68)
     355:	r1 <<= 32
     356:	r2 = *(u32 *)(r0 + 64)
     357:	r1 |= r2
     358:	*(u64 *)(r10 - 320) = r1
     359:	r1 = *(u32 *)(r0 + 76)
     360:	r1 <<= 32
     361:	r3 = *(u32 *)(r0 + 72)
     362:	r1 |= r3
     363:	*(u64 *)(r10 - 328) = r1
     364:	r1 = *(u32 *)(r0 + 84)
     365:	r1 <<= 32
     366:	r3 = *(u32 *)(r0 + 80)
     367:	r1 |= r3
     368:	*(u64 *)(r10 - 344) = r1
     369:	r1 = *(u32 *)(r0 + 12)
     370:	r1 <<= 32
     371:	r5 = *(u32 *)(r0 + 8)
     372:	r1 |= r5
     373:	*(u64 *)(r10 - 336) = r1
     374:	r5 = *(u32 *)(r0 + 20)
     375:	r5 <<= 32
     376:	r6 = *(u32 *)(r0 + 16)
     377:	r5 |= r6
     378:	*(u64 *)(r10 - 312) = r7
     379:	r7 = *(u32 *)(r0 + 28)
     380:	r7 <<= 32
     381:	r6 = *(u32 *)(r0 + 24)
     382:	r7 |= r6
     383:	r8 = *(u32 *)(r0 + 36)
     384:	r8 <<= 32
     385:	r6 = *(u32 *)(r0 + 32)
     386:	r8 |= r6
     387:	r6 = *(u32 *)(r0 + 44)
     388:	r6 <<= 32
     389:	r1 = *(u32 *)(r0 + 40)
     390:	r6 |= r1
     391:	r1 = *(u32 *)(r0 + 52)
; flow_stats = bpf_map_lookup_elem(&dp_flow_stats, &flow_key);
     392:	r1 <<= 32
     393:	r2 = *(u32 *)(r0 + 48)
     394:	r1 |= r2
     395:	r2 = *(u32 *)(r0 + 60)
; if (!flow_stats) {
     396:	r2 <<= 32
; printt("flow not found in flow stats, first install\n");
     397:	r3 = *(u32 *)(r0 + 56)
     398:	r2 |= r3
     399:	r3 = *(u32 *)(r0 + 92)
     400:	r3 <<= 32
     401:	r4 = *(u32 *)(r0 + 88)
     402:	r3 |= r4
     403:	*(u64 *)(r10 - 120) = r3
     404:	r3 = *(u64 *)(r10 - 344)
     405:	*(u64 *)(r10 - 128) = r3
     406:	r3 = *(u64 *)(r10 - 328)
     407:	*(u64 *)(r10 - 136) = r3
     408:	r3 = *(u64 *)(r10 - 320)
     409:	*(u64 *)(r10 - 144) = r3
     410:	*(u64 *)(r10 - 152) = r2
     411:	*(u64 *)(r10 - 160) = r1
     412:	*(u64 *)(r10 - 168) = r6
     413:	*(u64 *)(r10 - 176) = r8
     414:	*(u64 *)(r10 - 184) = r7
     415:	r7 = *(u64 *)(r10 - 312)
     416:	*(u64 *)(r10 - 192) = r5
     417:	r1 = *(u64 *)(r10 - 336)
     418:	*(u64 *)(r10 - 200) = r1
     419:	r1 = *(u32 *)(r0 + 0)
; s.packet_count = 1;
     420:	r2 = *(u32 *)(r0 + 4)
     421:	r2 <<= 32
; s.byte_count = bytes;
     422:	r2 |= r1
     423:	*(u64 *)(r10 - 208) = r2
; s.used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     424:	r3 = *(u32 *)(r7 + 0)
     425:	r3 <<= 32
     426:	r1 = 4294967295ll
     428:	r3 |= r1
     429:	r4 = r10
     430:	r4 += -256
; err = bpf_map_update_elem(&dp_flow_stats, &flow_key, &s, BPF_ANY);
     431:	r1 = r7
     432:	r2 = 0ll
     434:	r5 = 248
     435:	call 25
; flow_stats->packet_count += 1;
     436:	r1 = r0
     437:	r1 <<= 32
     438:	r1 >>= 32
     439:	if r1 == 0 goto 23
     440:	r1 = 0
     441:	*(u8 *)(r10 - 264) = r1
     442:	r1 = 7216209413264075124ll
; flow_stats->used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     444:	*(u64 *)(r10 - 272) = r1
     445:	r1 = 7161040502326915187ll
; printt("current: packets %d count %d ts %d\n",
     447:	*(u64 *)(r10 - 280) = r1
     448:	r1 = 8243121639863512864ll
     450:	*(u64 *)(r10 - 288) = r1
     451:	r1 = 8391737126163537780ll
     453:	*(u64 *)(r10 - 296) = r1
     454:	r1 = 7954894494583909235ll
     456:	*(u64 *)(r10 - 304) = r1
     457:	r1 = r10
     458:	r1 += -304
     459:	r2 = 41
     460:	r3 = r0
     461:	call 6
     462:	goto 65424

LBB4_19:
     463:	r1 = *(u32 *)(r7 + 48)
     464:	r1 += 1
     465:	*(u32 *)(r7 + 48) = r1
     466:	r1 <<= 32
; flow_key.headers = *headers;
     467:	r1 >>= 32
     468:	if r1 > 31 goto 35
     469:	r1 *= 136
     470:	r9 += r1
     471:	r3 = *(u32 *)(r9 + 0)
     472:	if r3 == 0 goto 31
     473:	r1 = 2660
     474:	*(u16 *)(r10 - 284) = r1
     475:	r1 = 622869792
     476:	*(u32 *)(r10 - 288) = r1
     477:	r1 = 7309475734889590633ll
     479:	*(u64 *)(r10 - 296) = r1
     480:	r1 = 8386653723114890606ll
     482:	*(u64 *)(r10 - 304) = r1
     483:	r6 = 0
     484:	*(u8 *)(r10 - 282) = r6
     485:	r1 = r10
     486:	r1 += -304
     487:	r2 = 23
     488:	call 6
     489:	r3 = *(u32 *)(r9 + 0)
     490:	r1 = r7
     491:	r2 = 0ll
     493:	call 12
     494:	*(u8 *)(r10 - 280) = r6
     495:	r1 = 749689262168041837ll
     497:	*(u64 *)(r10 - 288) = r1
     498:	r1 = 2336361472229141609ll
     500:	*(u64 *)(r10 - 296) = r1
     501:	r1 = 7022273303978263131ll
     503:	goto 65047

LBB4_22:
     504:	r8 = 4
     505:	r1 = *(u32 *)(r7 + 56)
     506:	if r1 == 0 goto 65381
     507:	r1 = 0
     508:	*(u32 *)(r10 - 304) = r1
     509:	r2 = r10
     510:	r2 += -304
     511:	r1 = 0ll
     513:	call 3
     514:	goto 65373
Disassembly of section tail-3:
tail_action_tunnel_set:
; {
       0:	r8 = r1
; {
       1:	r9 = *(u32 *)(r8 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r9 goto 14
       6:	*(u8 *)(r10 - 216) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 224) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 232) = r1
      13:	r1 = 2339727127740568133ll
      15:	*(u64 *)(r10 - 240) = r1
      16:	r1 = r10
      17:	r1 += -240
      18:	r2 = 25
      19:	goto 255

LBB5_2:
      20:	r1 = *(u32 *)(r8 + 56)
      21:	if r1 == 0 goto 8
      22:	r2 = r10
; ERR_EXIT();
      23:	r2 += -4
      24:	r1 = 0ll
      26:	call 1
      27:	r6 = r0
      28:	if r6 != 0 goto 174
; int ebpf_zero = 0;
      29:	goto 215

LBB5_4:
      30:	r2 = r10
      31:	r2 += -4
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = 0ll
      34:	call 1
      35:	if r0 == 0 goto 225
; if (!mds) {
      36:	r2 = *(u32 *)(r0 + 172)
; printt("no packet metadata found\n");
      37:	r2 <<= 32
      38:	r1 = *(u32 *)(r0 + 168)
      39:	r2 |= r1
      40:	*(u64 *)(r10 - 264) = r2
      41:	r2 = *(u32 *)(r0 + 180)
      42:	r2 <<= 32
      43:	r1 = *(u32 *)(r0 + 176)
      44:	r2 |= r1
      45:	*(u64 *)(r10 - 280) = r2
      46:	r2 = *(u32 *)(r0 + 188)
      47:	r2 <<= 32
      48:	r1 = *(u32 *)(r0 + 184)
      49:	r2 |= r1
      50:	*(u64 *)(r10 - 296) = r2
      51:	r2 = *(u32 *)(r0 + 20)
; ERR_EXIT();
      52:	r2 <<= 32
      53:	r1 = *(u32 *)(r0 + 16)
      54:	r2 |= r1
      55:	*(u64 *)(r10 - 256) = r2
      56:	r2 = *(u32 *)(r0 + 28)
      57:	r2 <<= 32
      58:	r1 = *(u32 *)(r0 + 24)
      59:	r2 |= r1
; }
      60:	*(u64 *)(r10 - 272) = r2
      61:	r2 = *(u32 *)(r0 + 36)
      62:	r2 <<= 32
; flow_key.headers = *headers;
      63:	r1 = *(u32 *)(r0 + 32)
      64:	r2 |= r1
      65:	*(u64 *)(r10 - 288) = r2
      66:	r2 = *(u32 *)(r0 + 44)
      67:	r2 <<= 32
      68:	r1 = *(u32 *)(r0 + 40)
      69:	r2 |= r1
      70:	*(u64 *)(r10 - 304) = r2
      71:	r2 = *(u32 *)(r0 + 52)
      72:	r2 <<= 32
      73:	r1 = *(u32 *)(r0 + 48)
      74:	r2 |= r1
      75:	*(u64 *)(r10 - 312) = r2
      76:	r2 = *(u32 *)(r0 + 60)
      77:	r2 <<= 32
      78:	r1 = *(u32 *)(r0 + 56)
      79:	r2 |= r1
      80:	*(u64 *)(r10 - 320) = r2
      81:	r2 = *(u32 *)(r0 + 68)
      82:	r2 <<= 32
      83:	r1 = *(u32 *)(r0 + 64)
      84:	r2 |= r1
      85:	*(u64 *)(r10 - 328) = r2
      86:	r2 = *(u32 *)(r0 + 76)
      87:	r2 <<= 32
      88:	r1 = *(u32 *)(r0 + 72)
      89:	r2 |= r1
      90:	*(u64 *)(r10 - 336) = r2
      91:	r2 = *(u32 *)(r0 + 84)
      92:	r2 <<= 32
      93:	r1 = *(u32 *)(r0 + 80)
      94:	r2 |= r1
      95:	*(u64 *)(r10 - 344) = r2
      96:	r2 = *(u32 *)(r0 + 92)
      97:	r2 <<= 32
      98:	r1 = *(u32 *)(r0 + 88)
      99:	r2 |= r1
     100:	*(u64 *)(r10 - 352) = r2
     101:	r2 = *(u32 *)(r0 + 100)
     102:	r2 <<= 32
     103:	r1 = *(u32 *)(r0 + 96)
     104:	r2 |= r1
     105:	*(u64 *)(r10 - 360) = r2
     106:	r2 = *(u32 *)(r0 + 108)
     107:	r2 <<= 32
     108:	r1 = *(u32 *)(r0 + 104)
     109:	r2 |= r1
     110:	*(u64 *)(r10 - 368) = r2
     111:	r2 = *(u32 *)(r0 + 116)
     112:	r2 <<= 32
     113:	r1 = *(u32 *)(r0 + 112)
     114:	r2 |= r1
     115:	*(u64 *)(r10 - 376) = r2
     116:	r3 = *(u32 *)(r0 + 124)
     117:	r3 <<= 32
     118:	r1 = *(u32 *)(r0 + 120)
     119:	r3 |= r1
     120:	r2 = *(u32 *)(r0 + 132)
     121:	r2 <<= 32
     122:	r1 = *(u32 *)(r0 + 128)
     123:	r2 |= r1
     124:	r1 = *(u32 *)(r0 + 140)
     125:	r1 <<= 32
     126:	r7 = *(u32 *)(r0 + 136)
     127:	r1 |= r7
     128:	r7 = *(u32 *)(r0 + 148)
     129:	r7 <<= 32
     130:	r6 = *(u32 *)(r0 + 144)
; flow_key.mds = *mds;
     131:	r7 |= r6
     132:	r6 = *(u32 *)(r0 + 156)
     133:	r6 <<= 32
     134:	*(u64 *)(r10 - 248) = r8
     135:	r8 = *(u32 *)(r0 + 152)
     136:	r6 |= r8
     137:	r8 = *(u32 *)(r0 + 164)
     138:	r8 <<= 32
     139:	r5 = *(u32 *)(r0 + 160)
     140:	r8 |= r5
     141:	r5 = *(u32 *)(r0 + 196)
     142:	r5 <<= 32
     143:	r4 = *(u32 *)(r0 + 192)
     144:	r5 |= r4
     145:	*(u64 *)(r10 - 16) = r5
     146:	r4 = *(u64 *)(r10 - 296)
     147:	*(u64 *)(r10 - 24) = r4
     148:	r4 = *(u64 *)(r10 - 280)
     149:	*(u64 *)(r10 - 32) = r4
     150:	r4 = *(u64 *)(r10 - 264)
     151:	*(u64 *)(r10 - 40) = r4
     152:	*(u64 *)(r10 - 48) = r8
     153:	r8 = *(u64 *)(r10 - 248)
     154:	*(u64 *)(r10 - 56) = r6
     155:	*(u64 *)(r10 - 64) = r7
     156:	*(u64 *)(r10 - 72) = r1
     157:	*(u64 *)(r10 - 80) = r2
     158:	*(u64 *)(r10 - 88) = r3
     159:	r1 = *(u64 *)(r10 - 376)
     160:	*(u64 *)(r10 - 96) = r1
     161:	r1 = *(u64 *)(r10 - 368)
     162:	*(u64 *)(r10 - 104) = r1
     163:	r1 = *(u64 *)(r10 - 360)
     164:	*(u64 *)(r10 - 112) = r1
     165:	r1 = *(u64 *)(r10 - 352)
     166:	*(u64 *)(r10 - 120) = r1
     167:	r1 = *(u64 *)(r10 - 344)
     168:	*(u64 *)(r10 - 128) = r1
     169:	r1 = *(u64 *)(r10 - 336)
     170:	*(u64 *)(r10 - 136) = r1
     171:	r1 = *(u64 *)(r10 - 328)
     172:	*(u64 *)(r10 - 144) = r1
     173:	r1 = *(u64 *)(r10 - 320)
     174:	*(u64 *)(r10 - 152) = r1
     175:	r1 = *(u64 *)(r10 - 312)
     176:	*(u64 *)(r10 - 160) = r1
     177:	r1 = *(u64 *)(r10 - 304)
     178:	*(u64 *)(r10 - 168) = r1
     179:	r1 = *(u64 *)(r10 - 288)
     180:	*(u64 *)(r10 - 176) = r1
     181:	r1 = *(u64 *)(r10 - 272)
     182:	*(u64 *)(r10 - 184) = r1
     183:	r1 = *(u64 *)(r10 - 256)
     184:	*(u64 *)(r10 - 192) = r1
     185:	r1 = *(u32 *)(r0 + 12)
     186:	r1 <<= 32
     187:	r2 = *(u32 *)(r0 + 8)
     188:	r1 |= r2
     189:	*(u64 *)(r10 - 200) = r1
     190:	r1 = *(u32 *)(r0 + 0)
     191:	r2 = *(u32 *)(r0 + 4)
     192:	r2 <<= 32
     193:	r2 |= r1
     194:	*(u64 *)(r10 - 208) = r2
     195:	r2 = r10
     196:	r2 += -208
     197:	r1 = 0ll
     199:	call 1
     200:	r6 = r0
     201:	if r6 != 0 goto 1
     202:	goto 42

LBB5_9:
     203:	r9 *= 136
     204:	r1 = r6
     205:	r1 += r9
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r7 = 2
     207:	if r1 == 0 goto 69
     208:	r9 = r1
; if (!action_batch) {
     209:	r9 += 8
; printt("no action found, upcall to userspace\n");
     210:	r2 = *(u32 *)(r1 + 4)
     211:	if r2 == 0 goto 67
     212:	r2 = *(u32 *)(r9 + 0)
     213:	if r2 == 7 goto 152
     214:	if r2 != 4 goto 251
     215:	r2 = *(u32 *)(r8 + 80)
     216:	r1 = *(u32 *)(r8 + 76)
     217:	r3 = r1
     218:	r3 += 14
     219:	if r3 > r2 goto 57
     220:	r2 = *(u8 *)(r9 + 15)
     221:	*(u8 *)(r1 + 5) = r2
     222:	r2 = *(u8 *)(r9 + 14)
     223:	*(u8 *)(r1 + 4) = r2
     224:	r2 = *(u8 *)(r9 + 13)
     225:	*(u8 *)(r1 + 3) = r2
     226:	r2 = *(u8 *)(r9 + 12)
     227:	*(u8 *)(r1 + 2) = r2
     228:	r2 = *(u8 *)(r9 + 11)
     229:	*(u8 *)(r1 + 1) = r2
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r2 = *(u8 *)(r9 + 10)
     231:	*(u8 *)(r1 + 0) = r2
     232:	r2 = *(u8 *)(r9 + 9)
     233:	*(u8 *)(r1 + 11) = r2
     234:	r2 = *(u8 *)(r9 + 8)
     235:	*(u8 *)(r1 + 10) = r2
     236:	r2 = *(u8 *)(r9 + 7)
     237:	*(u8 *)(r1 + 9) = r2
     238:	r2 = *(u8 *)(r9 + 6)
     239:	*(u8 *)(r1 + 8) = r2
     240:	r2 = *(u8 *)(r9 + 5)
; value = map_lookup_elem(&datapath_stats, &index);
     241:	*(u8 *)(r1 + 7) = r2
     242:	r2 = *(u8 *)(r9 + 4)
     243:	*(u8 *)(r1 + 6) = r2
; if (value) {
     244:	goto 163

LBB5_7:
; __sync_fetch_and_add(value, stat);
     245:	r1 = 0
; flow_stats_account(headers, mds, skb->len);
     246:	*(u8 *)(r10 - 218) = r1
     247:	r1 = 2660
; flow_key.headers = *headers;
     248:	*(u16 *)(r10 - 220) = r1
     249:	r1 = 1853189990
     250:	*(u32 *)(r10 - 224) = r1
     251:	r1 = 2336927755366785312ll
     253:	*(u64 *)(r10 - 232) = r1
     254:	r1 = 7521983764245802862ll
     256:	*(u64 *)(r10 - 240) = r1
     257:	r1 = r10
     258:	r1 += -240
     259:	r2 = 23
     260:	goto 14

LBB5_6:
     261:	r1 = 686437
     262:	*(u32 *)(r10 - 216) = r1
     263:	r1 = 7737016408759104867ll
     265:	*(u64 *)(r10 - 224) = r1
     266:	r1 = 7311705455702598514ll
     268:	*(u64 *)(r10 - 232) = r1
     269:	r1 = 7309377901238971749ll
     271:	*(u64 *)(r10 - 240) = r1
     272:	r1 = r10
     273:	r1 += -240
     274:	r2 = 28

LBB5_8:
     275:	call 6
     276:	r7 = 2

LBB5_31:
     277:	r0 = r7
     278:	exit

LBB5_18:
     279:	*(u64 *)(r10 - 248) = r6
     280:	r6 = r10
     281:	r6 += -204
     282:	r1 = 0
     283:	*(u32 *)(r6 + 4) = r1
     284:	*(u32 *)(r10 - 184) = r1
     285:	*(u32 *)(r10 - 188) = r1
     286:	*(u32 *)(r10 - 192) = r1
     287:	*(u32 *)(r10 - 196) = r1
     288:	*(u32 *)(r10 - 204) = r1
     289:	r3 = *(u32 *)(r9 + 0)
     290:	*(u32 *)(r10 - 208) = r3
     291:	r1 = *(u8 *)(r9 + 20)
     292:	*(u8 *)(r10 - 188) = r1
     293:	r1 = *(u8 *)(r9 + 21)
     294:	*(u8 *)(r10 - 187) = r1
     295:	r1 = 2946850617106532ll
     297:	*(u64 *)(r10 - 232) = r1
     298:	r1 = 7592906679670175092ll
     300:	*(u64 *)(r10 - 240) = r1
     301:	r1 = r10
     302:	r1 += -240
     303:	r2 = 16
     304:	call 6
     305:	r1 = *(u8 *)(r9 + 37)
     306:	if r1 != 0 goto 4
     307:	r1 = *(u32 *)(r9 + 4)
     308:	*(u32 *)(r10 - 204) = r1
     309:	r4 = 2
     310:	goto 9

LBB5_20:
     311:	r1 = *(u32 *)(r9 + 8)
     312:	*(u32 *)(r6 + 4) = r1
     313:	r1 = *(u32 *)(r9 + 16)
     314:	*(u32 *)(r10 - 192) = r1
     315:	r1 = *(u32 *)(r9 + 12)
     316:	*(u32 *)(r10 - 196) = r1
; flow_key.mds = *mds;
     317:	r1 = *(u32 *)(r9 + 4)
     318:	*(u32 *)(r10 - 204) = r1
     319:	r4 = 3

LBB5_21:
     320:	r6 = *(u64 *)(r10 - 248)
     321:	r2 = r10
     322:	r2 += -208
     323:	r1 = r8
     324:	r3 = 28
     325:	call 21
     326:	r0 <<= 32
     327:	r0 s>>= 32
     328:	if r0 s> -1 goto 13
     329:	r1 = 2948226263051365ll
     331:	*(u64 *)(r10 - 224) = r1
     332:	r1 = 7957426733230550633ll
     334:	*(u64 *)(r10 - 232) = r1
     335:	r1 = 8391443550835987013ll
     337:	*(u64 *)(r10 - 240) = r1
     338:	r1 = r10
     339:	r1 += -240
     340:	r2 = 24
     341:	call 6

LBB5_23:
     342:	r1 = *(u8 *)(r9 + 36)
     343:	if r1 == 0 goto 64
     344:	r9 += 28
     345:	r1 = r8
     346:	r2 = r9
     347:	r3 = 8
     348:	call 30
     349:	r0 <<= 32
     350:	r0 s>>= 32
     351:	if r0 s> -1 goto 56
     352:	r1 = 2942776016661605ll
     354:	*(u64 *)(r10 - 224) = r1
     355:	r1 = 7957426733230550633ll
     357:	*(u64 *)(r10 - 232) = r1
     358:	r1 = 8391443550835987013ll
     360:	*(u64 *)(r10 - 240) = r1
     361:	r1 = r10
     362:	r1 += -240
     363:	r2 = 24
     364:	call 6
     365:	goto 42

LBB5_15:
     366:	r1 = *(u32 *)(r8 + 80)
     367:	r2 = *(u32 *)(r8 + 76)
     368:	r2 += 34
     369:	if r2 > r1 goto 65443
     370:	r1 = *(u8 *)(r9 + 13)
     371:	*(u64 *)(r10 - 256) = r1
     372:	*(u8 *)(r10 - 208) = r1
     373:	*(u64 *)(r10 - 248) = r6
     374:	r6 = r8
     375:	r0 = *(u8 *)skb[15]
     376:	r0 &= 255
     377:	r1 = r8
     378:	r2 = 24
     379:	r3 = r0
     380:	r4 = *(u64 *)(r10 - 256)
     381:	r5 = 2
     382:	call 10
     383:	r3 = r10
     384:	r3 += -208
     385:	r1 = r8
     386:	r2 = 15
     387:	r4 = 1
     388:	r5 = 0
     389:	call 9
     390:	r9 = *(u8 *)(r9 + 14)
     391:	*(u8 *)(r10 - 208) = r9
; flow_stats = bpf_map_lookup_elem(&dp_flow_stats, &flow_key);
     392:	r0 = *(u8 *)skb[22]
     393:	r6 = *(u64 *)(r10 - 248)
     394:	r0 &= 255
     395:	r1 = r8
; if (!flow_stats) {
     396:	r2 = 24
; printt("flow not found in flow stats, first install\n");
     397:	r3 = r0
     398:	r4 = r9
     399:	r5 = 2
     400:	call 10
     401:	r3 = r10
     402:	r3 += -208
     403:	r1 = r8
     404:	r2 = 22
     405:	r4 = 1
     406:	r5 = 0
     407:	call 9

LBB5_26:
     408:	r1 = *(u32 *)(r8 + 48)
     409:	r1 += 1
     410:	*(u32 *)(r8 + 48) = r1
     411:	r1 <<= 32
     412:	r1 >>= 32
     413:	if r1 > 31 goto 41
     414:	r1 *= 136
     415:	r6 += r1
     416:	r3 = *(u32 *)(r6 + 0)
     417:	if r3 == 0 goto 37
     418:	r1 = 2660
     419:	*(u16 *)(r10 - 220) = r1
; s.packet_count = 1;
     420:	r1 = 622869792
     421:	*(u32 *)(r10 - 224) = r1
; s.byte_count = bytes;
     422:	r1 = 7309475734889590633ll
; s.used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     424:	*(u64 *)(r10 - 232) = r1
     425:	r1 = 8386653723114890606ll
     427:	*(u64 *)(r10 - 240) = r1
     428:	r9 = r6
     429:	r6 = 0
     430:	*(u8 *)(r10 - 218) = r6
; err = bpf_map_update_elem(&dp_flow_stats, &flow_key, &s, BPF_ANY);
     431:	r1 = r10
     432:	r1 += -240
     433:	r2 = 23
     434:	call 6
     435:	r3 = *(u32 *)(r9 + 0)
; flow_stats->packet_count += 1;
     436:	r1 = r8
     437:	r2 = 0ll
     439:	call 12
     440:	*(u8 *)(r10 - 216) = r6
     441:	r1 = 749689262168041837ll
; flow_stats->used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     443:	*(u64 *)(r10 - 224) = r1
     444:	r1 = 2336361472229141609ll
; printt("current: packets %d count %d ts %d\n",
     446:	*(u64 *)(r10 - 232) = r1
     447:	r1 = 7022273303978263131ll
     449:	*(u64 *)(r10 - 240) = r1
     450:	r1 = r10
     451:	r1 += -240
     452:	r2 = 25
     453:	call 6
     454:	goto 65358

LBB5_29:
     455:	r7 = 4
     456:	r1 = *(u32 *)(r8 + 56)
     457:	if r1 == 0 goto 65355
     458:	r1 = 0
     459:	*(u32 *)(r10 - 240) = r1
     460:	r2 = r10
     461:	r2 += -240
     462:	r1 = 0ll
     464:	call 3
     465:	goto 65347

LBB5_17:
     466:	r2 = 0
; flow_key.headers = *headers;
     467:	*(u8 *)(r10 - 184) = r2
     468:	r2 = 748764259372331808ll
     470:	*(u64 *)(r10 - 192) = r2
     471:	r2 = 7234316411285303413ll
     473:	*(u64 *)(r10 - 200) = r2
     474:	r2 = 8317679158705672773ll
     476:	*(u64 *)(r10 - 208) = r2
     477:	r3 = *(u32 *)(r1 + 0)
     478:	r1 = r10
     479:	r1 += -208
     480:	r2 = 25
     481:	call 6
     482:	goto 65330
Disassembly of section tail-4:
tail_action_push_vlan:
; {
       0:	r6 = r1
; {
       1:	r7 = *(u32 *)(r6 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r7 goto 14
       6:	*(u8 *)(r10 - 184) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 192) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 200) = r1
      13:	r1 = 2339727127740568133ll
      15:	*(u64 *)(r10 - 208) = r1
      16:	r1 = r10
      17:	r1 += -208
      18:	r2 = 25
      19:	goto 307

LBB6_2:
      20:	r1 = *(u32 *)(r6 + 56)
      21:	if r1 == 0 goto 9
      22:	*(u64 *)(r10 - 248) = r6
; ERR_EXIT();
      23:	r2 = r10
      24:	r2 += -4
      25:	r1 = 0ll
      27:	call 1
      28:	r8 = r0
; int ebpf_zero = 0;
      29:	if r8 != 0 goto 173
      30:	goto 255

LBB6_4:
      31:	r2 = r10
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r2 += -4
      33:	r1 = 0ll
      35:	call 1
; if (!mds) {
      36:	if r0 == 0 goto 276
; printt("no packet metadata found\n");
      37:	*(u64 *)(r10 - 248) = r6
      38:	r2 = *(u32 *)(r0 + 172)
      39:	r2 <<= 32
      40:	r1 = *(u32 *)(r0 + 168)
      41:	r2 |= r1
      42:	*(u64 *)(r10 - 264) = r2
      43:	r2 = *(u32 *)(r0 + 180)
      44:	r2 <<= 32
      45:	r1 = *(u32 *)(r0 + 176)
      46:	r2 |= r1
      47:	*(u64 *)(r10 - 280) = r2
      48:	r2 = *(u32 *)(r0 + 188)
      49:	r2 <<= 32
      50:	r1 = *(u32 *)(r0 + 184)
      51:	r2 |= r1
; ERR_EXIT();
      52:	*(u64 *)(r10 - 296) = r2
      53:	r2 = *(u32 *)(r0 + 20)
      54:	r2 <<= 32
      55:	r1 = *(u32 *)(r0 + 16)
      56:	r2 |= r1
      57:	*(u64 *)(r10 - 256) = r2
      58:	r2 = *(u32 *)(r0 + 28)
      59:	r2 <<= 32
; }
      60:	r1 = *(u32 *)(r0 + 24)
      61:	r2 |= r1
      62:	*(u64 *)(r10 - 272) = r2
; flow_key.headers = *headers;
      63:	r2 = *(u32 *)(r0 + 36)
      64:	r2 <<= 32
      65:	r1 = *(u32 *)(r0 + 32)
      66:	r2 |= r1
      67:	*(u64 *)(r10 - 288) = r2
      68:	r2 = *(u32 *)(r0 + 44)
      69:	r2 <<= 32
      70:	r1 = *(u32 *)(r0 + 40)
      71:	r2 |= r1
      72:	*(u64 *)(r10 - 304) = r2
      73:	r2 = *(u32 *)(r0 + 52)
      74:	r2 <<= 32
      75:	r1 = *(u32 *)(r0 + 48)
      76:	r2 |= r1
      77:	*(u64 *)(r10 - 312) = r2
      78:	r2 = *(u32 *)(r0 + 60)
      79:	r2 <<= 32
      80:	r1 = *(u32 *)(r0 + 56)
      81:	r2 |= r1
      82:	*(u64 *)(r10 - 320) = r2
      83:	r2 = *(u32 *)(r0 + 68)
      84:	r2 <<= 32
      85:	r1 = *(u32 *)(r0 + 64)
      86:	r2 |= r1
      87:	*(u64 *)(r10 - 328) = r2
      88:	r2 = *(u32 *)(r0 + 76)
      89:	r2 <<= 32
      90:	r1 = *(u32 *)(r0 + 72)
      91:	r2 |= r1
      92:	*(u64 *)(r10 - 336) = r2
      93:	r2 = *(u32 *)(r0 + 84)
      94:	r2 <<= 32
      95:	r1 = *(u32 *)(r0 + 80)
      96:	r2 |= r1
      97:	*(u64 *)(r10 - 344) = r2
      98:	r2 = *(u32 *)(r0 + 92)
      99:	r2 <<= 32
     100:	r1 = *(u32 *)(r0 + 88)
     101:	r2 |= r1
     102:	*(u64 *)(r10 - 352) = r2
     103:	r2 = *(u32 *)(r0 + 100)
     104:	r2 <<= 32
     105:	r1 = *(u32 *)(r0 + 96)
     106:	r2 |= r1
     107:	*(u64 *)(r10 - 360) = r2
     108:	r2 = *(u32 *)(r0 + 108)
     109:	r2 <<= 32
     110:	r1 = *(u32 *)(r0 + 104)
     111:	r2 |= r1
     112:	*(u64 *)(r10 - 368) = r2
     113:	r2 = *(u32 *)(r0 + 116)
     114:	r2 <<= 32
     115:	r1 = *(u32 *)(r0 + 112)
     116:	r2 |= r1
     117:	*(u64 *)(r10 - 376) = r2
     118:	r3 = *(u32 *)(r0 + 124)
     119:	r3 <<= 32
     120:	r1 = *(u32 *)(r0 + 120)
     121:	r3 |= r1
     122:	r2 = *(u32 *)(r0 + 132)
     123:	r2 <<= 32
     124:	r1 = *(u32 *)(r0 + 128)
     125:	r2 |= r1
     126:	r6 = *(u32 *)(r0 + 140)
     127:	r6 <<= 32
     128:	r1 = *(u32 *)(r0 + 136)
     129:	r6 |= r1
     130:	r1 = *(u32 *)(r0 + 148)
; flow_key.mds = *mds;
     131:	r1 <<= 32
     132:	r9 = *(u32 *)(r0 + 144)
     133:	r1 |= r9
     134:	r9 = *(u32 *)(r0 + 156)
     135:	r9 <<= 32
     136:	r8 = *(u32 *)(r0 + 152)
     137:	r9 |= r8
     138:	r8 = *(u32 *)(r0 + 164)
     139:	r8 <<= 32
     140:	r5 = *(u32 *)(r0 + 160)
     141:	r8 |= r5
     142:	r5 = *(u32 *)(r0 + 196)
     143:	r5 <<= 32
     144:	r4 = *(u32 *)(r0 + 192)
     145:	r5 |= r4
     146:	*(u64 *)(r10 - 16) = r5
     147:	r4 = *(u64 *)(r10 - 296)
     148:	*(u64 *)(r10 - 24) = r4
     149:	r4 = *(u64 *)(r10 - 280)
     150:	*(u64 *)(r10 - 32) = r4
     151:	r4 = *(u64 *)(r10 - 264)
     152:	*(u64 *)(r10 - 40) = r4
     153:	*(u64 *)(r10 - 48) = r8
     154:	*(u64 *)(r10 - 56) = r9
     155:	*(u64 *)(r10 - 64) = r1
     156:	*(u64 *)(r10 - 72) = r6
     157:	*(u64 *)(r10 - 80) = r2
     158:	*(u64 *)(r10 - 88) = r3
     159:	r1 = *(u64 *)(r10 - 376)
     160:	*(u64 *)(r10 - 96) = r1
     161:	r1 = *(u64 *)(r10 - 368)
     162:	*(u64 *)(r10 - 104) = r1
     163:	r1 = *(u64 *)(r10 - 360)
     164:	*(u64 *)(r10 - 112) = r1
     165:	r1 = *(u64 *)(r10 - 352)
     166:	*(u64 *)(r10 - 120) = r1
     167:	r1 = *(u64 *)(r10 - 344)
     168:	*(u64 *)(r10 - 128) = r1
     169:	r1 = *(u64 *)(r10 - 336)
     170:	*(u64 *)(r10 - 136) = r1
     171:	r1 = *(u64 *)(r10 - 328)
     172:	*(u64 *)(r10 - 144) = r1
     173:	r1 = *(u64 *)(r10 - 320)
     174:	*(u64 *)(r10 - 152) = r1
     175:	r1 = *(u64 *)(r10 - 312)
     176:	*(u64 *)(r10 - 160) = r1
     177:	r1 = *(u64 *)(r10 - 304)
     178:	*(u64 *)(r10 - 168) = r1
     179:	r1 = *(u64 *)(r10 - 288)
     180:	*(u64 *)(r10 - 176) = r1
     181:	r1 = *(u64 *)(r10 - 272)
     182:	*(u64 *)(r10 - 184) = r1
     183:	r1 = *(u64 *)(r10 - 256)
     184:	*(u64 *)(r10 - 192) = r1
     185:	r1 = *(u32 *)(r0 + 12)
     186:	r1 <<= 32
     187:	r2 = *(u32 *)(r0 + 8)
     188:	r1 |= r2
     189:	*(u64 *)(r10 - 200) = r1
     190:	r1 = *(u32 *)(r0 + 0)
     191:	r2 = *(u32 *)(r0 + 4)
     192:	r2 <<= 32
     193:	r2 |= r1
     194:	*(u64 *)(r10 - 208) = r2
     195:	r2 = r10
     196:	r2 += -208
     197:	r1 = 0ll
     199:	call 1
     200:	r8 = r0
     201:	if r8 != 0 goto 1
     202:	goto 83

LBB6_9:
     203:	r7 *= 136
     204:	r9 = r8
     205:	r9 += r7
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r7 = 2
     207:	if r9 == 0 goto 121
     208:	r1 = 10
; if (!action_batch) {
     209:	*(u16 *)(r10 - 192) = r1
; printt("no action found, upcall to userspace\n");
     210:	r1 = 7216209614943297640ll
     212:	*(u64 *)(r10 - 200) = r1
     213:	r6 = 8319679171230002294ll
     215:	*(u64 *)(r10 - 208) = r6
     216:	r3 = *(u16 *)(r9 + 10)
     217:	r1 = r10
     218:	r1 += -208
     219:	r2 = 18
     220:	call 6
     221:	r1 = 0
     222:	*(u8 *)(r10 - 190) = r1
     223:	r1 = 2660
     224:	*(u16 *)(r10 - 192) = r1
     225:	r1 = 2675248582679076968ll
     227:	*(u64 *)(r10 - 200) = r1
     228:	*(u64 *)(r10 - 208) = r6
     229:	r3 = *(u16 *)(r9 + 8)
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r1 = r10
     231:	r1 += -208
     232:	r2 = 19
     233:	call 6
     234:	r2 = *(u16 *)(r9 + 8)
     235:	r3 = *(u16 *)(r9 + 10)
     236:	r3 &= 61439
     237:	r9 = *(u64 *)(r10 - 248)
     238:	r1 = r9
     239:	call 18
     240:	r1 = *(u32 *)(r9 + 48)
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r1 += 1
     242:	*(u32 *)(r9 + 48) = r1
     243:	r1 <<= 32
; if (value) {
     244:	r1 >>= 32
; __sync_fetch_and_add(value, stat);
     245:	if r1 > 31 goto 56
; flow_stats_account(headers, mds, skb->len);
     246:	r1 *= 136
     247:	r8 += r1
; flow_key.headers = *headers;
     248:	r3 = *(u32 *)(r8 + 0)
     249:	if r3 == 0 goto 52
     250:	r1 = 2660
     251:	*(u16 *)(r10 - 188) = r1
     252:	r1 = 622869792
     253:	*(u32 *)(r10 - 192) = r1
     254:	r1 = 7309475734889590633ll
     256:	*(u64 *)(r10 - 200) = r1
     257:	r1 = 8386653723114890606ll
     259:	*(u64 *)(r10 - 208) = r1
     260:	r6 = 0
     261:	*(u8 *)(r10 - 186) = r6
     262:	r1 = r10
     263:	r1 += -208
     264:	r2 = 23
     265:	call 6
     266:	r3 = *(u32 *)(r8 + 0)
     267:	r1 = r9
     268:	r2 = 0ll
     270:	call 12
     271:	*(u8 *)(r10 - 184) = r6
     272:	r1 = 749689262168041837ll
     274:	*(u64 *)(r10 - 192) = r1
     275:	r1 = 2336361472229141609ll
     277:	*(u64 *)(r10 - 200) = r1
     278:	r1 = 7022273303978263131ll
     280:	*(u64 *)(r10 - 208) = r1
     281:	r1 = r10
     282:	r1 += -208
     283:	r2 = 25
     284:	call 6
     285:	goto 43

LBB6_7:
     286:	r1 = 0
     287:	*(u8 *)(r10 - 186) = r1
     288:	r1 = 2660
     289:	*(u16 *)(r10 - 188) = r1
     290:	r1 = 1853189990
     291:	*(u32 *)(r10 - 192) = r1
     292:	r1 = 2336927755366785312ll
     294:	*(u64 *)(r10 - 200) = r1
     295:	r1 = 7521983764245802862ll
     297:	*(u64 *)(r10 - 208) = r1
     298:	r1 = r10
     299:	r1 += -208
     300:	r2 = 23
     301:	goto 25

LBB6_13:
     302:	r7 = 4
     303:	r1 = *(u32 *)(r9 + 56)
     304:	if r1 == 0 goto 24
     305:	r1 = 0
     306:	*(u32 *)(r10 - 208) = r1
     307:	r2 = r10
     308:	r2 += -208
     309:	r1 = 0ll
     311:	call 3
     312:	goto 16

LBB6_6:
     313:	r1 = 686437
     314:	*(u32 *)(r10 - 216) = r1
     315:	r1 = 7737016408759104867ll
; flow_key.mds = *mds;
     317:	*(u64 *)(r10 - 224) = r1
     318:	r1 = 7311705455702598514ll
     320:	*(u64 *)(r10 - 232) = r1
     321:	r1 = 7309377901238971749ll
     323:	*(u64 *)(r10 - 240) = r1
     324:	r1 = r10
     325:	r1 += -240
     326:	r2 = 28

LBB6_8:
     327:	call 6
     328:	r7 = 2

LBB6_15:
     329:	r0 = r7
     330:	exit
Disassembly of section tail-5:
tail_action_pop_vlan:
; {
       0:	r9 = r1
; {
       1:	r7 = *(u32 *)(r9 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r7 goto 14
       6:	*(u8 *)(r10 - 184) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 192) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 200) = r1
      13:	r1 = 2339727127740568133ll
      15:	*(u64 *)(r10 - 208) = r1
      16:	r1 = r10
      17:	r1 += -208
      18:	r2 = 25
      19:	goto 288

LBB7_2:
      20:	r1 = *(u32 *)(r9 + 56)
      21:	if r1 == 0 goto 8
      22:	r2 = r10
; ERR_EXIT();
      23:	r2 += -4
      24:	r1 = 0ll
      26:	call 1
      27:	r8 = r0
      28:	if r8 != 0 goto 174
; int ebpf_zero = 0;
      29:	goto 237

LBB7_4:
      30:	r2 = r10
      31:	r2 += -4
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = 0ll
      34:	call 1
      35:	if r0 == 0 goto 258
; if (!mds) {
      36:	r2 = *(u32 *)(r0 + 172)
; printt("no packet metadata found\n");
      37:	r2 <<= 32
      38:	r1 = *(u32 *)(r0 + 168)
      39:	r2 |= r1
      40:	*(u64 *)(r10 - 256) = r2
      41:	r2 = *(u32 *)(r0 + 180)
      42:	r2 <<= 32
      43:	r1 = *(u32 *)(r0 + 176)
      44:	r2 |= r1
      45:	*(u64 *)(r10 - 272) = r2
      46:	r2 = *(u32 *)(r0 + 188)
      47:	r2 <<= 32
      48:	r1 = *(u32 *)(r0 + 184)
      49:	r2 |= r1
      50:	*(u64 *)(r10 - 288) = r2
      51:	r2 = *(u32 *)(r0 + 20)
; ERR_EXIT();
      52:	r2 <<= 32
      53:	r1 = *(u32 *)(r0 + 16)
      54:	r2 |= r1
      55:	*(u64 *)(r10 - 248) = r2
      56:	r2 = *(u32 *)(r0 + 28)
      57:	r2 <<= 32
      58:	r1 = *(u32 *)(r0 + 24)
      59:	r2 |= r1
; }
      60:	*(u64 *)(r10 - 264) = r2
      61:	r2 = *(u32 *)(r0 + 36)
      62:	r2 <<= 32
; flow_key.headers = *headers;
      63:	r1 = *(u32 *)(r0 + 32)
      64:	r2 |= r1
      65:	*(u64 *)(r10 - 280) = r2
      66:	r2 = *(u32 *)(r0 + 44)
      67:	r2 <<= 32
      68:	r1 = *(u32 *)(r0 + 40)
      69:	r2 |= r1
      70:	*(u64 *)(r10 - 296) = r2
      71:	r2 = *(u32 *)(r0 + 52)
      72:	r2 <<= 32
      73:	r1 = *(u32 *)(r0 + 48)
      74:	r2 |= r1
      75:	*(u64 *)(r10 - 304) = r2
      76:	r2 = *(u32 *)(r0 + 60)
      77:	r2 <<= 32
      78:	r1 = *(u32 *)(r0 + 56)
      79:	r2 |= r1
      80:	*(u64 *)(r10 - 312) = r2
      81:	r2 = *(u32 *)(r0 + 68)
      82:	r2 <<= 32
      83:	r1 = *(u32 *)(r0 + 64)
      84:	r2 |= r1
      85:	*(u64 *)(r10 - 320) = r2
      86:	r2 = *(u32 *)(r0 + 76)
      87:	r2 <<= 32
      88:	r1 = *(u32 *)(r0 + 72)
      89:	r2 |= r1
      90:	*(u64 *)(r10 - 328) = r2
      91:	r2 = *(u32 *)(r0 + 84)
      92:	r2 <<= 32
      93:	r1 = *(u32 *)(r0 + 80)
      94:	r2 |= r1
      95:	*(u64 *)(r10 - 336) = r2
      96:	r2 = *(u32 *)(r0 + 92)
      97:	r2 <<= 32
      98:	r1 = *(u32 *)(r0 + 88)
      99:	r2 |= r1
     100:	*(u64 *)(r10 - 344) = r2
     101:	r2 = *(u32 *)(r0 + 100)
     102:	r2 <<= 32
     103:	r1 = *(u32 *)(r0 + 96)
     104:	r2 |= r1
     105:	*(u64 *)(r10 - 352) = r2
     106:	r2 = *(u32 *)(r0 + 108)
     107:	r2 <<= 32
     108:	r1 = *(u32 *)(r0 + 104)
     109:	r2 |= r1
     110:	*(u64 *)(r10 - 360) = r2
     111:	r2 = *(u32 *)(r0 + 116)
     112:	r2 <<= 32
     113:	r1 = *(u32 *)(r0 + 112)
     114:	r2 |= r1
     115:	*(u64 *)(r10 - 368) = r2
     116:	r2 = *(u32 *)(r0 + 124)
     117:	r2 <<= 32
     118:	r1 = *(u32 *)(r0 + 120)
     119:	r2 |= r1
     120:	*(u64 *)(r10 - 376) = r2
     121:	r2 = *(u32 *)(r0 + 132)
     122:	r2 <<= 32
     123:	r1 = *(u32 *)(r0 + 128)
     124:	r2 |= r1
     125:	r1 = *(u32 *)(r0 + 140)
     126:	r1 <<= 32
     127:	r6 = *(u32 *)(r0 + 136)
     128:	r1 |= r6
     129:	r6 = *(u32 *)(r0 + 148)
     130:	r6 <<= 32
; flow_key.mds = *mds;
     131:	r8 = *(u32 *)(r0 + 144)
     132:	r6 |= r8
     133:	r8 = *(u32 *)(r0 + 156)
     134:	r8 <<= 32
     135:	r5 = *(u32 *)(r0 + 152)
     136:	r8 |= r5
     137:	r5 = *(u32 *)(r0 + 164)
     138:	r5 <<= 32
     139:	r4 = *(u32 *)(r0 + 160)
     140:	r5 |= r4
     141:	r4 = *(u32 *)(r0 + 196)
     142:	r4 <<= 32
     143:	r3 = *(u32 *)(r0 + 192)
     144:	r4 |= r3
     145:	*(u64 *)(r10 - 16) = r4
     146:	r3 = *(u64 *)(r10 - 288)
     147:	*(u64 *)(r10 - 24) = r3
     148:	r3 = *(u64 *)(r10 - 272)
     149:	*(u64 *)(r10 - 32) = r3
     150:	r3 = *(u64 *)(r10 - 256)
     151:	*(u64 *)(r10 - 40) = r3
     152:	*(u64 *)(r10 - 48) = r5
     153:	*(u64 *)(r10 - 56) = r8
     154:	*(u64 *)(r10 - 64) = r6
     155:	*(u64 *)(r10 - 72) = r1
     156:	*(u64 *)(r10 - 80) = r2
     157:	r1 = *(u64 *)(r10 - 376)
     158:	*(u64 *)(r10 - 88) = r1
     159:	r1 = *(u64 *)(r10 - 368)
     160:	*(u64 *)(r10 - 96) = r1
     161:	r1 = *(u64 *)(r10 - 360)
     162:	*(u64 *)(r10 - 104) = r1
     163:	r1 = *(u64 *)(r10 - 352)
     164:	*(u64 *)(r10 - 112) = r1
     165:	r1 = *(u64 *)(r10 - 344)
     166:	*(u64 *)(r10 - 120) = r1
     167:	r1 = *(u64 *)(r10 - 336)
     168:	*(u64 *)(r10 - 128) = r1
     169:	r1 = *(u64 *)(r10 - 328)
     170:	*(u64 *)(r10 - 136) = r1
     171:	r1 = *(u64 *)(r10 - 320)
     172:	*(u64 *)(r10 - 144) = r1
     173:	r1 = *(u64 *)(r10 - 312)
     174:	*(u64 *)(r10 - 152) = r1
     175:	r1 = *(u64 *)(r10 - 304)
     176:	*(u64 *)(r10 - 160) = r1
     177:	r1 = *(u64 *)(r10 - 296)
     178:	*(u64 *)(r10 - 168) = r1
     179:	r1 = *(u64 *)(r10 - 280)
     180:	*(u64 *)(r10 - 176) = r1
     181:	r1 = *(u64 *)(r10 - 264)
     182:	*(u64 *)(r10 - 184) = r1
     183:	r1 = *(u64 *)(r10 - 248)
     184:	*(u64 *)(r10 - 192) = r1
     185:	r1 = *(u32 *)(r0 + 12)
     186:	r1 <<= 32
     187:	r2 = *(u32 *)(r0 + 8)
     188:	r1 |= r2
     189:	*(u64 *)(r10 - 200) = r1
     190:	r1 = *(u32 *)(r0 + 0)
     191:	r2 = *(u32 *)(r0 + 4)
     192:	r2 <<= 32
     193:	r2 |= r1
     194:	*(u64 *)(r10 - 208) = r2
     195:	r2 = r10
     196:	r2 += -208
     197:	r1 = 0ll
     199:	call 1
     200:	r8 = r0
     201:	if r8 != 0 goto 1
     202:	goto 64

LBB7_9:
     203:	r7 *= 136
     204:	r1 = r8
     205:	r1 += r7
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r7 = 2
     207:	if r1 == 0 goto 102
     208:	r1 = 0
; if (!action_batch) {
     209:	*(u8 *)(r10 - 196) = r1
; printt("no action found, upcall to userspace\n");
     210:	r1 = 174335264
     211:	*(u32 *)(r10 - 200) = r1
     212:	r1 = 8101817539255954550ll
     214:	*(u64 *)(r10 - 208) = r1
     215:	r1 = r10
     216:	r1 += -208
     217:	r2 = 13
     218:	call 6
     219:	r1 = r9
     220:	call 19
     221:	r1 = *(u32 *)(r9 + 48)
     222:	r1 += 1
     223:	*(u32 *)(r9 + 48) = r1
     224:	r1 <<= 32
     225:	r1 >>= 32
     226:	if r1 > 31 goto 56
     227:	r1 *= 136
     228:	r8 += r1
     229:	r3 = *(u32 *)(r8 + 0)
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	if r3 == 0 goto 52
     231:	r1 = 2660
     232:	*(u16 *)(r10 - 188) = r1
     233:	r1 = 622869792
     234:	*(u32 *)(r10 - 192) = r1
     235:	r1 = 7309475734889590633ll
     237:	*(u64 *)(r10 - 200) = r1
     238:	r1 = 8386653723114890606ll
     240:	*(u64 *)(r10 - 208) = r1
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r6 = 0
     242:	*(u8 *)(r10 - 186) = r6
     243:	r1 = r10
; if (value) {
     244:	r1 += -208
; __sync_fetch_and_add(value, stat);
     245:	r2 = 23
; flow_stats_account(headers, mds, skb->len);
     246:	call 6
     247:	r3 = *(u32 *)(r8 + 0)
; flow_key.headers = *headers;
     248:	r1 = r9
     249:	r2 = 0ll
     251:	call 12
     252:	*(u8 *)(r10 - 184) = r6
     253:	r1 = 749689262168041837ll
     255:	*(u64 *)(r10 - 192) = r1
     256:	r1 = 2336361472229141609ll
     258:	*(u64 *)(r10 - 200) = r1
     259:	r1 = 7022273303978263131ll
     261:	*(u64 *)(r10 - 208) = r1
     262:	r1 = r10
     263:	r1 += -208
     264:	r2 = 25
     265:	call 6
     266:	goto 43

LBB7_7:
     267:	r1 = 0
     268:	*(u8 *)(r10 - 186) = r1
     269:	r1 = 2660
     270:	*(u16 *)(r10 - 188) = r1
     271:	r1 = 1853189990
     272:	*(u32 *)(r10 - 192) = r1
     273:	r1 = 2336927755366785312ll
     275:	*(u64 *)(r10 - 200) = r1
     276:	r1 = 7521983764245802862ll
     278:	*(u64 *)(r10 - 208) = r1
     279:	r1 = r10
     280:	r1 += -208
     281:	r2 = 23
     282:	goto 25

LBB7_13:
     283:	r7 = 4
     284:	r1 = *(u32 *)(r9 + 56)
     285:	if r1 == 0 goto 24
     286:	r1 = 0
     287:	*(u32 *)(r10 - 208) = r1
     288:	r2 = r10
     289:	r2 += -208
     290:	r1 = 0ll
     292:	call 3
     293:	goto 16

LBB7_6:
     294:	r1 = 686437
     295:	*(u32 *)(r10 - 216) = r1
     296:	r1 = 7737016408759104867ll
     298:	*(u64 *)(r10 - 224) = r1
     299:	r1 = 7311705455702598514ll
     301:	*(u64 *)(r10 - 232) = r1
     302:	r1 = 7309377901238971749ll
     304:	*(u64 *)(r10 - 240) = r1
     305:	r1 = r10
     306:	r1 += -240
     307:	r2 = 28

LBB7_8:
     308:	call 6
     309:	r7 = 2

LBB7_15:
     310:	r0 = r7
     311:	exit
Disassembly of section tail-6:
tail_action_sample:
; {
       0:	r1 = 0
; {
       1:	*(u8 *)(r10 - 10) = r1
; int ebpf_zero = 0;
       2:	r1 = 2592
       3:	*(u16 *)(r10 - 12) = r1
       4:	r1 = 1064593696
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	*(u32 *)(r10 - 16) = r1
       6:	r1 = 8026576098942809198ll
       8:	*(u64 *)(r10 - 24) = r1
; if (!headers) {
       9:	r1 = 7023117832661049455ll
; printt("no packet header found\n");
      11:	*(u64 *)(r10 - 32) = r1
      12:	r1 = 7214801925397553184ll
      14:	*(u64 *)(r10 - 40) = r1
      15:	r1 = 2314885530819257445ll
      17:	*(u64 *)(r10 - 48) = r1
      18:	r1 = 8389754676365258861ll
      20:	*(u64 *)(r10 - 56) = r1
      21:	r1 = 7575182595174985327ll
; ERR_EXIT();
      23:	*(u64 *)(r10 - 64) = r1
      24:	r1 = 7598807740087364720ll
      26:	*(u64 *)(r10 - 72) = r1
      27:	r1 = 7881672220757611077ll
; int ebpf_zero = 0;
      29:	*(u64 *)(r10 - 80) = r1
      30:	r1 = r10
      31:	r1 += -80
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r2 = 71
      33:	call 6
      34:	r0 = 2
      35:	exit
Disassembly of section tail-7:
tail_action_recirc:
; {
       0:	r9 = r1
; {
       1:	r7 = *(u32 *)(r9 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r7 goto 14
       6:	*(u8 *)(r10 - 184) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 192) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 200) = r1
      13:	r1 = 2339727127740568133ll
      15:	*(u64 *)(r10 - 208) = r1
      16:	r1 = r10
      17:	r1 += -208
      18:	r2 = 25
      19:	goto 256

LBB9_2:
      20:	r1 = *(u32 *)(r9 + 56)
      21:	if r1 == 0 goto 7
      22:	r2 = r10
; ERR_EXIT();
      23:	r2 += -4
      24:	r1 = 0ll
      26:	call 1
      27:	if r0 != 0 goto 173
      28:	goto 208

LBB9_4:
; int ebpf_zero = 0;
      29:	r2 = r10
      30:	r2 += -4
      31:	r1 = 0ll
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      33:	call 1
      34:	if r0 == 0 goto 227
      35:	r2 = *(u32 *)(r0 + 172)
; if (!mds) {
      36:	r2 <<= 32
; printt("no packet metadata found\n");
      37:	r1 = *(u32 *)(r0 + 168)
      38:	r2 |= r1
      39:	*(u64 *)(r10 - 256) = r2
      40:	r2 = *(u32 *)(r0 + 180)
      41:	r2 <<= 32
      42:	r1 = *(u32 *)(r0 + 176)
      43:	r2 |= r1
      44:	*(u64 *)(r10 - 272) = r2
      45:	r2 = *(u32 *)(r0 + 188)
      46:	r2 <<= 32
      47:	r1 = *(u32 *)(r0 + 184)
      48:	r2 |= r1
      49:	*(u64 *)(r10 - 288) = r2
      50:	r2 = *(u32 *)(r0 + 20)
      51:	r2 <<= 32
; ERR_EXIT();
      52:	r1 = *(u32 *)(r0 + 16)
      53:	r2 |= r1
      54:	*(u64 *)(r10 - 248) = r2
      55:	r2 = *(u32 *)(r0 + 28)
      56:	r2 <<= 32
      57:	r1 = *(u32 *)(r0 + 24)
      58:	r2 |= r1
      59:	*(u64 *)(r10 - 264) = r2
; }
      60:	r2 = *(u32 *)(r0 + 36)
      61:	r2 <<= 32
      62:	r1 = *(u32 *)(r0 + 32)
; flow_key.headers = *headers;
      63:	r2 |= r1
      64:	*(u64 *)(r10 - 280) = r2
      65:	r2 = *(u32 *)(r0 + 44)
      66:	r2 <<= 32
      67:	r1 = *(u32 *)(r0 + 40)
      68:	r2 |= r1
      69:	*(u64 *)(r10 - 296) = r2
      70:	r2 = *(u32 *)(r0 + 52)
      71:	r2 <<= 32
      72:	r1 = *(u32 *)(r0 + 48)
      73:	r2 |= r1
      74:	*(u64 *)(r10 - 304) = r2
      75:	r2 = *(u32 *)(r0 + 60)
      76:	r2 <<= 32
      77:	r1 = *(u32 *)(r0 + 56)
      78:	r2 |= r1
      79:	*(u64 *)(r10 - 312) = r2
      80:	r2 = *(u32 *)(r0 + 68)
      81:	r2 <<= 32
      82:	r1 = *(u32 *)(r0 + 64)
      83:	r2 |= r1
      84:	*(u64 *)(r10 - 320) = r2
      85:	r2 = *(u32 *)(r0 + 76)
      86:	r2 <<= 32
      87:	r1 = *(u32 *)(r0 + 72)
      88:	r2 |= r1
      89:	*(u64 *)(r10 - 328) = r2
      90:	r2 = *(u32 *)(r0 + 84)
      91:	r2 <<= 32
      92:	r1 = *(u32 *)(r0 + 80)
      93:	r2 |= r1
      94:	*(u64 *)(r10 - 336) = r2
      95:	r2 = *(u32 *)(r0 + 92)
      96:	r2 <<= 32
      97:	r1 = *(u32 *)(r0 + 88)
      98:	r2 |= r1
      99:	*(u64 *)(r10 - 344) = r2
     100:	r2 = *(u32 *)(r0 + 100)
     101:	r2 <<= 32
     102:	r1 = *(u32 *)(r0 + 96)
     103:	r2 |= r1
     104:	*(u64 *)(r10 - 352) = r2
     105:	r2 = *(u32 *)(r0 + 108)
     106:	r2 <<= 32
     107:	r1 = *(u32 *)(r0 + 104)
     108:	r2 |= r1
     109:	*(u64 *)(r10 - 360) = r2
     110:	r2 = *(u32 *)(r0 + 116)
     111:	r2 <<= 32
     112:	r1 = *(u32 *)(r0 + 112)
     113:	r2 |= r1
     114:	*(u64 *)(r10 - 368) = r2
     115:	r2 = *(u32 *)(r0 + 124)
     116:	r2 <<= 32
     117:	r1 = *(u32 *)(r0 + 120)
     118:	r2 |= r1
     119:	*(u64 *)(r10 - 376) = r2
     120:	r2 = *(u32 *)(r0 + 132)
     121:	r2 <<= 32
     122:	r1 = *(u32 *)(r0 + 128)
     123:	r2 |= r1
     124:	r1 = *(u32 *)(r0 + 140)
     125:	r1 <<= 32
     126:	r6 = *(u32 *)(r0 + 136)
     127:	r1 |= r6
     128:	r6 = *(u32 *)(r0 + 148)
     129:	r6 <<= 32
     130:	r8 = *(u32 *)(r0 + 144)
; flow_key.mds = *mds;
     131:	r6 |= r8
     132:	r8 = *(u32 *)(r0 + 156)
     133:	r8 <<= 32
     134:	r5 = *(u32 *)(r0 + 152)
     135:	r8 |= r5
     136:	r5 = *(u32 *)(r0 + 164)
     137:	r5 <<= 32
     138:	r4 = *(u32 *)(r0 + 160)
     139:	r5 |= r4
     140:	r4 = *(u32 *)(r0 + 196)
     141:	r4 <<= 32
     142:	r3 = *(u32 *)(r0 + 192)
     143:	r4 |= r3
     144:	*(u64 *)(r10 - 16) = r4
     145:	r3 = *(u64 *)(r10 - 288)
     146:	*(u64 *)(r10 - 24) = r3
     147:	r3 = *(u64 *)(r10 - 272)
     148:	*(u64 *)(r10 - 32) = r3
     149:	r3 = *(u64 *)(r10 - 256)
     150:	*(u64 *)(r10 - 40) = r3
     151:	*(u64 *)(r10 - 48) = r5
     152:	*(u64 *)(r10 - 56) = r8
     153:	*(u64 *)(r10 - 64) = r6
     154:	*(u64 *)(r10 - 72) = r1
     155:	*(u64 *)(r10 - 80) = r2
     156:	r1 = *(u64 *)(r10 - 376)
     157:	*(u64 *)(r10 - 88) = r1
     158:	r1 = *(u64 *)(r10 - 368)
     159:	*(u64 *)(r10 - 96) = r1
     160:	r1 = *(u64 *)(r10 - 360)
     161:	*(u64 *)(r10 - 104) = r1
     162:	r1 = *(u64 *)(r10 - 352)
     163:	*(u64 *)(r10 - 112) = r1
     164:	r1 = *(u64 *)(r10 - 344)
     165:	*(u64 *)(r10 - 120) = r1
     166:	r1 = *(u64 *)(r10 - 336)
     167:	*(u64 *)(r10 - 128) = r1
     168:	r1 = *(u64 *)(r10 - 328)
     169:	*(u64 *)(r10 - 136) = r1
     170:	r1 = *(u64 *)(r10 - 320)
     171:	*(u64 *)(r10 - 144) = r1
     172:	r1 = *(u64 *)(r10 - 312)
     173:	*(u64 *)(r10 - 152) = r1
     174:	r1 = *(u64 *)(r10 - 304)
     175:	*(u64 *)(r10 - 160) = r1
     176:	r1 = *(u64 *)(r10 - 296)
     177:	*(u64 *)(r10 - 168) = r1
     178:	r1 = *(u64 *)(r10 - 280)
     179:	*(u64 *)(r10 - 176) = r1
     180:	r1 = *(u64 *)(r10 - 264)
     181:	*(u64 *)(r10 - 184) = r1
     182:	r1 = *(u64 *)(r10 - 248)
     183:	*(u64 *)(r10 - 192) = r1
     184:	r1 = *(u32 *)(r0 + 12)
     185:	r1 <<= 32
     186:	r2 = *(u32 *)(r0 + 8)
     187:	r1 |= r2
     188:	*(u64 *)(r10 - 200) = r1
     189:	r1 = *(u32 *)(r0 + 0)
     190:	r2 = *(u32 *)(r0 + 4)
     191:	r2 <<= 32
     192:	r2 |= r1
     193:	*(u64 *)(r10 - 208) = r2
     194:	r2 = r10
     195:	r2 += -208
     196:	r1 = 0ll
     198:	call 1
     199:	if r0 != 0 goto 1
     200:	goto 36

LBB9_6:
     201:	r7 *= 136
     202:	r0 += r7
     203:	if r0 == 0 goto 73
     204:	r7 = *(u32 *)(r0 + 8)
     205:	r1 = 2924860384551012ll
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     207:	*(u64 *)(r10 - 200) = r1
     208:	r1 = 7575163916282717554ll
; printt("no action found, upcall to userspace\n");
     210:	*(u64 *)(r10 - 208) = r1
     211:	r1 = r10
     212:	r1 += -208
     213:	r2 = 16
     214:	r3 = r7
     215:	call 6
     216:	r6 = 0
     217:	*(u32 *)(r10 - 208) = r6
     218:	r2 = r10
     219:	r2 += -208
     220:	r1 = 0ll
     222:	call 1
     223:	if r0 != 0 goto 29
     224:	r1 = 2925136540426598ll
     226:	*(u64 *)(r10 - 192) = r1
     227:	r1 = 2333274043599385701ll
     229:	*(u64 *)(r10 - 200) = r1
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r1 = 7863408599004835692ll
     232:	*(u64 *)(r10 - 208) = r1
     233:	r1 = r10
     234:	r1 += -208
     235:	r2 = 24
     236:	goto 39

LBB9_9:
     237:	r1 = 0
     238:	*(u8 *)(r10 - 186) = r1
     239:	r1 = 2660
     240:	*(u16 *)(r10 - 188) = r1
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r1 = 1853189990
     242:	*(u32 *)(r10 - 192) = r1
     243:	r1 = 2336927755366785312ll
; __sync_fetch_and_add(value, stat);
     245:	*(u64 *)(r10 - 200) = r1
; flow_stats_account(headers, mds, skb->len);
     246:	r1 = 7521983764245802862ll
; flow_key.headers = *headers;
     248:	*(u64 *)(r10 - 208) = r1
     249:	r1 = r10
     250:	r1 += -208
     251:	r2 = 23
     252:	goto 23

LBB9_10:
     253:	*(u32 *)(r0 + 0) = r7
     254:	*(u32 *)(r9 + 48) = r6
     255:	*(u32 *)(r9 + 56) = r6
     256:	r1 = r9
     257:	r2 = 0ll
     259:	r3 = 33
     260:	call 12
     261:	goto 15

LBB9_11:
     262:	r1 = 686437
     263:	*(u32 *)(r10 - 216) = r1
     264:	r1 = 7737016408759104867ll
     266:	*(u64 *)(r10 - 224) = r1
     267:	r1 = 7311705455702598514ll
     269:	*(u64 *)(r10 - 232) = r1
     270:	r1 = 7309377901238971749ll
     272:	*(u64 *)(r10 - 240) = r1
     273:	r1 = r10
     274:	r1 += -240
     275:	r2 = 28

LBB9_12:
     276:	call 6

LBB9_13:
     277:	r0 = 2
     278:	exit
Disassembly of section tail-8:
tail_action_hash:
; {
       0:	r8 = r1
; {
       1:	r1 = 0
; int ebpf_zero = 0;
       2:	*(u32 *)(r10 - 244) = r1
       3:	r7 = *(u32 *)(r8 + 48)
       4:	*(u32 *)(r10 - 4) = r1
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r2 = 32
       6:	if r2 > r7 goto 14
       7:	*(u8 *)(r10 - 184) = r1
       8:	r1 = 753342933619339113ll
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 192) = r1
      11:	r1 = 8386653722879484517ll
      13:	*(u64 *)(r10 - 200) = r1
      14:	r1 = 2339727127740568133ll
      16:	*(u64 *)(r10 - 208) = r1
      17:	r1 = r10
      18:	r1 += -208
      19:	r2 = 25
      20:	goto 347

LBB10_2:
      21:	r1 = *(u32 *)(r8 + 56)
      22:	if r1 == 0 goto 8
; ERR_EXIT();
      23:	r2 = r10
      24:	r2 += -4
      25:	r1 = 0ll
      27:	call 1
      28:	r9 = r0
; int ebpf_zero = 0;
      29:	if r9 != 0 goto 174
      30:	goto 234

LBB10_4:
      31:	r2 = r10
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r2 += -4
      33:	r1 = 0ll
      35:	call 1
; if (!mds) {
      36:	if r0 == 0 goto 317
; printt("no packet metadata found\n");
      37:	r2 = *(u32 *)(r0 + 172)
      38:	r2 <<= 32
      39:	r1 = *(u32 *)(r0 + 168)
      40:	r2 |= r1
      41:	*(u64 *)(r10 - 272) = r2
      42:	r2 = *(u32 *)(r0 + 180)
      43:	r2 <<= 32
      44:	r1 = *(u32 *)(r0 + 176)
      45:	r2 |= r1
      46:	*(u64 *)(r10 - 288) = r2
      47:	r2 = *(u32 *)(r0 + 188)
      48:	r2 <<= 32
      49:	r1 = *(u32 *)(r0 + 184)
      50:	r2 |= r1
      51:	*(u64 *)(r10 - 304) = r2
; ERR_EXIT();
      52:	r2 = *(u32 *)(r0 + 20)
      53:	r2 <<= 32
      54:	r1 = *(u32 *)(r0 + 16)
      55:	r2 |= r1
      56:	*(u64 *)(r10 - 264) = r2
      57:	r2 = *(u32 *)(r0 + 28)
      58:	r2 <<= 32
      59:	r1 = *(u32 *)(r0 + 24)
; }
      60:	r2 |= r1
      61:	*(u64 *)(r10 - 280) = r2
      62:	r2 = *(u32 *)(r0 + 36)
; flow_key.headers = *headers;
      63:	r2 <<= 32
      64:	r1 = *(u32 *)(r0 + 32)
      65:	r2 |= r1
      66:	*(u64 *)(r10 - 296) = r2
      67:	r2 = *(u32 *)(r0 + 44)
      68:	r2 <<= 32
      69:	r1 = *(u32 *)(r0 + 40)
      70:	r2 |= r1
      71:	*(u64 *)(r10 - 312) = r2
      72:	r2 = *(u32 *)(r0 + 52)
      73:	r2 <<= 32
      74:	r1 = *(u32 *)(r0 + 48)
      75:	r2 |= r1
      76:	*(u64 *)(r10 - 320) = r2
      77:	r2 = *(u32 *)(r0 + 60)
      78:	r2 <<= 32
      79:	r1 = *(u32 *)(r0 + 56)
      80:	r2 |= r1
      81:	*(u64 *)(r10 - 328) = r2
      82:	r2 = *(u32 *)(r0 + 68)
      83:	r2 <<= 32
      84:	r1 = *(u32 *)(r0 + 64)
      85:	r2 |= r1
      86:	*(u64 *)(r10 - 336) = r2
      87:	r2 = *(u32 *)(r0 + 76)
      88:	r2 <<= 32
      89:	r1 = *(u32 *)(r0 + 72)
      90:	r2 |= r1
      91:	*(u64 *)(r10 - 344) = r2
      92:	r2 = *(u32 *)(r0 + 84)
      93:	r2 <<= 32
      94:	r1 = *(u32 *)(r0 + 80)
      95:	r2 |= r1
      96:	*(u64 *)(r10 - 352) = r2
      97:	r2 = *(u32 *)(r0 + 92)
      98:	r2 <<= 32
      99:	r1 = *(u32 *)(r0 + 88)
     100:	r2 |= r1
     101:	*(u64 *)(r10 - 360) = r2
     102:	r2 = *(u32 *)(r0 + 100)
     103:	r2 <<= 32
     104:	r1 = *(u32 *)(r0 + 96)
     105:	r2 |= r1
     106:	*(u64 *)(r10 - 368) = r2
     107:	r2 = *(u32 *)(r0 + 108)
     108:	r2 <<= 32
     109:	r1 = *(u32 *)(r0 + 104)
     110:	r2 |= r1
     111:	*(u64 *)(r10 - 376) = r2
     112:	r2 = *(u32 *)(r0 + 116)
     113:	r2 <<= 32
     114:	r1 = *(u32 *)(r0 + 112)
     115:	r2 |= r1
     116:	*(u64 *)(r10 - 384) = r2
     117:	r1 = *(u32 *)(r0 + 124)
     118:	r1 <<= 32
     119:	r6 = *(u32 *)(r0 + 120)
     120:	r1 |= r6
     121:	r6 = *(u32 *)(r0 + 132)
     122:	r6 <<= 32
     123:	*(u64 *)(r10 - 256) = r8
     124:	r8 = *(u32 *)(r0 + 128)
     125:	r6 |= r8
     126:	r9 = *(u32 *)(r0 + 140)
     127:	r9 <<= 32
     128:	r8 = *(u32 *)(r0 + 136)
     129:	r9 |= r8
     130:	r8 = *(u32 *)(r0 + 148)
; flow_key.mds = *mds;
     131:	r8 <<= 32
     132:	r5 = *(u32 *)(r0 + 144)
     133:	r8 |= r5
     134:	r5 = *(u32 *)(r0 + 156)
     135:	r5 <<= 32
     136:	r4 = *(u32 *)(r0 + 152)
     137:	r5 |= r4
     138:	r4 = *(u32 *)(r0 + 164)
     139:	r4 <<= 32
     140:	r3 = *(u32 *)(r0 + 160)
     141:	r4 |= r3
     142:	r3 = *(u32 *)(r0 + 196)
     143:	r3 <<= 32
     144:	r2 = *(u32 *)(r0 + 192)
     145:	r3 |= r2
     146:	*(u64 *)(r10 - 16) = r3
     147:	r2 = *(u64 *)(r10 - 304)
     148:	*(u64 *)(r10 - 24) = r2
     149:	r2 = *(u64 *)(r10 - 288)
     150:	*(u64 *)(r10 - 32) = r2
     151:	r2 = *(u64 *)(r10 - 272)
     152:	*(u64 *)(r10 - 40) = r2
     153:	*(u64 *)(r10 - 48) = r4
     154:	*(u64 *)(r10 - 56) = r5
     155:	*(u64 *)(r10 - 64) = r8
     156:	r8 = *(u64 *)(r10 - 256)
     157:	*(u64 *)(r10 - 72) = r9
     158:	*(u64 *)(r10 - 80) = r6
     159:	*(u64 *)(r10 - 88) = r1
     160:	r1 = *(u64 *)(r10 - 384)
     161:	*(u64 *)(r10 - 96) = r1
     162:	r1 = *(u64 *)(r10 - 376)
     163:	*(u64 *)(r10 - 104) = r1
     164:	r1 = *(u64 *)(r10 - 368)
     165:	*(u64 *)(r10 - 112) = r1
     166:	r1 = *(u64 *)(r10 - 360)
     167:	*(u64 *)(r10 - 120) = r1
     168:	r1 = *(u64 *)(r10 - 352)
     169:	*(u64 *)(r10 - 128) = r1
     170:	r1 = *(u64 *)(r10 - 344)
     171:	*(u64 *)(r10 - 136) = r1
     172:	r1 = *(u64 *)(r10 - 336)
     173:	*(u64 *)(r10 - 144) = r1
     174:	r1 = *(u64 *)(r10 - 328)
     175:	*(u64 *)(r10 - 152) = r1
     176:	r1 = *(u64 *)(r10 - 320)
     177:	*(u64 *)(r10 - 160) = r1
     178:	r1 = *(u64 *)(r10 - 312)
     179:	*(u64 *)(r10 - 168) = r1
     180:	r1 = *(u64 *)(r10 - 296)
     181:	*(u64 *)(r10 - 176) = r1
     182:	r1 = *(u64 *)(r10 - 280)
     183:	*(u64 *)(r10 - 184) = r1
     184:	r1 = *(u64 *)(r10 - 264)
     185:	*(u64 *)(r10 - 192) = r1
     186:	r1 = *(u32 *)(r0 + 12)
     187:	r1 <<= 32
     188:	r2 = *(u32 *)(r0 + 8)
     189:	r1 |= r2
     190:	*(u64 *)(r10 - 200) = r1
     191:	r1 = *(u32 *)(r0 + 0)
     192:	r2 = *(u32 *)(r0 + 4)
     193:	r2 <<= 32
     194:	r2 |= r1
     195:	*(u64 *)(r10 - 208) = r2
     196:	r2 = r10
     197:	r2 += -208
     198:	r1 = 0ll
     200:	call 1
     201:	r9 = r0
     202:	if r9 != 0 goto 1
     203:	goto 61

LBB10_9:
     204:	r7 *= 136
     205:	r1 = r9
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r1 += r7
     207:	r7 = 2
     208:	if r1 == 0 goto 161
; if (!action_batch) {
     209:	r1 = 0
; printt("no action found, upcall to userspace\n");
     210:	*(u8 *)(r10 - 186) = r1
     211:	r1 = 2680
     212:	*(u16 *)(r10 - 188) = r1
     213:	r1 = 622869792
     214:	*(u32 *)(r10 - 192) = r1
     215:	r1 = 7310027630754013288ll
     217:	*(u64 *)(r10 - 200) = r1
     218:	r6 = 8314041003361332083ll
     220:	*(u64 *)(r10 - 208) = r6
     221:	r3 = *(u32 *)(r8 + 68)
     222:	r1 = r10
     223:	r1 += -208
     224:	r2 = 23
     225:	call 6
     226:	r1 = r8
     227:	call 34
     228:	*(u64 *)(r10 - 264) = r0
     229:	r2 = r8
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r8 = 10
     231:	*(u16 *)(r10 - 188) = r8
     232:	r1 = 543716193
     233:	*(u32 *)(r10 - 192) = r1
     234:	r1 = 7503129080049246312ll
     236:	*(u64 *)(r10 - 200) = r1
     237:	*(u64 *)(r10 - 208) = r6
     238:	*(u64 *)(r10 - 256) = r2
     239:	r3 = *(u32 *)(r2 + 68)
     240:	r1 = r10
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r1 += -208
     242:	r2 = 22
     243:	call 6
; if (value) {
     244:	r2 = r10
; __sync_fetch_and_add(value, stat);
     245:	r2 += -244
; flow_stats_account(headers, mds, skb->len);
     246:	r1 = 0ll
; flow_key.headers = *headers;
     248:	call 1
     249:	r6 = r0
     250:	if r6 != 0 goto 30
     251:	r1 = 2925136540426598ll
     253:	*(u64 *)(r10 - 192) = r1
     254:	r1 = 2333274043599385701ll
     256:	*(u64 *)(r10 - 200) = r1
     257:	r1 = 7863373276654817100ll
     259:	*(u64 *)(r10 - 208) = r1
     260:	r1 = r10
     261:	r1 += -208
     262:	r2 = 24
     263:	call 6
     264:	goto 105

LBB10_7:
     265:	r1 = 0
     266:	*(u8 *)(r10 - 186) = r1
     267:	r1 = 2660
     268:	*(u16 *)(r10 - 188) = r1
     269:	r1 = 1853189990
     270:	*(u32 *)(r10 - 192) = r1
     271:	r1 = 2336927755366785312ll
     273:	*(u64 *)(r10 - 200) = r1
     274:	r1 = 7521983764245802862ll
     276:	*(u64 *)(r10 - 208) = r1
     277:	r1 = r10
     278:	r1 += -208
     279:	r2 = 23
     280:	goto 87

LBB10_12:
     281:	*(u16 *)(r10 - 176) = r8
     282:	r1 = 7526466503171925038ll
     284:	*(u64 *)(r10 - 184) = r1
     285:	r1 = 7236508540933594982ll
     287:	*(u64 *)(r10 - 192) = r1
     288:	r1 = 8098146269948813416ll
     290:	*(u64 *)(r10 - 200) = r1
     291:	r1 = 8314040875453145459ll
     293:	*(u64 *)(r10 - 208) = r1
     294:	r1 = r10
     295:	r1 += -208
     296:	r2 = 34
     297:	call 6
     298:	r4 = *(u64 *)(r10 - 264)
     299:	r2 = r4
     300:	r2 <<= 32
     301:	r2 >>= 32
     302:	r1 = 1
     303:	r3 = 0
     304:	if r2 == r3 goto 1
     305:	r1 = r4

LBB10_14:
     306:	*(u32 *)(r6 + 4) = r1
     307:	r8 = *(u64 *)(r10 - 256)
     308:	r1 = *(u32 *)(r8 + 48)
     309:	r1 += 1
     310:	*(u32 *)(r8 + 48) = r1
     311:	r1 <<= 32
     312:	r1 >>= 32
     313:	if r1 > 31 goto 58
     314:	r1 *= 136
     315:	r9 += r1
     316:	r3 = *(u32 *)(r9 + 0)
; flow_key.mds = *mds;
     317:	if r3 == 0 goto 54
     318:	r1 = 2660
     319:	*(u16 *)(r10 - 188) = r1
     320:	r1 = 622869792
     321:	*(u32 *)(r10 - 192) = r1
     322:	r1 = 7309475734889590633ll
     324:	*(u64 *)(r10 - 200) = r1
     325:	r1 = 8386653723114890606ll
     327:	*(u64 *)(r10 - 208) = r1
     328:	r6 = 0
     329:	*(u8 *)(r10 - 186) = r6
     330:	r1 = r10
     331:	r1 += -208
     332:	r2 = 23
     333:	call 6
     334:	r3 = *(u32 *)(r9 + 0)
     335:	r1 = r8
     336:	r2 = 0ll
     338:	call 12
     339:	*(u8 *)(r10 - 184) = r6
     340:	r1 = 749689262168041837ll
     342:	*(u64 *)(r10 - 192) = r1
     343:	r1 = 2336361472229141609ll
     345:	*(u64 *)(r10 - 200) = r1
     346:	r1 = 7022273303978263131ll
     348:	*(u64 *)(r10 - 208) = r1
     349:	r1 = r10
     350:	r1 += -208
     351:	r2 = 25
     352:	call 6
     353:	goto 16

LBB10_6:
     354:	r1 = 686437
     355:	*(u32 *)(r10 - 216) = r1
     356:	r1 = 7737016408759104867ll
     358:	*(u64 *)(r10 - 224) = r1
     359:	r1 = 7311705455702598514ll
     361:	*(u64 *)(r10 - 232) = r1
     362:	r1 = 7309377901238971749ll
     364:	*(u64 *)(r10 - 240) = r1
     365:	r1 = r10
     366:	r1 += -240
     367:	r2 = 28

LBB10_8:
     368:	call 6
     369:	r7 = 2

LBB10_19:
     370:	r0 = r7
     371:	exit

LBB10_17:
     372:	r7 = 4
     373:	r1 = *(u32 *)(r8 + 56)
     374:	if r1 == 0 goto 65531
     375:	r1 = 0
     376:	*(u32 *)(r10 - 208) = r1
     377:	r2 = r10
     378:	r2 += -208
     379:	r1 = 0ll
     381:	call 3
     382:	goto 65523
Disassembly of section tail-9:
tail_action_mpls_push:
; {
       0:	r1 = 10
; {
       1:	*(u16 *)(r10 - 8) = r1
; int ebpf_zero = 0;
       2:	r1 = 2323703927611024416ll
       4:	*(u64 *)(r10 - 16) = r1
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r1 = 8031079719948613408ll
       7:	*(u64 *)(r10 - 24) = r1
       8:	r1 = 8462115405067198496ll
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 32) = r1
      11:	r1 = 2314885530818453536ll
      13:	*(u64 *)(r10 - 40) = r1
      14:	r1 = 2314899018178915941ll
      16:	*(u64 *)(r10 - 48) = r1
      17:	r1 = 7882825952909664372ll
      19:	*(u64 *)(r10 - 56) = r1
      20:	r1 = 8029390844335846499ll
      22:	*(u64 *)(r10 - 64) = r1
; ERR_EXIT();
      23:	r1 = 6998685408163602536ll
      25:	*(u64 *)(r10 - 72) = r1
      26:	r1 = 8319643985984508485ll
      28:	*(u64 *)(r10 - 80) = r1
; int ebpf_zero = 0;
      29:	r1 = r10
      30:	r1 += -80
      31:	r2 = 74
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	call 6
      33:	r0 = 2
      34:	exit
Disassembly of section tail-10:
tail_action_mpls_pop:
; {
       0:	r1 = 0
; {
       1:	*(u8 *)(r10 - 8) = r1
; int ebpf_zero = 0;
       2:	r1 = 729652908846509924ll
       4:	*(u64 *)(r10 - 16) = r1
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r1 = 2337214414369743223ll
       7:	*(u64 *)(r10 - 24) = r1
       8:	r1 = 2338898147514737696ll
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 32) = r1
      11:	r1 = 2314885530818453536ll
      13:	*(u64 *)(r10 - 40) = r1
      14:	r1 = 2314885583503455342ll
      16:	*(u64 *)(r10 - 48) = r1
      17:	r1 = 7308609286709274912ll
      19:	*(u64 *)(r10 - 56) = r1
      20:	r1 = 8390045716385327476ll
      22:	*(u64 *)(r10 - 64) = r1
; ERR_EXIT();
      23:	r1 = 7161040424630504736ll
      25:	*(u64 *)(r10 - 72) = r1
      26:	r1 = 8101782354010460741ll
      28:	*(u64 *)(r10 - 80) = r1
; int ebpf_zero = 0;
      29:	r1 = r10
      30:	r1 += -80
      31:	r2 = 73
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	call 6
      33:	r0 = 2
      34:	exit
Disassembly of section tail-11:
tail_action_set_masked:
; {
       0:	r9 = r1
; {
       1:	r7 = *(u32 *)(r9 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r7 goto 14
       6:	*(u8 *)(r10 - 184) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 192) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 200) = r1
      13:	r1 = 2339727127740568133ll
      15:	*(u64 *)(r10 - 208) = r1
      16:	r1 = r10
      17:	r1 += -208
      18:	r2 = 25
      19:	goto 279

LBB13_2:
      20:	r1 = *(u32 *)(r9 + 56)
      21:	if r1 == 0 goto 7
      22:	r2 = r10
; ERR_EXIT();
      23:	r2 += -4
      24:	r1 = 0ll
      26:	call 1
      27:	if r0 != 0 goto 173
      28:	goto 240

LBB13_4:
; int ebpf_zero = 0;
      29:	r2 = r10
      30:	r2 += -4
      31:	r1 = 0ll
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      33:	call 1
      34:	if r0 == 0 goto 250
      35:	r2 = *(u32 *)(r0 + 172)
; if (!mds) {
      36:	r2 <<= 32
; printt("no packet metadata found\n");
      37:	r1 = *(u32 *)(r0 + 168)
      38:	r2 |= r1
      39:	*(u64 *)(r10 - 272) = r2
      40:	r2 = *(u32 *)(r0 + 180)
      41:	r2 <<= 32
      42:	r1 = *(u32 *)(r0 + 176)
      43:	r2 |= r1
      44:	*(u64 *)(r10 - 288) = r2
      45:	r2 = *(u32 *)(r0 + 188)
      46:	r2 <<= 32
      47:	r1 = *(u32 *)(r0 + 184)
      48:	r2 |= r1
      49:	*(u64 *)(r10 - 304) = r2
      50:	r2 = *(u32 *)(r0 + 20)
      51:	r2 <<= 32
; ERR_EXIT();
      52:	r1 = *(u32 *)(r0 + 16)
      53:	r2 |= r1
      54:	*(u64 *)(r10 - 264) = r2
      55:	r2 = *(u32 *)(r0 + 28)
      56:	r2 <<= 32
      57:	r1 = *(u32 *)(r0 + 24)
      58:	r2 |= r1
      59:	*(u64 *)(r10 - 280) = r2
; }
      60:	r2 = *(u32 *)(r0 + 36)
      61:	r2 <<= 32
      62:	r1 = *(u32 *)(r0 + 32)
; flow_key.headers = *headers;
      63:	r2 |= r1
      64:	*(u64 *)(r10 - 296) = r2
      65:	r2 = *(u32 *)(r0 + 44)
      66:	r2 <<= 32
      67:	r1 = *(u32 *)(r0 + 40)
      68:	r2 |= r1
      69:	*(u64 *)(r10 - 312) = r2
      70:	r2 = *(u32 *)(r0 + 52)
      71:	r2 <<= 32
      72:	r1 = *(u32 *)(r0 + 48)
      73:	r2 |= r1
      74:	*(u64 *)(r10 - 320) = r2
      75:	r2 = *(u32 *)(r0 + 60)
      76:	r2 <<= 32
      77:	r1 = *(u32 *)(r0 + 56)
      78:	r2 |= r1
      79:	*(u64 *)(r10 - 328) = r2
      80:	r2 = *(u32 *)(r0 + 68)
      81:	r2 <<= 32
      82:	r1 = *(u32 *)(r0 + 64)
      83:	r2 |= r1
      84:	*(u64 *)(r10 - 336) = r2
      85:	r2 = *(u32 *)(r0 + 76)
      86:	r2 <<= 32
      87:	r1 = *(u32 *)(r0 + 72)
      88:	r2 |= r1
      89:	*(u64 *)(r10 - 344) = r2
      90:	r2 = *(u32 *)(r0 + 84)
      91:	r2 <<= 32
      92:	r1 = *(u32 *)(r0 + 80)
      93:	r2 |= r1
      94:	*(u64 *)(r10 - 352) = r2
      95:	r2 = *(u32 *)(r0 + 92)
      96:	r2 <<= 32
      97:	r1 = *(u32 *)(r0 + 88)
      98:	r2 |= r1
      99:	*(u64 *)(r10 - 360) = r2
     100:	r2 = *(u32 *)(r0 + 100)
     101:	r2 <<= 32
     102:	r1 = *(u32 *)(r0 + 96)
     103:	r2 |= r1
     104:	*(u64 *)(r10 - 368) = r2
     105:	r2 = *(u32 *)(r0 + 108)
     106:	r2 <<= 32
     107:	r1 = *(u32 *)(r0 + 104)
     108:	r2 |= r1
     109:	*(u64 *)(r10 - 376) = r2
     110:	*(u64 *)(r10 - 248) = r7
     111:	r7 = *(u32 *)(r0 + 116)
     112:	r7 <<= 32
     113:	r1 = *(u32 *)(r0 + 112)
     114:	r7 |= r1
     115:	r3 = *(u32 *)(r0 + 124)
     116:	r3 <<= 32
     117:	r1 = *(u32 *)(r0 + 120)
     118:	r3 |= r1
     119:	*(u64 *)(r10 - 256) = r9
     120:	r9 = *(u32 *)(r0 + 132)
     121:	r9 <<= 32
     122:	r1 = *(u32 *)(r0 + 128)
     123:	r9 |= r1
     124:	r2 = *(u32 *)(r0 + 140)
     125:	r2 <<= 32
     126:	r1 = *(u32 *)(r0 + 136)
     127:	r2 |= r1
     128:	r1 = *(u32 *)(r0 + 148)
     129:	r1 <<= 32
     130:	r5 = *(u32 *)(r0 + 144)
; flow_key.mds = *mds;
     131:	r1 |= r5
     132:	r5 = *(u32 *)(r0 + 156)
     133:	r5 <<= 32
     134:	r4 = *(u32 *)(r0 + 152)
     135:	r5 |= r4
     136:	r4 = *(u32 *)(r0 + 164)
     137:	r4 <<= 32
     138:	r6 = *(u32 *)(r0 + 160)
     139:	r4 |= r6
     140:	r6 = *(u32 *)(r0 + 196)
     141:	r6 <<= 32
     142:	r8 = *(u32 *)(r0 + 192)
     143:	r6 |= r8
     144:	*(u64 *)(r10 - 16) = r6
     145:	r6 = *(u64 *)(r10 - 304)
     146:	*(u64 *)(r10 - 24) = r6
     147:	r6 = *(u64 *)(r10 - 288)
     148:	*(u64 *)(r10 - 32) = r6
     149:	r6 = *(u64 *)(r10 - 272)
     150:	*(u64 *)(r10 - 40) = r6
     151:	*(u64 *)(r10 - 48) = r4
     152:	*(u64 *)(r10 - 56) = r5
     153:	*(u64 *)(r10 - 64) = r1
     154:	*(u64 *)(r10 - 72) = r2
     155:	*(u64 *)(r10 - 80) = r9
     156:	r9 = *(u64 *)(r10 - 256)
     157:	*(u64 *)(r10 - 88) = r3
     158:	*(u64 *)(r10 - 96) = r7
     159:	r7 = *(u64 *)(r10 - 248)
     160:	r1 = *(u64 *)(r10 - 376)
     161:	*(u64 *)(r10 - 104) = r1
     162:	r1 = *(u64 *)(r10 - 368)
     163:	*(u64 *)(r10 - 112) = r1
     164:	r1 = *(u64 *)(r10 - 360)
     165:	*(u64 *)(r10 - 120) = r1
     166:	r1 = *(u64 *)(r10 - 352)
     167:	*(u64 *)(r10 - 128) = r1
     168:	r1 = *(u64 *)(r10 - 344)
     169:	*(u64 *)(r10 - 136) = r1
     170:	r1 = *(u64 *)(r10 - 336)
     171:	*(u64 *)(r10 - 144) = r1
     172:	r1 = *(u64 *)(r10 - 328)
     173:	*(u64 *)(r10 - 152) = r1
     174:	r1 = *(u64 *)(r10 - 320)
     175:	*(u64 *)(r10 - 160) = r1
     176:	r1 = *(u64 *)(r10 - 312)
     177:	*(u64 *)(r10 - 168) = r1
     178:	r1 = *(u64 *)(r10 - 296)
     179:	*(u64 *)(r10 - 176) = r1
     180:	r1 = *(u64 *)(r10 - 280)
     181:	*(u64 *)(r10 - 184) = r1
     182:	r1 = *(u64 *)(r10 - 264)
     183:	*(u64 *)(r10 - 192) = r1
     184:	r1 = *(u32 *)(r0 + 12)
     185:	r1 <<= 32
     186:	r2 = *(u32 *)(r0 + 8)
     187:	r1 |= r2
     188:	*(u64 *)(r10 - 200) = r1
     189:	r1 = *(u32 *)(r0 + 0)
     190:	r2 = *(u32 *)(r0 + 4)
     191:	r2 <<= 32
     192:	r2 |= r1
     193:	*(u64 *)(r10 - 208) = r2
     194:	r2 = r10
     195:	r2 += -208
     196:	r1 = 0ll
     198:	call 1
     199:	if r0 != 0 goto 1
     200:	goto 68

LBB13_9:
     201:	r7 *= 136
     202:	*(u64 *)(r10 - 256) = r0
     203:	r6 = r0
     204:	*(u64 *)(r10 - 248) = r7
     205:	r6 += r7
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r8 = 2
     207:	if r6 == 0 goto 93
     208:	r1 = 681061
; if (!action_batch) {
     209:	*(u32 *)(r10 - 200) = r1
; printt("no action found, upcall to userspace\n");
     210:	r1 = 7742639305703843187ll
     212:	*(u64 *)(r10 - 208) = r1
     213:	r1 = r10
     214:	r1 += -208
     215:	r2 = 12
     216:	call 6
     217:	r2 = r6
     218:	r2 += 8
     219:	r1 = *(u32 *)(r6 + 8)
     220:	if r1 == 7 goto 82
     221:	if r1 != 4 goto 225
     222:	*(u64 *)(r10 - 264) = r2
     223:	r7 = *(u32 *)(r9 + 80)
     224:	r6 = *(u32 *)(r9 + 76)
     225:	r1 = 0
     226:	*(u8 *)(r10 - 198) = r1
     227:	r1 = 2674
     228:	*(u16 *)(r10 - 200) = r1
     229:	r1 = 7307218373093647731ll
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     231:	*(u64 *)(r10 - 208) = r1
     232:	r1 = r10
     233:	r1 += -208
     234:	r2 = 11
     235:	call 6
     236:	r1 = r6
     237:	r1 += 14
     238:	if r1 > r7 goto 62
     239:	r3 = *(u64 *)(r10 - 264)
     240:	r1 = *(u8 *)(r3 + 10)
; value = map_lookup_elem(&datapath_stats, &index);
     241:	*(u8 *)(r6 + 0) = r1
     242:	r1 = *(u8 *)(r3 + 11)
     243:	*(u8 *)(r6 + 1) = r1
; if (value) {
     244:	r1 = *(u8 *)(r3 + 12)
; __sync_fetch_and_add(value, stat);
     245:	*(u8 *)(r6 + 2) = r1
; flow_stats_account(headers, mds, skb->len);
     246:	r1 = *(u8 *)(r3 + 13)
     247:	*(u8 *)(r6 + 3) = r1
; flow_key.headers = *headers;
     248:	r4 = *(u64 *)(r10 - 256)
     249:	r1 = r4
     250:	r2 = *(u64 *)(r10 - 248)
     251:	r1 += r2
     252:	r2 = *(u8 *)(r3 + 14)
     253:	*(u8 *)(r6 + 4) = r2
     254:	r2 = *(u8 *)(r3 + 15)
     255:	*(u8 *)(r6 + 5) = r2
     256:	r2 = *(u8 *)(r3 + 4)
     257:	*(u8 *)(r6 + 6) = r2
     258:	r2 = *(u8 *)(r3 + 5)
     259:	*(u8 *)(r6 + 7) = r2
     260:	r2 = *(u8 *)(r3 + 6)
     261:	*(u8 *)(r6 + 8) = r2
     262:	r2 = *(u8 *)(r3 + 7)
     263:	*(u8 *)(r6 + 9) = r2
     264:	r1 = *(u8 *)(r1 + 16)
     265:	*(u8 *)(r6 + 10) = r1
     266:	r1 = *(u8 *)(r3 + 9)
     267:	*(u8 *)(r6 + 11) = r1
     268:	goto 131

LBB13_7:
     269:	r1 = 0
     270:	*(u8 *)(r10 - 186) = r1
     271:	r1 = 2660
     272:	*(u16 *)(r10 - 188) = r1
     273:	r1 = 1853189990
     274:	*(u32 *)(r10 - 192) = r1
     275:	r1 = 2336927755366785312ll
     277:	*(u64 *)(r10 - 200) = r1
     278:	r1 = 7521983764245802862ll
     280:	*(u64 *)(r10 - 208) = r1
     281:	r1 = r10
     282:	r1 += -208
     283:	r2 = 23
     284:	goto 14

LBB13_6:
     285:	r1 = 686437
     286:	*(u32 *)(r10 - 216) = r1
     287:	r1 = 7737016408759104867ll
     289:	*(u64 *)(r10 - 224) = r1
     290:	r1 = 7311705455702598514ll
     292:	*(u64 *)(r10 - 232) = r1
     293:	r1 = 7309377901238971749ll
     295:	*(u64 *)(r10 - 240) = r1
     296:	r1 = r10
     297:	r1 += -240
     298:	r2 = 28

LBB13_8:
     299:	call 6
     300:	r8 = 2

LBB13_21:
     301:	r0 = r8
     302:	exit

LBB13_14:
     303:	*(u64 *)(r10 - 264) = r2
     304:	r7 = *(u32 *)(r9 + 80)
     305:	r6 = *(u32 *)(r9 + 76)
     306:	r1 = 3780332534042486131ll
     308:	*(u64 *)(r10 - 208) = r1
     309:	r1 = 10
     310:	*(u16 *)(r10 - 200) = r1
     311:	r1 = r10
     312:	r1 += -208
     313:	r2 = 10
     314:	call 6
     315:	r1 = r6
     316:	r1 += 46
; flow_key.mds = *mds;
     317:	if r1 > r7 goto 65519
     318:	r7 = *(u64 *)(r10 - 264)
     319:	r1 = *(u32 *)(r7 + 4)
     320:	r2 = *(u32 *)(r7 + 8)
     321:	*(u32 *)(r6 + 30) = r2
     322:	*(u32 *)(r6 + 26) = r1
     323:	r1 = *(u8 *)(r7 + 12)
     324:	*(u8 *)(r6 + 23) = r1
     325:	r1 = *(u8 *)(r7 + 13)
     326:	*(u64 *)(r10 - 272) = r1
     327:	*(u8 *)(r10 - 208) = r1
     328:	r6 = r9
     329:	r0 = *(u8 *)skb[15]
     330:	r0 &= 255
     331:	r1 = r9
     332:	r2 = 24
     333:	r3 = r0
     334:	r4 = *(u64 *)(r10 - 272)
     335:	r5 = 2
     336:	call 10
     337:	r3 = r10
     338:	r3 += -208
     339:	r1 = r9
     340:	r2 = 15
     341:	r4 = 1
     342:	r5 = 0
     343:	call 9
     344:	r1 = *(u8 *)(r7 + 14)
     345:	*(u64 *)(r10 - 272) = r1
     346:	*(u8 *)(r10 - 208) = r1
     347:	r0 = *(u8 *)skb[22]
     348:	r0 &= 255
     349:	r1 = r9
     350:	r2 = 24
     351:	r3 = r0
     352:	r4 = *(u64 *)(r10 - 272)
     353:	r5 = 2
     354:	call 10
     355:	r3 = r10
     356:	r3 += -208
     357:	r1 = r9
     358:	r2 = 22
     359:	r4 = 1
     360:	r5 = 0
     361:	call 9
     362:	r7 = *(u32 *)(r7 + 4)
     363:	*(u32 *)(r10 - 208) = r7
     364:	r0 = *(u32 *)skb[26]
     365:	r1 = r9
     366:	r2 = 24
     367:	r3 = r0
     368:	r4 = r7
     369:	r5 = 4
     370:	call 10
     371:	r3 = r10
     372:	r3 += -208
     373:	r1 = r9
     374:	r2 = 26
     375:	r4 = 4
     376:	r5 = 0
     377:	call 9
     378:	r7 = *(u64 *)(r10 - 256)
     379:	r1 = r7
     380:	r2 = *(u64 *)(r10 - 248)
     381:	r1 += r2
     382:	r9 = *(u32 *)(r1 + 16)
     383:	*(u32 *)(r10 - 208) = r9
     384:	r0 = *(u32 *)skb[30]
     385:	r1 = r6
     386:	r2 = 24
     387:	r3 = r0
     388:	r4 = r9
     389:	r9 = r6
     390:	r5 = 4
     391:	call 10
; flow_stats = bpf_map_lookup_elem(&dp_flow_stats, &flow_key);
     392:	r3 = r10
     393:	r3 += -208
     394:	r1 = r9
     395:	r2 = 30
; if (!flow_stats) {
     396:	r4 = 4
; printt("flow not found in flow stats, first install\n");
     397:	r5 = 0
     398:	call 9
     399:	r4 = r7

LBB13_16:
     400:	r1 = *(u32 *)(r9 + 48)
     401:	r1 += 1
     402:	*(u32 *)(r9 + 48) = r1
     403:	r1 <<= 32
     404:	r1 >>= 32
     405:	if r1 > 31 goto 60
     406:	r1 *= 136
     407:	r4 += r1
     408:	r3 = *(u32 *)(r4 + 0)
     409:	if r3 == 0 goto 56
     410:	r1 = 2660
     411:	*(u16 *)(r10 - 188) = r1
     412:	r1 = 622869792
     413:	*(u32 *)(r10 - 192) = r1
     414:	r1 = 7309475734889590633ll
     416:	*(u64 *)(r10 - 200) = r1
     417:	r1 = 8386653723114890606ll
     419:	*(u64 *)(r10 - 208) = r1
; s.packet_count = 1;
     420:	r6 = 0
     421:	*(u8 *)(r10 - 186) = r6
; s.byte_count = bytes;
     422:	r1 = r10
     423:	r1 += -208
; s.used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     424:	r2 = 23
     425:	r7 = r4
     426:	call 6
     427:	r3 = *(u32 *)(r7 + 0)
     428:	r1 = r9
     429:	r2 = 0ll
; err = bpf_map_update_elem(&dp_flow_stats, &flow_key, &s, BPF_ANY);
     431:	call 12
     432:	*(u8 *)(r10 - 184) = r6
     433:	r1 = 749689262168041837ll
     435:	*(u64 *)(r10 - 192) = r1
; flow_stats->packet_count += 1;
     436:	r1 = 2336361472229141609ll
     438:	*(u64 *)(r10 - 200) = r1
     439:	r1 = 7022273303978263131ll
     441:	*(u64 *)(r10 - 208) = r1
     442:	r1 = r10
; flow_stats->used = bpf_ktime_get_ns() / (1000*1000); /* msec */
     443:	r1 += -208
     444:	r2 = 25
     445:	call 6
; printt("current: packets %d count %d ts %d\n",
     446:	goto 65390

LBB13_22:
     447:	r1 = 0
     448:	*(u8 *)(r10 - 182) = r1
     449:	r1 = 2660
     450:	*(u16 *)(r10 - 184) = r1
     451:	r1 = 2675266157730096229ll
     453:	*(u64 *)(r10 - 192) = r1
     454:	r1 = 8389754676365258861ll
     456:	*(u64 *)(r10 - 200) = r1
     457:	r1 = 7578835059827954245ll
     459:	*(u64 *)(r10 - 208) = r1
     460:	r3 = *(u32 *)(r6 + 0)
     461:	r1 = r10
     462:	r1 += -208
     463:	r2 = 27
     464:	call 6
     465:	goto 65371

LBB13_19:
     466:	r8 = 4
; flow_key.headers = *headers;
     467:	r1 = *(u32 *)(r9 + 56)
     468:	if r1 == 0 goto 65368
     469:	r1 = 0
     470:	*(u32 *)(r10 - 208) = r1
     471:	r2 = r10
     472:	r2 += -208
     473:	r1 = 0ll
     475:	call 3
     476:	goto 65360
Disassembly of section tail-12:
tail_action_ct:
; {
       0:	r1 = 10
; {
       1:	*(u16 *)(r10 - 16) = r1
; int ebpf_zero = 0;
       2:	r1 = 2323703927611024416ll
       4:	*(u64 *)(r10 - 24) = r1
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r1 = 8031079719948613408ll
       7:	*(u64 *)(r10 - 32) = r1
       8:	r1 = 8462115405067198496ll
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 40) = r1
      11:	r1 = 2314885530818453536ll
      13:	*(u64 *)(r10 - 48) = r1
      14:	r1 = 2314899018178915941ll
      16:	*(u64 *)(r10 - 56) = r1
      17:	r1 = 7882825952909664372ll
      19:	*(u64 *)(r10 - 64) = r1
      20:	r1 = 8029390547849210219ll
      22:	*(u64 *)(r10 - 72) = r1
; ERR_EXIT();
      23:	r1 = 7161130725581680489ll
      25:	*(u64 *)(r10 - 80) = r1
      26:	r1 = 8386658456067597096ll
      28:	*(u64 *)(r10 - 88) = r1
; int ebpf_zero = 0;
      29:	r1 = 2329560712953877061ll
      31:	*(u64 *)(r10 - 96) = r1
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = r10
      33:	r1 += -96
      34:	r2 = 82
      35:	call 6
; if (!mds) {
      36:	r0 = 2
; printt("no packet metadata found\n");
      37:	exit
Disassembly of section tail-13:
tail_action_trunc:
; {
       0:	r6 = r1
; {
       1:	r7 = *(u32 *)(r6 + 48)
; int ebpf_zero = 0;
       2:	r1 = 0
       3:	*(u32 *)(r10 - 4) = r1
       4:	r2 = 32
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	if r2 > r7 goto 14
       6:	*(u8 *)(r10 - 184) = r1
       7:	r1 = 753342933619339113ll
; if (!headers) {
       9:	*(u64 *)(r10 - 192) = r1
; printt("no packet header found\n");
      10:	r1 = 8386653722879484517ll
      12:	*(u64 *)(r10 - 200) = r1
      13:	r1 = 2339727127740568133ll
      15:	*(u64 *)(r10 - 208) = r1
      16:	r1 = r10
      17:	r1 += -208
      18:	r2 = 25
      19:	goto 316

LBB15_2:
      20:	r1 = *(u32 *)(r6 + 56)
      21:	if r1 == 0 goto 8
      22:	r2 = r10
; ERR_EXIT();
      23:	r2 += -4
      24:	r1 = 0ll
      26:	call 1
      27:	r8 = r0
      28:	if r8 != 0 goto 174
; int ebpf_zero = 0;
      29:	goto 265

LBB15_4:
      30:	r2 = r10
      31:	r2 += -4
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = 0ll
      34:	call 1
      35:	if r0 == 0 goto 286
; if (!mds) {
      36:	r2 = *(u32 *)(r0 + 172)
; printt("no packet metadata found\n");
      37:	r2 <<= 32
      38:	r1 = *(u32 *)(r0 + 168)
      39:	r2 |= r1
      40:	*(u64 *)(r10 - 264) = r2
      41:	r2 = *(u32 *)(r0 + 180)
      42:	r2 <<= 32
      43:	r1 = *(u32 *)(r0 + 176)
      44:	r2 |= r1
      45:	*(u64 *)(r10 - 280) = r2
      46:	r2 = *(u32 *)(r0 + 188)
      47:	r2 <<= 32
      48:	r1 = *(u32 *)(r0 + 184)
      49:	r2 |= r1
      50:	*(u64 *)(r10 - 296) = r2
      51:	r2 = *(u32 *)(r0 + 20)
; ERR_EXIT();
      52:	r2 <<= 32
      53:	r1 = *(u32 *)(r0 + 16)
      54:	r2 |= r1
      55:	*(u64 *)(r10 - 256) = r2
      56:	r2 = *(u32 *)(r0 + 28)
      57:	r2 <<= 32
      58:	r1 = *(u32 *)(r0 + 24)
      59:	r2 |= r1
; }
      60:	*(u64 *)(r10 - 272) = r2
      61:	r2 = *(u32 *)(r0 + 36)
      62:	r2 <<= 32
; flow_key.headers = *headers;
      63:	r1 = *(u32 *)(r0 + 32)
      64:	r2 |= r1
      65:	*(u64 *)(r10 - 288) = r2
      66:	r2 = *(u32 *)(r0 + 44)
      67:	r2 <<= 32
      68:	r1 = *(u32 *)(r0 + 40)
      69:	r2 |= r1
      70:	*(u64 *)(r10 - 304) = r2
      71:	r2 = *(u32 *)(r0 + 52)
      72:	r2 <<= 32
      73:	r1 = *(u32 *)(r0 + 48)
      74:	r2 |= r1
      75:	*(u64 *)(r10 - 312) = r2
      76:	r2 = *(u32 *)(r0 + 60)
      77:	r2 <<= 32
      78:	r1 = *(u32 *)(r0 + 56)
      79:	r2 |= r1
      80:	*(u64 *)(r10 - 320) = r2
      81:	r2 = *(u32 *)(r0 + 68)
      82:	r2 <<= 32
      83:	r1 = *(u32 *)(r0 + 64)
      84:	r2 |= r1
      85:	*(u64 *)(r10 - 328) = r2
      86:	r2 = *(u32 *)(r0 + 76)
      87:	r2 <<= 32
      88:	r1 = *(u32 *)(r0 + 72)
      89:	r2 |= r1
      90:	*(u64 *)(r10 - 336) = r2
      91:	r2 = *(u32 *)(r0 + 84)
      92:	r2 <<= 32
      93:	r1 = *(u32 *)(r0 + 80)
      94:	r2 |= r1
      95:	*(u64 *)(r10 - 344) = r2
      96:	r2 = *(u32 *)(r0 + 92)
      97:	r2 <<= 32
      98:	r1 = *(u32 *)(r0 + 88)
      99:	r2 |= r1
     100:	*(u64 *)(r10 - 352) = r2
     101:	r2 = *(u32 *)(r0 + 100)
     102:	r2 <<= 32
     103:	r1 = *(u32 *)(r0 + 96)
     104:	r2 |= r1
     105:	*(u64 *)(r10 - 360) = r2
     106:	r2 = *(u32 *)(r0 + 108)
     107:	r2 <<= 32
     108:	r1 = *(u32 *)(r0 + 104)
     109:	r2 |= r1
     110:	*(u64 *)(r10 - 368) = r2
     111:	r2 = *(u32 *)(r0 + 116)
     112:	r2 <<= 32
     113:	r1 = *(u32 *)(r0 + 112)
     114:	r2 |= r1
     115:	*(u64 *)(r10 - 376) = r2
     116:	r3 = *(u32 *)(r0 + 124)
     117:	r3 <<= 32
     118:	r1 = *(u32 *)(r0 + 120)
     119:	r3 |= r1
     120:	r2 = *(u32 *)(r0 + 132)
     121:	r2 <<= 32
     122:	r1 = *(u32 *)(r0 + 128)
     123:	r2 |= r1
     124:	r1 = *(u32 *)(r0 + 140)
     125:	r1 <<= 32
     126:	*(u64 *)(r10 - 248) = r6
     127:	r6 = *(u32 *)(r0 + 136)
     128:	r1 |= r6
     129:	r6 = *(u32 *)(r0 + 148)
     130:	r6 <<= 32
; flow_key.mds = *mds;
     131:	r9 = *(u32 *)(r0 + 144)
     132:	r6 |= r9
     133:	r9 = *(u32 *)(r0 + 156)
     134:	r9 <<= 32
     135:	r8 = *(u32 *)(r0 + 152)
     136:	r9 |= r8
     137:	r8 = *(u32 *)(r0 + 164)
     138:	r8 <<= 32
     139:	r5 = *(u32 *)(r0 + 160)
     140:	r8 |= r5
     141:	r5 = *(u32 *)(r0 + 196)
     142:	r5 <<= 32
     143:	r4 = *(u32 *)(r0 + 192)
     144:	r5 |= r4
     145:	*(u64 *)(r10 - 16) = r5
     146:	r4 = *(u64 *)(r10 - 296)
     147:	*(u64 *)(r10 - 24) = r4
     148:	r4 = *(u64 *)(r10 - 280)
     149:	*(u64 *)(r10 - 32) = r4
     150:	r4 = *(u64 *)(r10 - 264)
     151:	*(u64 *)(r10 - 40) = r4
     152:	*(u64 *)(r10 - 48) = r8
     153:	*(u64 *)(r10 - 56) = r9
     154:	*(u64 *)(r10 - 64) = r6
     155:	r6 = *(u64 *)(r10 - 248)
     156:	*(u64 *)(r10 - 72) = r1
     157:	*(u64 *)(r10 - 80) = r2
     158:	*(u64 *)(r10 - 88) = r3
     159:	r1 = *(u64 *)(r10 - 376)
     160:	*(u64 *)(r10 - 96) = r1
     161:	r1 = *(u64 *)(r10 - 368)
     162:	*(u64 *)(r10 - 104) = r1
     163:	r1 = *(u64 *)(r10 - 360)
     164:	*(u64 *)(r10 - 112) = r1
     165:	r1 = *(u64 *)(r10 - 352)
     166:	*(u64 *)(r10 - 120) = r1
     167:	r1 = *(u64 *)(r10 - 344)
     168:	*(u64 *)(r10 - 128) = r1
     169:	r1 = *(u64 *)(r10 - 336)
     170:	*(u64 *)(r10 - 136) = r1
     171:	r1 = *(u64 *)(r10 - 328)
     172:	*(u64 *)(r10 - 144) = r1
     173:	r1 = *(u64 *)(r10 - 320)
     174:	*(u64 *)(r10 - 152) = r1
     175:	r1 = *(u64 *)(r10 - 312)
     176:	*(u64 *)(r10 - 160) = r1
     177:	r1 = *(u64 *)(r10 - 304)
     178:	*(u64 *)(r10 - 168) = r1
     179:	r1 = *(u64 *)(r10 - 288)
     180:	*(u64 *)(r10 - 176) = r1
     181:	r1 = *(u64 *)(r10 - 272)
     182:	*(u64 *)(r10 - 184) = r1
     183:	r1 = *(u64 *)(r10 - 256)
     184:	*(u64 *)(r10 - 192) = r1
     185:	r1 = *(u32 *)(r0 + 12)
     186:	r1 <<= 32
     187:	r2 = *(u32 *)(r0 + 8)
     188:	r1 |= r2
     189:	*(u64 *)(r10 - 200) = r1
     190:	r1 = *(u32 *)(r0 + 0)
     191:	r2 = *(u32 *)(r0 + 4)
     192:	r2 <<= 32
     193:	r2 |= r1
     194:	*(u64 *)(r10 - 208) = r2
     195:	r2 = r10
     196:	r2 += -208
     197:	r1 = 0ll
     199:	call 1
     200:	r8 = r0
     201:	if r8 != 0 goto 1
     202:	goto 92

LBB15_9:
     203:	r7 *= 136
     204:	r9 = r8
     205:	r9 += r7
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r7 = 2
     207:	if r9 == 0 goto 130
     208:	r1 = 2924860384372082ll
; printt("no action found, upcall to userspace\n");
     210:	*(u64 *)(r10 - 200) = r1
     211:	r1 = 8027214857959794028ll
     213:	*(u64 *)(r10 - 208) = r1
     214:	r3 = *(u32 *)(r6 + 0)
     215:	r1 = r10
     216:	r1 += -208
     217:	r2 = 16
     218:	call 6
     219:	r1 = 2924860387849248ll
     221:	*(u64 *)(r10 - 200) = r1
     222:	r1 = 7310575174812004980ll
     224:	*(u64 *)(r10 - 208) = r1
     225:	r3 = *(u32 *)(r9 + 8)
     226:	r1 = r10
     227:	r1 += -208
     228:	r2 = 16
     229:	call 6
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r2 = *(u32 *)(r9 + 8)
     231:	r9 = r6
     232:	r6 = 0
     233:	r1 = r9
     234:	r3 = 0
     235:	call 38
     236:	*(u8 *)(r10 - 194) = r6
     237:	r1 = 2660
     238:	*(u16 *)(r10 - 196) = r1
     239:	r1 = 622869106
     240:	*(u32 *)(r10 - 200) = r1
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r1 = 7310580662471124332ll
     243:	*(u64 *)(r10 - 208) = r1
; if (value) {
     244:	r3 = *(u32 *)(r9 + 0)
; __sync_fetch_and_add(value, stat);
     245:	r1 = r10
; flow_stats_account(headers, mds, skb->len);
     246:	r1 += -208
     247:	r2 = 15
; flow_key.headers = *headers;
     248:	call 6
     249:	r1 = *(u32 *)(r9 + 48)
     250:	r1 += 1
     251:	*(u32 *)(r9 + 48) = r1
     252:	r1 <<= 32
     253:	r1 >>= 32
     254:	if r1 > 31 goto 56
     255:	r1 *= 136
     256:	r8 += r1
     257:	r3 = *(u32 *)(r8 + 0)
     258:	if r3 == 0 goto 52
     259:	r1 = 2660
     260:	*(u16 *)(r10 - 188) = r1
     261:	r1 = 622869792
     262:	*(u32 *)(r10 - 192) = r1
     263:	r1 = 7309475734889590633ll
     265:	*(u64 *)(r10 - 200) = r1
     266:	r1 = 8386653723114890606ll
     268:	*(u64 *)(r10 - 208) = r1
     269:	r6 = 0
     270:	*(u8 *)(r10 - 186) = r6
     271:	r1 = r10
     272:	r1 += -208
     273:	r2 = 23
     274:	call 6
     275:	r3 = *(u32 *)(r8 + 0)
     276:	r1 = r9
     277:	r2 = 0ll
     279:	call 12
     280:	*(u8 *)(r10 - 184) = r6
     281:	r1 = 749689262168041837ll
     283:	*(u64 *)(r10 - 192) = r1
     284:	r1 = 2336361472229141609ll
     286:	*(u64 *)(r10 - 200) = r1
     287:	r1 = 7022273303978263131ll
     289:	*(u64 *)(r10 - 208) = r1
     290:	r1 = r10
     291:	r1 += -208
     292:	r2 = 25
     293:	call 6
     294:	goto 43

LBB15_7:
     295:	r1 = 0
     296:	*(u8 *)(r10 - 186) = r1
     297:	r1 = 2660
     298:	*(u16 *)(r10 - 188) = r1
     299:	r1 = 1853189990
     300:	*(u32 *)(r10 - 192) = r1
     301:	r1 = 2336927755366785312ll
     303:	*(u64 *)(r10 - 200) = r1
     304:	r1 = 7521983764245802862ll
     306:	*(u64 *)(r10 - 208) = r1
     307:	r1 = r10
     308:	r1 += -208
     309:	r2 = 23
     310:	goto 25

LBB15_13:
     311:	r7 = 4
     312:	r1 = *(u32 *)(r9 + 56)
     313:	if r1 == 0 goto 24
     314:	r1 = 0
     315:	*(u32 *)(r10 - 208) = r1
     316:	r2 = r10
; flow_key.mds = *mds;
     317:	r2 += -208
     318:	r1 = 0ll
     320:	call 3
     321:	goto 16

LBB15_6:
     322:	r1 = 686437
     323:	*(u32 *)(r10 - 216) = r1
     324:	r1 = 7737016408759104867ll
     326:	*(u64 *)(r10 - 224) = r1
     327:	r1 = 7311705455702598514ll
     329:	*(u64 *)(r10 - 232) = r1
     330:	r1 = 7309377901238971749ll
     332:	*(u64 *)(r10 - 240) = r1
     333:	r1 = r10
     334:	r1 += -240
     335:	r2 = 28

LBB15_8:
     336:	call 6
     337:	r7 = 2

LBB15_15:
     338:	r0 = r7
     339:	exit
Disassembly of section xdp:
xdp_ingress:
; {
       0:	r1 = 0
; {
       1:	*(u8 *)(r10 - 16) = r1
; int ebpf_zero = 0;
       2:	r1 = 744029903432667204ll
       4:	*(u64 *)(r10 - 24) = r1
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r1 = 6350196912468288882ll
       7:	*(u64 *)(r10 - 32) = r1
       8:	r1 = r10
; if (!headers) {
       9:	r1 += -32
; printt("no packet header found\n");
      10:	r2 = 17
      11:	call 6
      12:	r0 = 2
      13:	exit
Disassembly of section af_xdp:
af_xdp_ingress:
; {
       0:	r0 = 2
; {
       1:	exit
Disassembly of section tail-35:
process_upcall:
; {
       0:	r6 = r1
; {
       1:	r8 = 0
; int ebpf_zero = 0;
       2:	*(u64 *)(r10 - 8) = r8
       3:	*(u64 *)(r10 - 16) = r8
       4:	*(u64 *)(r10 - 24) = r8
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	*(u64 *)(r10 - 32) = r8
       6:	*(u64 *)(r10 - 40) = r8
       7:	*(u64 *)(r10 - 48) = r8
       8:	*(u64 *)(r10 - 56) = r8
; if (!headers) {
       9:	*(u64 *)(r10 - 64) = r8
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 72) = r8
      11:	*(u64 *)(r10 - 80) = r8
      12:	*(u64 *)(r10 - 88) = r8
      13:	*(u64 *)(r10 - 96) = r8
      14:	*(u64 *)(r10 - 104) = r8
      15:	*(u64 *)(r10 - 112) = r8
      16:	*(u64 *)(r10 - 120) = r8
      17:	*(u64 *)(r10 - 128) = r8
      18:	*(u64 *)(r10 - 136) = r8
      19:	*(u64 *)(r10 - 144) = r8
      20:	*(u64 *)(r10 - 152) = r8
      21:	*(u64 *)(r10 - 160) = r8
      22:	*(u64 *)(r10 - 168) = r8
; ERR_EXIT();
      23:	*(u64 *)(r10 - 176) = r8
      24:	*(u64 *)(r10 - 184) = r8
      25:	*(u64 *)(r10 - 192) = r8
      26:	*(u64 *)(r10 - 200) = r8
      27:	*(u64 *)(r10 - 208) = r8
      28:	*(u64 *)(r10 - 216) = r8
; int ebpf_zero = 0;
      29:	*(u64 *)(r10 - 224) = r8
      30:	*(u64 *)(r10 - 232) = r8
      31:	*(u64 *)(r10 - 240) = r8
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	*(u64 *)(r10 - 248) = r8
      33:	r1 = 1
      34:	*(u8 *)(r10 - 248) = r1
      35:	r1 = *(u32 *)(r6 + 0)
; if (!mds) {
      36:	*(u32 *)(r10 - 232) = r1
; printt("no packet metadata found\n");
      37:	*(u32 *)(r10 - 288) = r8
      38:	r2 = r10
      39:	r2 += -288
      40:	r1 = 0ll
      42:	call 1
      43:	r7 = r0
      44:	*(u32 *)(r10 - 288) = r8
      45:	r2 = r10
      46:	r2 += -288
      47:	r1 = 0ll
      49:	call 1
      50:	if r7 == 0 goto 1
      51:	if r0 != 0 goto 14

LBB18_2:
; ERR_EXIT();
      52:	*(u8 *)(r10 - 268) = r8
      53:	r1 = 172772437
      54:	*(u32 *)(r10 - 272) = r1
      55:	r1 = 5629626429566313581ll
      57:	*(u64 *)(r10 - 280) = r1
      58:	r1 = 3419202321905706344ll
; }
      60:	*(u64 *)(r10 - 288) = r1
      61:	r1 = r10
      62:	r1 += -288
; flow_key.headers = *headers;
      63:	r2 = 21
      64:	call 6
      65:	goto 210

LBB18_3:
      66:	*(u64 *)(r10 - 328) = r6
      67:	r1 = *(u32 *)(r0 + 40)
      68:	*(u32 *)(r10 - 244) = r1
      69:	r1 = *(u32 *)(r7 + 68)
      70:	r1 <<= 32
      71:	r2 = *(u32 *)(r7 + 64)
      72:	r1 |= r2
      73:	*(u64 *)(r10 - 296) = r1
      74:	r1 = *(u32 *)(r7 + 76)
      75:	r1 <<= 32
      76:	r3 = *(u32 *)(r7 + 72)
      77:	r1 |= r3
      78:	*(u64 *)(r10 - 304) = r1
      79:	r4 = *(u32 *)(r7 + 84)
      80:	r4 <<= 32
      81:	r3 = *(u32 *)(r7 + 80)
      82:	r4 |= r3
      83:	r1 = *(u32 *)(r7 + 20)
      84:	r1 <<= 32
      85:	r5 = *(u32 *)(r7 + 16)
      86:	r1 |= r5
      87:	*(u64 *)(r10 - 312) = r1
      88:	r5 = *(u32 *)(r7 + 28)
      89:	r5 <<= 32
      90:	r6 = *(u32 *)(r7 + 24)
      91:	r5 |= r6
      92:	r8 = *(u32 *)(r7 + 36)
      93:	r8 <<= 32
      94:	r6 = *(u32 *)(r7 + 32)
      95:	r8 |= r6
      96:	r9 = *(u32 *)(r7 + 44)
      97:	r9 <<= 32
      98:	r6 = *(u32 *)(r7 + 40)
      99:	r9 |= r6
     100:	r6 = *(u32 *)(r7 + 52)
     101:	r6 <<= 32
     102:	r1 = *(u32 *)(r7 + 48)
     103:	r6 |= r1
     104:	r1 = *(u32 *)(r7 + 60)
     105:	r1 <<= 32
     106:	r2 = *(u32 *)(r7 + 56)
     107:	r1 |= r2
     108:	r2 = *(u32 *)(r7 + 92)
     109:	r2 <<= 32
     110:	r3 = *(u32 *)(r7 + 88)
     111:	r2 |= r3
     112:	*(u64 *)(r10 - 112) = r2
     113:	*(u64 *)(r10 - 120) = r4
     114:	r2 = *(u64 *)(r10 - 304)
     115:	*(u64 *)(r10 - 128) = r2
     116:	r2 = *(u64 *)(r10 - 296)
     117:	*(u64 *)(r10 - 136) = r2
     118:	*(u64 *)(r10 - 144) = r1
     119:	*(u64 *)(r10 - 152) = r6
     120:	*(u64 *)(r10 - 160) = r9
     121:	*(u64 *)(r10 - 168) = r8
     122:	*(u64 *)(r10 - 176) = r5
     123:	r1 = *(u64 *)(r10 - 312)
     124:	*(u64 *)(r10 - 184) = r1
     125:	r1 = *(u32 *)(r7 + 12)
     126:	r1 <<= 32
     127:	r2 = *(u32 *)(r7 + 8)
     128:	r1 |= r2
     129:	*(u64 *)(r10 - 192) = r1
     130:	r1 = *(u32 *)(r7 + 4)
; flow_key.mds = *mds;
     131:	r1 <<= 32
     132:	r2 = *(u32 *)(r7 + 0)
     133:	r1 |= r2
     134:	*(u64 *)(r10 - 200) = r1
     135:	r1 = *(u32 *)(r0 + 76)
     136:	r1 <<= 32
     137:	r2 = *(u32 *)(r0 + 72)
     138:	r1 |= r2
     139:	*(u64 *)(r10 - 296) = r1
     140:	r1 = *(u32 *)(r0 + 84)
     141:	r1 <<= 32
     142:	r3 = *(u32 *)(r0 + 80)
     143:	r1 |= r3
     144:	*(u64 *)(r10 - 304) = r1
     145:	r1 = *(u32 *)(r0 + 92)
     146:	r1 <<= 32
     147:	r3 = *(u32 *)(r0 + 88)
     148:	r1 |= r3
     149:	*(u64 *)(r10 - 320) = r1
     150:	r1 = *(u32 *)(r0 + 20)
     151:	r1 <<= 32
     152:	r5 = *(u32 *)(r0 + 16)
     153:	r1 |= r5
     154:	*(u64 *)(r10 - 312) = r1
     155:	r5 = *(u32 *)(r0 + 28)
     156:	r5 <<= 32
     157:	r6 = *(u32 *)(r0 + 24)
     158:	r5 |= r6
     159:	r8 = *(u32 *)(r0 + 36)
     160:	r8 <<= 32
     161:	r6 = *(u32 *)(r0 + 32)
     162:	r8 |= r6
     163:	r9 = *(u32 *)(r0 + 44)
     164:	r9 <<= 32
     165:	r6 = *(u32 *)(r0 + 40)
     166:	r9 |= r6
     167:	r6 = *(u32 *)(r0 + 52)
     168:	r6 <<= 32
     169:	r1 = *(u32 *)(r0 + 48)
     170:	r6 |= r1
     171:	r1 = *(u32 *)(r0 + 60)
     172:	r1 <<= 32
     173:	r2 = *(u32 *)(r0 + 56)
     174:	r1 |= r2
     175:	r2 = *(u32 *)(r0 + 68)
     176:	r2 <<= 32
     177:	r3 = *(u32 *)(r0 + 64)
     178:	r2 |= r3
     179:	r3 = *(u32 *)(r0 + 100)
     180:	r3 <<= 32
     181:	r4 = *(u32 *)(r0 + 96)
     182:	r3 |= r4
     183:	*(u64 *)(r10 - 8) = r3
     184:	r3 = *(u64 *)(r10 - 320)
     185:	*(u64 *)(r10 - 16) = r3
     186:	r3 = *(u64 *)(r10 - 304)
     187:	*(u64 *)(r10 - 24) = r3
     188:	r3 = *(u64 *)(r10 - 296)
     189:	*(u64 *)(r10 - 32) = r3
     190:	*(u64 *)(r10 - 40) = r2
     191:	*(u64 *)(r10 - 48) = r1
     192:	*(u64 *)(r10 - 56) = r6
     193:	*(u64 *)(r10 - 64) = r9
     194:	*(u64 *)(r10 - 72) = r8
     195:	*(u64 *)(r10 - 80) = r5
     196:	r1 = *(u64 *)(r10 - 312)
     197:	*(u64 *)(r10 - 88) = r1
     198:	r1 = *(u32 *)(r0 + 12)
     199:	r1 <<= 32
     200:	r2 = *(u32 *)(r0 + 8)
     201:	r1 |= r2
     202:	*(u64 *)(r10 - 96) = r1
     203:	r1 = *(u32 *)(r0 + 0)
     204:	r2 = *(u32 *)(r0 + 4)
     205:	r2 <<= 32
; return bpf_map_lookup_elem(&flow_table, &flow_key);
     206:	r2 |= r1
     207:	*(u64 *)(r10 - 104) = r2
     208:	r1 = *(u8 *)(r7 + 1)
; if (!action_batch) {
     209:	r1 &= 1
; printt("no action found, upcall to userspace\n");
     210:	if r1 != 0 goto 3
     211:	r6 = *(u64 *)(r10 - 328)
     212:	r3 = *(u32 *)(r6 + 0)
     213:	goto 31

LBB18_5:
     214:	r1 = 0
     215:	*(u8 *)(r10 - 252) = r1
     216:	r1 = 175645984
     217:	*(u32 *)(r10 - 256) = r1
     218:	r1 = 8657361517142636064ll
     220:	*(u64 *)(r10 - 264) = r1
     221:	r1 = 7526756837604549669ll
     223:	*(u64 *)(r10 - 272) = r1
     224:	r1 = 2913377524529324651ll
     226:	*(u64 *)(r10 - 280) = r1
     227:	r1 = 8295749726362628213ll
     229:	*(u64 *)(r10 - 288) = r1
; bpf_tail_call(skb, &tailcalls, UPCALL_CALL);
     230:	r5 = *(u16 *)(r7 + 88)
     231:	r4 = *(u16 *)(r7 + 90)
     232:	r6 = *(u64 *)(r10 - 328)
     233:	r3 = *(u32 *)(r6 + 0)
     234:	r1 = r10
     235:	r1 += -288
     236:	r2 = 37
     237:	call 6
     238:	r2 = *(u16 *)(r7 + 90)
     239:	r3 = *(u16 *)(r7 + 88)
     240:	r3 &= 61439
; value = map_lookup_elem(&datapath_stats, &index);
     241:	r1 = r6
     242:	call 18
     243:	r3 = *(u32 *)(r6 + 0)
; if (value) {
     244:	*(u32 *)(r10 - 232) = r3

LBB18_6:
; __sync_fetch_and_add(value, stat);
     245:	r3 <<= 32
; flow_stats_account(headers, mds, skb->len);
     246:	r1 = 4294967295ll
; flow_key.headers = *headers;
     248:	r3 |= r1
     249:	r4 = r10
     250:	r4 += -248
     251:	r1 = r6
     252:	r2 = 0ll
     254:	r5 = 248
     255:	call 25
     256:	r0 <<= 32
     257:	r0 >>= 32
     258:	r1 = 3
     259:	r2 = 4294967268ll
     261:	if r0 == r2 goto 1
     262:	r1 = 7

LBB18_8:
     263:	r2 = 2
     264:	r3 = 0
     265:	if r0 == r3 goto 1
     266:	r2 = r1

LBB18_10:
     267:	*(u32 *)(r10 - 288) = r2
     268:	r2 = r10
     269:	r2 += -288
     270:	r1 = 0ll
     272:	call 1
     273:	if r0 == 0 goto 2
     274:	r1 = 1
     275:	lock *(u64 *)(r0 + 0) += r1

LBB18_12:
     276:	r0 = 0
     277:	exit
Disassembly of section ingress:
to_stack:
; {
       0:	r6 = r1
; {
       1:	r1 = 2860259863961700ll
; int ebpf_zero = 0;
       3:	*(u64 *)(r10 - 16) = r1
       4:	r1 = 2675258504086167667ll
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       6:	*(u64 *)(r10 - 24) = r1
       7:	r1 = 8315178075569064458ll
; if (!headers) {
       9:	*(u64 *)(r10 - 32) = r1
; printt("no packet header found\n");
      10:	r4 = *(u32 *)(r6 + 40)
      11:	r3 = *(u32 *)(r6 + 36)
      12:	r1 = r10
      13:	r1 += -32
      14:	r2 = 24
      15:	call 6
      16:	r1 = 0
      17:	*(u32 *)(r6 + 60) = r1
      18:	*(u32 *)(r6 + 56) = r1
      19:	*(u32 *)(r6 + 52) = r1
      20:	*(u32 *)(r6 + 48) = r1
      21:	*(u32 *)(r6 + 64) = r1
      22:	r1 = 1
; ERR_EXIT();
      23:	*(u32 *)(r6 + 52) = r1
      24:	r1 = r6
      25:	r2 = 0ll
      27:	r3 = 32
      28:	call 12
; int ebpf_zero = 0;
      29:	r1 = 2941689227536238ll
      31:	*(u64 *)(r10 - 8) = r1
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = 7575175971031771489ll
      34:	*(u64 *)(r10 - 16) = r1
      35:	r1 = 7359001003869544556ll
; printt("no packet metadata found\n");
      37:	*(u64 *)(r10 - 24) = r1
      38:	r1 = 7593478128489615941ll
      40:	*(u64 *)(r10 - 32) = r1
      41:	r1 = r10
      42:	r1 += -32
      43:	r2 = 32
      44:	call 6
      45:	r0 = 2
      46:	exit
Disassembly of section egress:
from_stack:
; {
       0:	r6 = r1
; {
       1:	r1 = 2601
; int ebpf_zero = 0;
       2:	*(u16 *)(r10 - 12) = r1
       3:	r1 = 1680156704
       4:	*(u32 *)(r10 - 16) = r1
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r1 = 7216209632324380192ll
       7:	*(u64 *)(r10 - 24) = r1
       8:	r1 = 8319104478718790154ll
; printt("no packet header found\n");
      10:	*(u64 *)(r10 - 32) = r1
      11:	r7 = 0
      12:	*(u8 *)(r10 - 10) = r7
      13:	r4 = *(u32 *)(r6 + 40)
      14:	r3 = *(u32 *)(r6 + 36)
      15:	r1 = r10
      16:	r1 += -32
      17:	r2 = 23
      18:	call 6
      19:	*(u32 *)(r6 + 60) = r7
      20:	*(u32 *)(r6 + 56) = r7
      21:	*(u32 *)(r6 + 52) = r7
      22:	*(u32 *)(r6 + 48) = r7
; ERR_EXIT();
      23:	*(u32 *)(r6 + 64) = r7
      24:	r1 = r6
      25:	r2 = 0ll
      27:	r3 = 32
      28:	call 12
; int ebpf_zero = 0;
      29:	*(u8 *)(r10 - 2) = r7
      30:	r1 = 2675
      31:	*(u16 *)(r10 - 4) = r1
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r1 = 1936028263
      33:	*(u32 *)(r10 - 8) = r1
      34:	r1 = 7286945594880059745ll
; if (!mds) {
      36:	*(u64 *)(r10 - 16) = r1
; printt("no packet metadata found\n");
      37:	r1 = 7359001003869544556ll
      39:	*(u64 *)(r10 - 24) = r1
      40:	r1 = 7593478128489615941ll
      42:	*(u64 *)(r10 - 32) = r1
      43:	r1 = r10
      44:	r1 += -32
      45:	r2 = 31
      46:	call 6
      47:	r0 = 2
      48:	exit
Disassembly of section downcall:
execute:
; {
       0:	r6 = r1
; {
       1:	r1 = 0
; int ebpf_zero = 0;
       2:	*(u32 *)(r10 - 124) = r1
       3:	r8 = *(u32 *)(r6 + 0)
       4:	r8 += -120
; return bpf_map_lookup_elem(&percpu_headers, &ebpf_zero);
       5:	r3 = r10
       6:	r3 += -120
       7:	r1 = r6
       8:	r2 = r8
; if (!headers) {
       9:	r4 = 120
; printt("no packet header found\n");
      10:	call 26
      11:	r7 = *(u32 *)(r10 - 108)
      12:	r1 = 2924860388108129ll
      14:	*(u64 *)(r10 - 136) = r1
      15:	r1 = 7810966218212404591ll
      17:	*(u64 *)(r10 - 144) = r1
      18:	r1 = 8243311530094176288ll
      20:	*(u64 *)(r10 - 152) = r1
      21:	r1 = 7812726533263945572ll
; ERR_EXIT();
      23:	*(u64 *)(r10 - 160) = r1
      24:	r4 = *(u32 *)(r10 - 116)
      25:	r3 = *(u32 *)(r10 - 120)
      26:	r7 &= 1
      27:	r1 = r10
      28:	r1 += -160
; int ebpf_zero = 0;
      29:	r2 = 32
      30:	r5 = r7
      31:	call 6
; return bpf_map_lookup_elem(&percpu_metadata, &ebpf_zero);
      32:	r2 = r10
      33:	r2 += -124
      34:	r3 = r10
      35:	r3 += -104
; if (!mds) {
      36:	r1 = 0ll
; printt("no packet metadata found\n");
      38:	r4 = 0
      39:	call 2
      40:	r1 = r6
      41:	r2 = r8
      42:	r3 = 0
      43:	call 38
      44:	r3 = *(u32 *)(r10 - 120)
      45:	if r3 == 1 goto 29
      46:	if r3 != 2 goto 36
      47:	r2 = r10
      48:	r2 += -124
      49:	r1 = 0ll
      51:	call 1
; ERR_EXIT();
      52:	r7 = r0
      53:	if r7 == 0 goto 46
      54:	r1 = 2929526130696799ll
      56:	*(u64 *)(r10 - 144) = r1
      57:	r1 = 7957695015191388260ll
      59:	*(u64 *)(r10 - 152) = r1
; }
      60:	r1 = 7596553831445718375ll
      62:	*(u64 *)(r10 - 160) = r1
; flow_key.headers = *headers;
      63:	r1 = r10
      64:	r1 += -160
      65:	r2 = 24
      66:	call 6
      67:	r1 = 1
      68:	*(u32 *)(r6 + 56) = r1
      69:	r3 = *(u32 *)(r7 + 0)
      70:	r1 = r6
      71:	r2 = 0ll
      73:	call 12
      74:	goto 23

LBB21_5:
      75:	r1 = 4294967295ll
      77:	*(u32 *)(r6 + 48) = r1
      78:	r1 = *(u32 *)(r10 - 116)
      79:	r2 = r7
      80:	call 23
      81:	r6 = r0
      82:	goto 33

LBB21_6:
      83:	r1 = 10
      84:	*(u16 *)(r10 - 136) = r1
      85:	r1 = 7216209597981881376ll
      87:	*(u64 *)(r10 - 144) = r1
      88:	r1 = 7812726533263945572ll
      90:	*(u64 *)(r10 - 152) = r1
      91:	r1 = 2336936577129475669ll
      93:	*(u64 *)(r10 - 160) = r1
      94:	r1 = r10
      95:	r1 += -160
      96:	r2 = 26
      97:	call 6

LBB21_7:
      98:	r6 = 0
      99:	goto 16

LBB21_4:
     100:	r1 = 2664
     101:	*(u16 *)(r10 - 140) = r1
     102:	r1 = 1668571490
     103:	*(u32 *)(r10 - 144) = r1
     104:	r1 = 6876556179756245280ll
     106:	*(u64 *)(r10 - 152) = r1
     107:	r1 = 7812748569432319335ll
     109:	*(u64 *)(r10 - 160) = r1
     110:	r6 = 0
     111:	*(u8 *)(r10 - 138) = r6
     112:	r1 = r10
     113:	r1 += -160
     114:	r2 = 23
     115:	call 6

LBB21_8:
     116:	r0 = r6
     117:	exit
